<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <title>Planet Python</title>
  <link media="screen" href="/static/styles/screen-switcher-default.css"
     type="text/css" id="screen-switcher-stylesheet" rel="stylesheet" />
  <link rel="stylesheet" type="text/css" media="sc&#82;een" href="/static/styles/netscape4.css" />
  <link rel="stylesheet" type="text/css" media="print" href="/static/styles/print.css" />
  <link rel="alternate stylesheet" type="text/css" media="screen" href="/static/styles/largestyles.css" title="large text" />
  <link media="screen" href="/static/styles/defaultfonts.css" type="text/css"
      rel="alternate stylesheet" title="default fonts" />
  <script src="/js/iotbs2-key-directors-load.js" type="text/javascript"></script>
  <script src="/js/iotbs2-directors.js" type="text/javascript"></script>
  <script src="/js/iotbs2-core.js" type="text/javascript"></script>
  <meta name="generator" content="Planet/2.0 +http://www.planetplanet.org" />
  <meta name="keywords"
     content="Python weblog blog blogs blogger weblogger aggregator rss" />
  <meta name="description" content="Recent postings from Python-related blogs." />
  <link rel="alternate" type="application/rss+xml" title="RSS"
     href="rss20.xml" />
  <style>
    /* Make images responsive */
    img {
        border: 0;
        height: auto;
        max-width: 100%;
        display: block;
        padding-top: 5px;
        padding-bottom: 35px;
    }
  </style>
</head>

<body>
  <!-- Logo -->
  <h1 id="logoheader">
    <a href="/" id="logolink" accesskey="1"><img id="logo"
src="/static/images/python-logo.gif" alt="homepage" border="0" /></a>
  </h1>
  <!-- Skip to Navigation -->
  <div class="skiptonav"><a href="#left-hand-navigation" accesskey="2"><img src="/static/images/trans.gif" id="skiptonav" alt="skip to navigation" border="0" /></a></div>
  <div class="skiptonav"><a href="#content-body" accesskey="3"><img src="/static/images/trans.gif" id="skiptocontent" alt="skip to content" border="0" /></a></div>

  <div id="content-body">
    <div id="body-main">

<h1 class="pageheading">Planet Python</h1>

<p>Last update: October 16, 2017 07:46 AM





<h2>October 16, 2017</h2>




<hr /><h3 class="post"><a href="https://simpleisbetterthancomplex.com/" title="Simple is Better Than Complex">Simple is Better Than Complex</a></h3>


<h4><a href="https://simpleisbetterthancomplex.com/series/2017/10/16/a-complete-beginners-guide-to-django-part-7.html">A Complete Beginner's Guide to Django - Part 7</a></h4>
<p>
<h4 id="introduction">Introduction</h4>

<p>Welcome to the last part of our tutorial series! In this tutorial, we are going to deploy our Django application to a
production server. We are also going to configure an Email service and HTTPS certificates for our servers.</p>

<p>At first, I thought about given an example using a Virtual Private Server (VPS), which is more generic and then using
one Platform as a Service such as Heroku. But it was too much detail, so I ended up creating this tutorial focused on
VPSs.</p>

<p>Our project is live! If you want to check online before you go through the text, this is the application we are going
to deploy: <a href="https://www.djangoboards.com" target="_blank" rel="noopener">www.djangoboards.com</a>.</p>

<hr />

<h4 id="version-control">Version Control</h4>

<p>Version control is an extremely important topic in software development. Especially when working with teams and
maintaining production code at the same time, several features are being developed in parallel. No matter if itâs
a one developer project or a multiple developers project, every project should use version control.</p>

<p>There are several options of version control systems out there. Perhaps because of the popularity of GitHub, <strong>Git</strong>
become the <em>de facto</em> standard in version control. So if you are not familiar version control, Git is a good place to
start. There are many tutorials, courses, and resources in general so that itâs easy to find help.</p>

<p>GitHub and Code School have a great <a href="https://try.github.io" target="_blank" rel="noopener">interactive tutorial about Git</a>,
which I used years ago when I started moving from SVN to Git. Itâs a very good introduction.</p>

<p>This is such an important topic that I probably should have brought it up since the first tutorial. But the truth is I
wanted the focus of this tutorial series to be on Django. If all this is new for you, donât worry. Itâs important to
take one step at a time. Your first project wonât be perfect. Itâs important to keep learning and evolving your skills
slowly but with constancy.</p>

<p>A very good thing about Git is that itâs much more than just a version control system. Thereâs a rich ecosystem of
tools and services built around it. Some good examples are continuous integration, deployment, code review,
code quality, and project management.</p>

<p>Using Git to support the deployment process of Django projects works very well. Itâs a convenient way to pull the
latest version from the source code repository or to rollback to a specific version in case of a problem. There are
many services that integrate with Git so to automate test execution and deployment for example.</p>

<p>If you donât have Git installed on your local machine, grab the installed from <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a>.</p>

<h5 id="basic-setup">Basic Setup</h5>

<p>First thing, set your identity:</p>

<pre><code class="language-bash">git config --global user.name <span class="s2">"Vitor Freitas"</span>
git config --global user.email vitor@simpleisbetterthancomplex.com</code></pre>

<p>In the project root (the same directory as <strong>manage.py</strong> is), initialize a git repository:</p>

<pre><code class="language-text">git init</code></pre>

<pre><code class="language-text">Initialized empty Git repository in /Users/vitorfs/Development/myproject/.git/</code></pre>

<p>Check the status of the repository:</p>

<pre><code class="language-text">git status</code></pre>

<pre><code class="language-text">On branch master

Initial commit

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

  accounts/
  boards/
  manage.py
  myproject/
  requirements.txt
  static/
  templates/

nothing added to commit but untracked files present (use "git add" to track)</code></pre>

<p>Before we proceed in adding the source files, create a new file named <strong>.gitignore</strong> in the project root. This special
file will help us keep the repository clean, without unnecessary files like cache files or logs for example.</p>

<p>You can grab a <a href="https://github.com/github/gitignore/blob/master/Python.gitignore" target="_blank" rel="noopener">generic .gitignore file for Python projects</a>
from GitHub.</p>

<p>Make sure to rename it from <strong>Python.gitignore</strong> to just <strong>.gitignore</strong> (the dot is important!).</p>

<p>You can complement the <strong>.gitignore</strong> file telling it to ignore SQLite database files for example:</p>

<p><strong>.gitignore</strong></p>

<pre><code class="language-text">__pycache__/
*.py[cod]
.env
venv/


# SQLite database files

*.sqlite3</code></pre>

<p>Now add the files to the repository:</p>

<pre><code class="language-text">git add .</code></pre>

<p>Notice the dot here. The command above is telling Git to add <em>all</em> untracked files within the current directory.</p>

<p>Now make the first commit:</p>

<pre><code class="language-text">git commit -m "Initial commit"</code></pre>

<p>Always write a comment telling what this commit is about, briefly describing what have you changed.</p>

<h5 id="remote-repository">Remote Repository</h5>

<p>Now letâs setup <a href="https://github.com" target="_blank" rel="noopener">GitHub</a> as a remote repository. First, create
a free account on GitHub, then confirm your email address. After that, you will be able to create public repositories.</p>

<p>For now, just pick a name for the repository, donât initialize it with a README, or add a .gitignore or add a license
so far. Make sure you start the repository empty:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/github1.png" alt="GitHub" /></p>

<p>After you create the repository you should see something like this:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/github2.png" alt="GitHub" /></p>

<p>Now letâs configure it as our remote repository:</p>

<pre><code class="language-text">git remote add origin git@github.com:sibtc/django-boards.git</code></pre>

<p>Now push the code to the remote server, that is, to the GitHub repository:</p>

<pre><code class="language-text">git push origin master

Counting objects: 84, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (81/81), done.
Writing objects: 100% (84/84), 319.70 KiB | 0 bytes/s, done.
Total 84 (delta 10), reused 0 (delta 0)
remote: Resolving deltas: 100% (10/10), done.
To git@github.com:sibtc/django-boards.git
 * [new branch]      master -&gt; master</code></pre>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/github3.png" alt="GitHub" /></p>

<p>I create this repository just to demonstrate the process to create a remote repository with an existing code base. The
source code of the project is officially hosted in this repository:
<a href="https://github.com/sibtc/django-beginners-guide" target="_blank" rel="noopener">https://github.com/sibtc/django-beginners-guide</a>.</p>

<hr />

<h4 id="project-settings">Project Settings</h4>

<p>No matter if the code is stored in a public or private remote repository, sensitive information should <strong>never</strong> be
committed and pushed to the remote repository. That includes secret keys, passwords, API keys, etc.</p>

<p>At this point, we have to deal with two specific types of configuration in our <strong>settings.py</strong> module:</p>

<ul>
  <li>Sensitive information such as keys and passwords;</li>
  <li>Configurations that are specific to a given environment.</li>
</ul>

<p>Passwords and keys can be stored in environment variables or using local files (not committed to the remote
repository):</p>

<pre><code class="language-python"><span class="c"># environment variables</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'SECRET_KEY'</span><span class="p">]</span>

<span class="c"># or local files</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'/etc/secret_key.txt'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span></code></pre>

<p>For that, thereâs a great utility library called <a href="https://simpleisbetterthancomplex.com/2015/11/26/package-of-the-week-python-decouple.html">Python Decouple</a>
that I use in every single Django project I develop. It will search for a local file named <strong>.env</strong> to set the
configuration variables and will fall back to the environment variables. It also provides an interface to define
default values, transform the data into <strong>int</strong>, <strong>bool</strong>, and <strong>list</strong> when applicable.</p>

<p>Itâs not mandatory, but I really find it a very useful tool. And it works like a charm with services like Heroku.</p>

<p>First, letâs install it:</p>

<pre><code class="language-text">pip install python-decouple</code></pre>

<p><strong>myproject/settings.py</strong></p>

<pre><code class="language-python"><span class="kn">from</span> <span class="nn">decouple</span> <span class="kn">import</span> <span class="n">config</span>

<span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'SECRET_KEY'</span><span class="p">)</span></code></pre>

<p>Now we can place the sensitive information in a special file named <strong>.env</strong> (notice the dot in front) in the same
directory where the <strong>manage.py</strong> file is:</p>

<pre><code class="language-bash">myproject/
 |-- myproject/
 |    |-- accounts/
 |    |-- boards/
 |    |-- myproject/
 |    |-- static/
 |    |-- templates/
 |    |-- .env        &lt;-- here!
 |    |-- .gitignore
 |    |-- db.sqlite3
 |    +-- manage.py
 +-- venv/</code></pre>

<p><strong>.env</strong></p>

<pre><code class="language-text">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=d</code></pre>

<p>The <strong>.env</strong> file is ignored in the <strong>.gitignore</strong> file, so every time we are going to deploy the application or run
in a different machine, we will have to create a <strong>.env</strong> file and add the necessary configuration.</p>

<p>Now letâs install another library to help us write the database connection in a single line. This way itâs easier to
write different database connection strings in different environments:</p>

<pre><code class="language-text">pip install dj-database-url</code></pre>

<p>For now, all the configurations we will need to decouple:</p>

<p><strong>myproject/settings.py</strong></p>

<pre><code class="language-python"><span class="kn">from</span> <span class="nn">decouple</span> <span class="kn">import</span> <span class="n">config</span><span class="p">,</span> <span class="n">Csv</span>
<span class="kn">import</span> <span class="nn">dj_database_url</span>

<span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'SECRET_KEY'</span><span class="p">)</span>
<span class="n">DEBUG</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'DEBUG'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">cast</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
<span class="n">ALLOWED_HOSTS</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'ALLOWED_HOSTS'</span><span class="p">,</span> <span class="n">cast</span><span class="o">=</span><span class="n">Csv</span><span class="p">())</span>
<span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'default'</span><span class="p">:</span> <span class="n">dj_database_url</span><span class="o">.</span><span class="n">config</span><span class="p">(</span>
        <span class="n">default</span><span class="o">=</span><span class="n">config</span><span class="p">(</span><span class="s">'DATABASE_URL'</span><span class="p">)</span>
    <span class="p">)</span>
<span class="p">}</span></code></pre>

<p>Example of a <strong>.env</strong> file for our local machine:</p>

<pre><code class="language-text">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=d
DEBUG=True
ALLOWED_HOSTS=.localhost,127.0.0.1</code></pre>

<p>Notice that in the <code class="highlighter-rouge">DEBUG</code> configuration we have a default, so in production we can ignore this configuration because
it will be set to <code class="highlighter-rouge">False</code> automatically, as it is supposed to be.</p>

<p>Now the <code class="highlighter-rouge">ALLOWED_HOSTS</code> will be transformed into a list like <code class="highlighter-rouge">['.localhost', '127.0.0.1'. ]</code>. Now, this is on our
local machine, for production we will set it to something like <code class="highlighter-rouge">['.djangoboards.com', ]</code> or whatever domain you have.</p>

<p>This particular configuration make sure your application is only served to this domain.</p>

<hr />

<h4 id="tracking-requirements">Tracking Requirements</h4>

<p>Itâs a good practice to keep track of the projectâs dependencies, so to be easier to install it in another machine.</p>

<p>We can check the currently installed Python libraries by running the command:</p>

<pre><code class="language-text">pip freeze

dj-database-url==0.4.2
Django==1.11.6
django-widget-tweaks==1.4.1
Markdown==2.6.9
python-decouple==3.1
pytz==2017.2</code></pre>

<p>Create a file named <strong>requirements.txt</strong> in the project root, and add the dependencies there:</p>

<p><strong>requirements.txt</strong></p>

<pre><code class="language-text">dj-database-url==0.4.2
Django==1.11.6
django-widget-tweaks==1.4.1
Markdown==2.6.9
python-decouple==3.1</code></pre>

<p>I kept the <strong>pytz==2017.2</strong> out, because it is automatically installed by Django.</p>

<p>You can update your source code repository:</p>

<pre><code class="language-text">git add .
git commit -m "Add requirements.txt file"
git push origin master</code></pre>

<hr />

<h4 id="domain-name">Domain Name</h4>

<p>If we are going to deploy a Django application properly, we will need a domain name. Itâs important to have a domain
name to serve the application, configure an email service and configure an https certificate.</p>

<p>Lately Iâve been using <a href="https://www.namecheap.com/security/ssl-certificates.aspx?aff=110351" target="_blank" rel="noopener nofollow">Namecheap</a>
a lot. You can get a <strong>.com</strong> domain for $8.88/year or if you are just trying things out, you could register a <strong>.xyz</strong>
domain for $0.99/year.</p>

<p>Anyway, you are free to use any registrar. For demonstrate the deployment process I registered the
<a href="https://www.djangoboards.com/" target="_blank" rel="noopener">www.DjangoBoards.com</a> domain.</p>

<hr />

<h4 id="deployment-strategy">Deployment Strategy</h4>

<p>Here is an overview of the deployment strategy we are going to use in this tutorial:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/deployment.jpg" alt="Deployment" /></p>

<p>The cloud is our Virtual Private Server provided by <a href="https://m.do.co/c/074832454ff1" target="_blank" rel="nofollow noopener">Digital Ocean</a>.
You can sign up to Digital Ocean using my affiliate link to get a <a href="https://m.do.co/c/074832454ff1" target="_blank" rel="nofollow noopener">free $10 credit</a> (only valid for new accounts).</p>

<p>Upfront we will have NGINX, illustrated by the ogre. NGINX will receive all requests to the server. But it wonât try
to do anything smart if the request data. All it is going to do is decide if the requested information is a static
asset that he can serve by himself, or if itâs something more complicated. If so, it will pass the request to Gunicorn.</p>

<p>The NGINX will also be configured with HTTPS certificates. Meaning it will only accept requests via HTTPS. If the client
tries to make a request via HTTP, NGINX will first redirect the user to the HTTPS and only then it will decide what do
to with the request.</p>

<p>We are also going to install this certbot to automatically renew the Letâs Encrypt certificates.</p>

<p>Gunicorn is an application server. Depending on the number of processors the server has, it can spawn multiple workers
to process multiple requests in parallel. It manage the workload and execute the Python and Django code.</p>

<p>Django is the one doing the hard work. It may access the database (PostgreSQL) or the file system. But for the
most part, the work is done inside the views, rendering templates, all those things that weâve been coding for the
past weeks. After Django process the request, it returns a response back to Gunicorn, who returns the result to NGINX
that will finally delivery the response to the client.</p>

<p>We are also going to install PostgreSQL, a production quality database system. Because of Djangoâs ORM system itâs
easy to switch databases.</p>

<p>The last step is to install Supervisor. Supervisor is a process control system and it will keep an eye on Gunicorn and
Django to make sure everything runs smoothly. If the server restarts, or if Gunicorn crashes, it will automatically
restart it.</p>

<hr />

<h4 id="deploying-to-a-vps-digital-ocean">Deploying to a VPS (Digital Ocean)</h4>

<p>You may use any other VPS (Virtual Private Server) you like. The configuration should be very similar, after all, we
are going to use Ubuntu 16.04 as our server.</p>

<p>First letâs create a new server (on Digital Ocean they call it âDropletâ). Select Ubuntu 16.04:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/do1.png" alt="Digital Ocean" /></p>

<p>Pick the size. The smallest droplet is enough:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/do2.png" alt="Digital Ocean" /></p>

<p>Then choose a hostname for your droplet (in my case âdjango-boardsâ):</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/do3.png" alt="Digital Ocean" /></p>

<p>If you have a SSH key you can add it to your account. Then you will be able to log in the server using it. Otherwise
they will email you the root password.</p>

<p>Now pick the serverâs IP address:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/do4.png" alt="Digital Ocean" /></p>

<p>Before we log in to the server, letâs point our domain name to this IP address. This will save some time because
DNS settings usually takes a few minutes to propagate.</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/namecheap.png" alt="Namecheap" /></p>

<p>So here we basically added two A records, one pointing to the naked domain âdjangoboards.comâ and the other one for
âwww.djangoboards.comâ. We will use NGINX to configure a canonical URL.</p>

<p>Not letâs log in to the server using your terminal:</p>

<pre><code class="language-text">ssh root@45.55.144.54
root@45.55.144.54's password:</code></pre>

<p>Then you should see the following message:</p>

<pre><code class="language-text">You are required to change your password immediately (root enforced)
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

0 packages can be updated.
0 updates are security updates.


Last login: Sun Oct 15 18:39:21 2017 from 82.128.188.51
Changing password for root.
(current) UNIX password:</code></pre>

<p>Set the new password, and letâs start to configure the server.</p>

<pre><code class="language-text">sudo apt-get update
sudo apt-get -y upgrade</code></pre>

<p>If you get any prompt during the upgrade, select the option âkeep the local version currently installedâ.</p>

<p><strong>Python 3.6</strong></p>

<pre><code class="language-text">sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt-get update
sudo apt-get install python3.6</code></pre>

<p><strong>PostgreSQL</strong></p>

<pre><code class="language-text">sudo apt-get -y install postgresql postgresql-contrib</code></pre>

<p><strong>NGINX</strong></p>

<pre><code class="language-text">sudo apt-get -y install nginx</code></pre>

<p><strong>Supervisor</strong></p>

<pre><code class="language-text">sudo apt-get -y install supervisor

sudo systemctl enable supervisor
sudo systemctl start supervisor</code></pre>

<p><strong>Virtualenv</strong></p>

<pre><code class="language-text">wget https://bootstrap.pypa.io/get-pip.py
sudo python3.6 get-pip.py
sudo pip3.6 install virtualenv</code></pre>

<h5 id="application-user">Application User</h5>

<p>Create a new user with the command below:</p>

<pre><code class="language-text">adduser boards</code></pre>

<p>Usually I just pick the name of the application. Enter a password and optionally add some extra info to the prompt.</p>

<p>Now add the user to the sudoers list:</p>

<pre><code class="language-text">gpasswd -a boards sudo</code></pre>

<h5 id="postgresql-database-setup">PostgreSQL Database Setup</h5>

<p>First switch to the postgres user:</p>

<pre><code class="language-text">sudo su - postgres</code></pre>

<p>Create a database user:</p>

<pre><code class="language-text">createuser u_boards</code></pre>

<p>Create a new database and set the user as the owner:</p>

<pre><code class="language-text">createdb django_boards --owner u_boards</code></pre>

<p>Define a strong password for the user:</p>

<pre><code class="language-text">psql -c "ALTER USER u_boards WITH PASSWORD 'BcAZoYWsJbvE7RMgBPzxOCexPRVAq'"</code></pre>

<p>We can now exit the postgres user:</p>

<pre><code class="language-text">exit</code></pre>

<h5 id="django-project-setup">Django Project Setup</h5>

<p>Switch to the application user:</p>

<pre><code class="language-text">sudo su - boards</code></pre>

<p>First we can check where we are:</p>

<pre><code class="language-text">pwd
/home/boards</code></pre>

<p>First letâs clone the repository with our code:</p>

<pre><code class="language-text">git clone https://github.com/sibtc/django-beginners-guide.git</code></pre>

<p>Start a virtual environment:</p>

<pre><code class="language-text">virtualenv venv -p python3.6</code></pre>

<p>Initialize the virtualenv:</p>

<pre><code class="language-text">source venv/bin/activate</code></pre>

<p>Install the requirements:</p>

<pre><code class="language-text">pip install -r django-beginners-guide/requirements.txt</code></pre>

<p>We will have to add two extra libraries here, the Gunicorn and the PostgreSQL driver:</p>

<pre><code class="language-text">pip install gunicorn
pip install psycopg2</code></pre>

<p>Now inside the <strong>/home/boards/django-beginners-guide</strong> folder, letâs create a <strong>.env</strong> file to store the database
credentials, the secret key and everything else:</p>

<p><strong>/home/boards/django-beginners-guide/.env</strong></p>

<pre><code class="language-text">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=d
ALLOWED_HOSTS=.djangoboards.com
DATABASE_URL=postgres://u_boards:BcAZoYWsJbvE7RMgBPzxOCexPRVAq@localhost:5432/django_boards</code></pre>

<p>Here is the syntax of the database URL: postgres://<code class="highlighter-rouge">db_user</code>:<code class="highlighter-rouge">db_password</code>@<code class="highlighter-rouge">db_host</code>:<code class="highlighter-rouge">db_port</code>/<code class="highlighter-rouge">db_name</code>.</p>

<p>Now letâs migrate the database, collect the static files and create a super user:</p>

<pre><code class="language-text">cd django-beginners-guide</code></pre>

<pre><code class="language-text">python manage.py migrate

Operations to perform:
  Apply all migrations: admin, auth, boards, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying boards.0001_initial... OK
  Applying boards.0002_auto_20170917_1618... OK
  Applying boards.0003_topic_views... OK
  Applying sessions.0001_initial... OK</code></pre>

<p>Now the static files:</p>

<pre><code class="language-text">python manage.py collectstatic

Copying '/home/boards/django-beginners-guide/static/js/jquery-3.2.1.min.js'
Copying '/home/boards/django-beginners-guide/static/js/popper.min.js'
Copying '/home/boards/django-beginners-guide/static/js/bootstrap.min.js'
Copying '/home/boards/django-beginners-guide/static/js/simplemde.min.js'
Copying '/home/boards/django-beginners-guide/static/css/app.css'
Copying '/home/boards/django-beginners-guide/static/css/bootstrap.min.css'
Copying '/home/boards/django-beginners-guide/static/css/accounts.css'
Copying '/home/boards/django-beginners-guide/static/css/simplemde.min.css'
Copying '/home/boards/django-beginners-guide/static/img/avatar.svg'
Copying '/home/boards/django-beginners-guide/static/img/shattered.png'
...</code></pre>

<p>This command copy all the static assets to an external directory where NGINX can serve the files for us. More on that
later.</p>

<p>Now create a super user for the application:</p>

<pre><code class="language-text">python manage.py createsuperuser</code></pre>

<h5 id="configuring-gunicorn">Configuring Gunicorn</h5>

<p>So, Gunicorn is the one responsible for executing the Django code behind a proxy server.</p>

<p>Create a new file named <strong>gunicorn_start</strong> inside <strong>/home/boards</strong>:</p>

<pre><code class="language-text">#!/bin/bash

NAME="django_boards"
DIR=/home/boards/django-beginners-guide
USER=boards
GROUP=boards
WORKERS=3
BIND=unix:/home/boards/run/gunicorn.sock
DJANGO_SETTINGS_MODULE=myproject.settings
DJANGO_WSGI_MODULE=myproject.wsgi
LOG_LEVEL=error

cd $DIR
source ../venv/bin/activate

export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
export PYTHONPATH=$DIR:$PYTHONPATH

exec ../venv/bin/gunicorn ${DJANGO_WSGI_MODULE}:application \
  --name $NAME \
  --workers $WORKERS \
  --user=$USER \
  --group=$GROUP \
  --bind=$BIND \
  --log-level=$LOG_LEVEL \
  --log-file=-</code></pre>

<p>This script will start the application server. We are providing some information such as where the Django project is,
which application user to be used to run the server, and so on.</p>

<p>Now make this file executable:</p>

<pre><code class="language-text">chmod u+x gunicorn_start</code></pre>

<p>Create two empty folders, one for the socket file and one to store the logs:</p>

<pre><code class="language-text">mkdir run logs</code></pre>

<p>Right now the directory structure inside <strong>/home/boards</strong> should look like this:</p>

<pre><code class="language-text">django-beginners-guide/
gunicorn_start
logs/
run/
staticfiles/
venv/</code></pre>

<p>The <strong>staticfiles</strong> folder was created by the <strong>collectstatic</strong> command.</p>

<h5 id="configuring-supervisor">Configuring Supervisor</h5>

<p>First create an empty log file inside the <strong>/home/boards/logs/</strong> folder:</p>

<pre><code class="language-text">touch logs/gunicorn.log</code></pre>

<p>Now create a new supervisor file:</p>

<pre><code class="language-text">sudo vim /etc/supervisor/conf.d/boards.conf</code></pre>

<pre><code class="language-text">[program:boards]
command=/home/boards/gunicorn_start
user=boards
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/home/boards/logs/gunicorn.log</code></pre>

<p>Save the file and run the commands below:</p>

<pre><code class="language-text">sudo supervisorctl reread
sudo supervisorctl update</code></pre>

<p>Now check the status:</p>

<pre><code class="language-text">sudo supervisorctl status boards</code></pre>

<pre><code class="language-text">boards                           RUNNING   pid 308, uptime 0:00:07</code></pre>

<h5 id="configuring-nginx">Configuring NGINX</h5>

<p>Next step is to set up the NGINX server to serve the static files and to pass the requests to Gunicorn:</p>

<p>Add a new configuration file named <strong>boards</strong> inside <strong>/etc/nginx/sites-available/</strong>:</p>

<pre><code class="language-text">upstream app_server {
    server unix:/home/boards/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name www.djangoboards.com;  # here can also be the IP address of the server

    keepalive_timeout 5;
    client_max_body_size 4G;

    access_log /home/boards/logs/nginx-access.log;
    error_log /home/boards/logs/nginx-error.log;

    location /static/ {
        alias /home/boards/staticfiles/;
    }

    # checks for static file, if not found proxy to app
    location / {
        try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://app_server;
    }
}</code></pre>

<p>Create a symbolic link to the <strong>sites-enabled</strong> folder:</p>

<pre><code class="language-text">sudo ln -s /etc/nginx/sites-available/boards /etc/nginx/sites-enabled/boards</code></pre>

<p>Remove the default NGINX website:</p>

<pre><code class="language-text">sudo rm /etc/nginx/sites-enabled/default</code></pre>

<p>Restart the NGINX service:</p>

<pre><code class="language-text">sudo service nginx restart</code></pre>

<p>At this point, if the DNS have already propagated, the website should be available on the URL www.djangoboards.com.</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/django-boards.png" alt="Django Boards" /></p>

<hr />

<h4 id="configuring-an-email-service">Configuring an Email Service</h4>

<p>One of the best options to get started is <a href="https://www.mailgun.com/" target="_blank" rel="noopener">Mailgun</a>. It
offers a very reliable free plan covering 12,000 emails per month.</p>

<p>First sign up for a free account. Then just follow the steps, itâs very straightforward. You will have to work
together with the service you registered your domain. In my case, it was <a href="https://www.namecheap.com/security/ssl-certificates.aspx?aff=110351" target="_blank" rel="noopener nofollow">Namecheap</a>.</p>

<p>First click on add domain to add a new domain to your account. Follow the instructions and make sure you use âmg.â
subdomain:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/mg1.png" alt="Mailgun" /></p>

<p>Now grab the first set of DNS records, itâs two TXT records:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/mg2.png" alt="Mailgun" /></p>

<p>Add it to your domain, using the web interface offered by your registrar:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/namecheap1.png" alt="Namecheap" /></p>

<p>Do the same thing with the MX records:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/mg3.png" alt="Mailgun" /></p>

<p>Add them to the domain:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/namecheap2.png" alt="Namecheap" /></p>

<p>Now this step is not mandatory, but since we are already here, confirm it as well:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/mg4.png" alt="Mailgun" /></p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/namecheap3.png" alt="Namecheap" /></p>

<p>After adding all the DNS records, click in the <strong>Check DNS Records Now</strong> button:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/mg5.png" alt="Mailgun" /></p>

<p>Now we need to have some patience. Sometimes it takes a while to validate the DNS.</p>

<p>Meanwhile we can configure the application to receive the connection parameters.</p>

<p><strong>myproject/settings.py</strong></p>

<pre><code class="language-python"><span class="n">EMAIL_BACKEND</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'EMAIL_BACKEND'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">'django.core.mail.backends.smtp.EmailBackend'</span><span class="p">)</span>
<span class="n">EMAIL_HOST</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'EMAIL_HOST'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="n">EMAIL_PORT</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'EMAIL_PORT'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">587</span><span class="p">,</span> <span class="n">cast</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
<span class="n">EMAIL_HOST_USER</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'EMAIL_HOST_USER'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="n">EMAIL_HOST_PASSWORD</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'EMAIL_HOST_PASSWORD'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="n">EMAIL_USE_TLS</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="s">'EMAIL_USE_TLS'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">cast</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>

<span class="n">DEFAULT_FROM_EMAIL</span> <span class="o">=</span> <span class="s">'Django Boards &lt;noreply@djangoboards.com&gt;'</span>
<span class="n">EMAIL_SUBJECT_PREFIX</span> <span class="o">=</span> <span class="s">'[Django Boards] '</span></code></pre>

<p>Then, my local machine <strong>.env</strong> file would look like this:</p>

<pre><code class="language-text">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=d
DEBUG=True
ALLOWED_HOSTS=.localhost,127.0.0.1
DATABASE_URL=sqlite:///db.sqlite3
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend</code></pre>

<p>And my production <strong>.env</strong> file would look like this:</p>

<pre><code class="language-text">SECRET_KEY=rqr_cjv4igscyu8&amp;&amp;(0ce(=sy=f2)p=f_wn&amp;@0xsp7m$@!kp=d
ALLOWED_HOSTS=.djangoboards.com
DATABASE_URL=postgres://u_boards:BcAZoYWsJbvE7RMgBPzxOCexPRVAq@localhost:5432/django_boards
EMAIL_HOST=smtp.mailgun.org
EMAIL_HOST_USER=postmaster@mg.djangoboards.com
EMAIL_HOST_PASSWORD=ED2vmrnGTM1Rdwlhazyhxxcd0F</code></pre>

<p>You can find your credentials in the <strong>Domain Information</strong> section on Mailgun.</p>

<ul>
  <li>EMAIL_HOST: SMTP Hostname</li>
  <li>EMAIL_HOST_USER: Default SMTP Login</li>
  <li>EMAIL_HOST_PASSWORD: Default Password</li>
</ul>

<p>We can test the new settings in the production server. Make the changes in the <strong>settings.py</strong> file in your local
machine, commit the changes to the remote repository. Then, in the server pull the new code and restart the Gunicorn
process:</p>

<pre><code class="language-text">git pull</code></pre>

<p>Edit the <strong>.env</strong> file with the email credentials.</p>

<p>Then restart the Gunicorn process:</p>

<pre><code class="language-text">sudo supervisorctl restart boards</code></pre>

<p>Now we can try to start the password reset process:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/pwd.png" alt="Password Reset Email" /></p>

<p>On the Mailgun dashboard you can have some statistics about the email delivery:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/mg6.png" alt="Mailgun" /></p>

<hr />

<h4 id="configuring-https-certificate">Configuring HTTPS Certificate</h4>

<p>Now letâs protect our application with a nice HTTPS certificate provided by <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Letâs Encrypt</a>.</p>

<p>Setting up HTTPS has never been that easy. And better, we can get it for free nowadays. They provide a solution called
<strong>certbot</strong> which takes care of installing and renewing the certificates for us. Itâs very straightforward:</p>

<pre><code class="language-text">sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install python-certbot-nginx</code></pre>

<p>Now install the certs:</p>

<pre><code class="language-text">sudo certbot --nginx</code></pre>

<p>Just follow the prompts. When asked about:</p>

<pre><code class="language-text">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</code></pre>

<p>Choose <code class="highlighter-rouge">2</code> to redirect all HTTP traffic to HTTPS.</p>

<p>With that the site is already being served over HTTPS:</p>

<p><img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-7/https.png" alt="HTTPS" /></p>

<p>Setup the auto renew of the certs. Run the command below to edit the crontab file:</p>

<pre><code class="language-text">sudo crontab -e</code></pre>

<p>Add the following line to the end of the file:</p>

<pre><code class="language-text">0 4 * * * /usr/bin/certbot renew --quiet</code></pre>

<p>This command will run everyday at 4am. All certificates expiring within 30 days will automatically be renewed.</p>

<hr />

<h4 id="conclusions">Conclusions</h4>

<p>Thanks a lot for all those who followed this tutorial series, giving comments and feedback! I really appreciate!
This was the last tutorial of the series. I hope you enjoyed it!</p>

<p>Even though this was the last part of the tutorial series, I plan to write a few follow-up tutorials exploring other
interesting topics as well, such as database optimization and adding more features on top of what we have at the
moment.</p>

<p>By the way, if you are interested in contributing to the project, few free to submit pull requests!
The source code of the project is available on GitHub: <a href="https://github.com/sibtc/django-beginners-guide/" target="_blank">https://github.com/sibtc/django-beginners-guide/</a></p>

<p>And please let me know what else you would like to see next! :-)</p>

<hr />

<div class="popular-posts">
  <div class="row">
    <div class="six columns">
      <a href="https://simpleisbetterthancomplex.com/series/2017/10/09/a-complete-beginners-guide-to-django-part-6.html">
        <img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/part-6/featured.jpg" alt="A Complete Beginner's Guide to Django - Part 6" title="A Complete Beginner's Guide to Django - Part 6" />
        <h5>â Part 6 - Class-Based Views</h5>
      </a>
    </div>
    <div class="six columns">
      <a href="https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/">
        <img src="https://simpleisbetterthancomplex.com/media/series/beginners-guide/1.11/featured.jpg" alt="A Complete Beginner's Guide to Django - Index" title="A Complete Beginner's Guide to Django - Index" />
        <h5>Tutorial Series Index â</h5>
      </a>
    </div>
  </div>
</div></p>
<p>
<em><a href="https://simpleisbetterthancomplex.com/series/2017/10/16/a-complete-beginners-guide-to-django-part-7.html">October 16, 2017 12:00 AM</a></em>
</p>





<h2>October 15, 2017</h2>




<hr /><h3 class="post"><a href="https://pythontips.com" title="Python Tips">Yasoob Khalid</a></h3>


<h4><a href="https://pythontips.com/2017/10/15/weird-comparison-issue-in-python/">Weird Comparison Issue in Python</a></h4>
<p>
<p>Hi guys! I am back with a new article. This time I will tackle a problem which seems easy enough at first but will surprize some of you. Suppose you have the following piece of code:<span id="more-1493"></span></p>
<pre><code>a = 3
b = False
c = """12"""
d = 4.7
</code></pre>
<p>and you have to evaluate this:</p>
<pre><code>d + 2 * a &gt; int(c) == b
</code></pre>
<p>Before reading the rest of the post please take a minute to solve this statement in your head and try to come up with the answer.</p>
<p>So while solving it my thought process went something like this:</p>
<pre><code>2 * a = 6
d + 6 = 10.7
10.7 &gt; int(c) is equal to False
False == b is equal to True 
</code></pre>
<p>But lo-and-behold. If we run this code in Python shell we get the following output:</p>
<pre><code>False
</code></pre>
<p>Dang! What went wrong there? Was our thinking wrong? I am pretty sure it was supposed to return True. I went through the official docs a couple of times but couldnât find the answer. There was also a possibility in my mind that this might be some Python 2 bug but when I tried this code in Python 3 I got the same output. Finally, I turned to the Pythonâs IRC channel which is always full of extremely helpful people. I got my answer from there.</p>
<p>So I got to know that I was chaining comparisons. But I knew that already. What I didnât know was that whenever you chain comparisons, Python compares each thing in order and then does an âANDâ. So our comparison code is equivalent to:</p>
<pre><code>(d + 2*a) &gt; (int(c)) and (int(c)) == (b)
</code></pre>
<p>This brings us to the question that whenever you chain comparisons, does Python compares each thing in order and then does an âANDâ?</p>
<p>As it turns out this is exactly what Python does: x &lt;comparison&gt; y &lt;comparison&gt; zâ is executed just like âx &lt;comparison&gt; y and y &lt;comparison&gt; zâ, except âyâ is only evaluated once.</p>
<p>I hope you found this article helpful. If you have any questions, comments, suggestions please feel free to reach out to me via email or the comments section below.</p>
<p>&nbsp;</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/freepythontips.wordpress.com/1493/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/freepythontips.wordpress.com/1493/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=pythontips.com&blog=55796613&post=1493&subd=freepythontips&ref=&feed=1" width="1" height="1" /></p>
<p>
<em><a href="https://pythontips.com/2017/10/15/weird-comparison-issue-in-python/">October 15, 2017 09:31 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://arnavk.com/tags/python/" title="Python on Arnav Khare">Arnav Khare</a></h3>


<h4><a href="http://arnavk.com/posts/python-executable-modules/">Useful Executable Modules in the Python Standard Library</a></h4>
<p>
<p>Python comes with many handy tools that can make our lives as developers or sysadmins easier. These tools are in the form of modules and libraries that are also executable. Many of these tools are known, but not all are as well known as they should be. I will mention a few useful tools that I have found in this post.</p>

<h2 id="how-to-write-an-executable-python-script">How to write an executable Python script</h2>

<p>First, for beginners, a quick introduction to how to write executable scripts in Python. It is actually really easy.</p>

<p>We can simply run a python script from the command line by prepending <code>python</code> to the name, such as <code>python &lt;script&gt;</code>.</p>

<p>To run a module which is present in the current PYTHONPATH, you can run from command-line too</p>

<pre><code class="language-sh">$ python -m &lt;module&gt;
</code></pre>

<p>Adding <code>python -m</code> to your script everytime can be tedious sometimes, so in Unix you can tell the shell how to execute your script. This is done by specifying the executing binary path in the first line of the script by appending <code>#!</code> (aka <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">she-bang</a>) to the command and then simply running the script.</p>

<pre><code class="language-py">#!/usr/bin/python
</code></pre>

<p>or better</p>

<pre><code class="language-py">#!/usr/bin/env python
</code></pre>

<p>When Python executes a script it runs the code top-down line by line. All the functions and classes at the top level of the script will get compiled and any module level statements will be executed. This process is the same as when Python imports a module from another module.</p>

<p>If you want to write code that <strong>only</strong> executes when the module is run as a script, you can write it in a <code>if __name__ == '__main__'</code> block as below.</p>

<p>The <a href="https://docs.python.org/3/library/argparse.html">argparse</a> module in stdlib can be used to parse command-line parameters and ensuring that the interface is clearly specified.</p>

<pre><code class="language-py">import argparse

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output')
    parser.add_argument('-v', dest='verbose', action='store_true')
    args = parser.parse_args()
    # ... do something with args.output ...
    # ... do something with args.verbose ..
</code></pre>

<p>Now let&rsquo;s look at some interesting and useful runnable modules in the Python Standard Library&hellip;</p>

<h2 id="file-sharing">File sharing</h2>

<p>A very useful tool is the HTTP Server module. This module can be run to allow sharing of local file over your internal network easily using Python. To start a web server and serve files in current directory simply run the following command&hellip;</p>

<pre><code class="language-sh"># Python 3
$ python3 -m http.server

# Python 2
$ python2 -m SimpleHTTPServer
</code></pre>

<p>Now the files in local directory are it&rsquo;s subdirectories are visible on <code>http://localhost:8000/</code>. Others in the local network can access the files by replcating <em>localhost</em> with our machine&rsquo;s IP address.</p>

<p>I have used this in the past to quickly share files with collegues where a file share was not readily available and the file is too big to send over email.</p>

<h2 id="json-pretty-printing">JSON pretty printing</h2>

<p><a href="https://docs.python.org/3/library/json.html#module-json.tool">json.tool</a> is a handy way of pretty printing and validating JSON format files from the command line.</p>

<pre><code>$ echo '{&quot;json&quot;:&quot;obj&quot;}' | python -m json.tool
{
    &quot;json&quot;: &quot;obj&quot;
}
$ echo '{ 1.2:3.4}' | python -m json.tool
Expecting property name enclosed in double quotes: line 1 column 3 (char 2)
</code></pre>

<p>I have used JSON tool in the past to debug integration with HTTP APIs that serve JSON results.</p>

<h2 id="debugging">Debugging</h2>

<p>The <a href="https://docs.python.org/3/library/pdb.html">Python debugger <code>pdb</code></a> makes it very easy to debug issues with Python scripts. Simply run the target script using <code>pdb</code> module rather than directly running it. If an unhandled exception is raised the debugger drops in a debug shell allowing us to run a post-mortem analysis by inspecting state and variables.</p>

<pre><code class="language-sh">$ python -m pdb script.py
</code></pre>

<p>If you want the debugger to stop at a particular point in execution, simply add the below statement above it in the code.</p>

<pre><code class="language-python">import pdb; pdb.set_trace()
</code></pre>

<h2 id="performance-analysis">Performance analysis</h2>

<p><strong>Timing</strong></p>

<p>The <a href="https://docs.python.org/3/library/timeit.html">timeit</a> module is an easy way to time a piece of code. The module can run some setup code (import string), and then run test code many (default 10,000,000) times to time execution of the code.</p>

<pre><code class="language-sh">$ python -m timeit -s 'text = &quot;sample string&quot;; char = &quot;g&quot;'  'char in text'
10000000 loops, best of 3: 0.0408 usec per loop
$ python -m timeit -s 'text = &quot;sample string&quot;; char = &quot;g&quot;'  'text.find(char)'
10000000 loops, best of 3: 0.195 usec per loop
</code></pre>

<p>Some useful <a href="https://docs.python.org/3/library/timeit.html#command-line-interface">command-line options</a> are:</p>

<ul>
<li><code>-n</code> - how many times to repeat the statement (default 10M)</li>
<li><code>-r</code> - how many times to repeat the timer (default 3)</li>
<li><code>-s</code> - setup statement to be executed once before the test</li>
</ul>

<p><strong>Profiling</strong>
<code>cProfile</code> module makes it easy to measure the time spent in executing a script and pinpoint the slow bits.</p>

<pre><code class="language-sh">$ python cProfile scriptfile [arg] ...
</code></pre>

<p>A couple of useful flags are:</p>

<ul>
<li><code>-o</code> - output file path</li>
<li><code>-s</code> - sort output</li>
</ul>

<h2 id="running-tests-doctests-and-unit-tests">Running tests - Doctests and Unit tests</h2>

<p>Python <a href="https://docs.python.org/3/library/doctest.html#module-doctest">doctests</a> can be run from the command-line using the doctest executable module.</p>

<pre><code class="language-sh">$ python -m doctest -v example.py
</code></pre>

<p>Similarly Unit tests can executed using the <a href="https://docs.python.org/3/library/unittest.html#command-line-interface">unittest</a> module</p>

<pre><code class="language-sh">$ python3 -m unittest
</code></pre>

<p>This very useful command-line tool will scan the current directory and sub-modules to discover tests and run them. We can also run specific modules or functions by specifying them. Look at the various options <a href="https://docs.python.org/3/library/unittest.html#command-line-interface">here</a>.</p>

<h2 id="working-with-archives">Working with archives</h2>

<p><strong>Creating and opening Zip and TAR archive files</strong></p>

<p>In case you don&rsquo;t have <code>tar</code> or <code>Zip</code> tools handy, in Python 3 <a href="https://docs.python.org/3/library/tarfile.html#command-line-interface">tarfile</a> and <a href="https://docs.python.org/3/library/zipfile.html#command-line-interface">zipfile</a> modules allow us to bundle directories into archives and open existing ones.</p>

<pre><code class="language-sh"># Create a new TAR archive
$ python3 -m tarfile -c &lt;tarname&gt;.tgz &lt;file&gt; &lt;file&gt;

# Extract from an existing TAR archive
$ python3 -m tarfile -e &lt;tarname&gt;.tgz
</code></pre>

<p><strong>Making executable Zip files</strong></p>

<p>In Python 3, the <a href="https://docs.python.org/3/library/zipapp.html#command-line-interface">zipapp</a> module also allows us to pack up a directory into an archive, and makes it executable. When run, the archive will execute the <code>main</code> function in the <code>myapp</code> module.</p>

<pre><code class="language-sh">$ python3 -m zipapp myapp
$ python3 myapp.pyz
&lt;output from myapp&gt;
</code></pre>

<h2 id="other-useful-and-interesting-modules">Other useful and interesting modules</h2>

<h3 id="opening-a-web-page-in-a-browser-locally">Opening a web page in a Browser locally</h3>

<p>The <a href="https://docs.python.org/3/library/webbrowser.html#module-webbrowser">webbrowser</a> module has a programatic as well as command-line interface.</p>

<pre><code class="language-sh">$ python -m webbrowser -t http://www.yahoo.com
</code></pre>

<h3 id="base64-encoding-and-decoding">Base64 encoding and decoding</h3>

<p>When working with a REST APIs, especially where authentication tokens are involved, use of Base64 encoding is quite common. Python <a href="https://docs.python.org/3/library/base64.html#module-base64"><code>base64</code></a> module can be used from the command-line a tool in the shell as well.</p>

<pre><code class="language-sh">$ python -m base64 -e
</code></pre>

<h3 id="calendar">Calendar</h3>

<p>Did you know that Python comes with an in-built text calendar? The <a href="https://docs.python.org/3/library/calendar.html">calendar</a> module is executable and can take many parameters that allow for customised display.</p>

<pre><code class="language-sh">$ python -m calendar
                                  2017

      January                   February                   March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                   1             1  2  3  4  5             1  2  3  4  5
 2  3  4  5  6  7  8       6  7  8  9 10 11 12       6  7  8  9 10 11 12
 9 10 11 12 13 14 15      13 14 15 16 17 18 19      13 14 15 16 17 18 19
16 17 18 19 20 21 22      20 21 22 23 24 25 26      20 21 22 23 24 25 26
23 24 25 26 27 28 29      27 28                     27 28 29 30 31
30 31

       April                      May                       June
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                1  2       1  2  3  4  5  6  7                1  2  3  4
 3  4  5  6  7  8  9       8  9 10 11 12 13 14       5  6  7  8  9 10 11
10 11 12 13 14 15 16      15 16 17 18 19 20 21      12 13 14 15 16 17 18
17 18 19 20 21 22 23      22 23 24 25 26 27 28      19 20 21 22 23 24 25
24 25 26 27 28 29 30      29 30 31                  26 27 28 29 30

        July                     August                  September
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                1  2          1  2  3  4  5  6                   1  2  3
 3  4  5  6  7  8  9       7  8  9 10 11 12 13       4  5  6  7  8  9 10
10 11 12 13 14 15 16      14 15 16 17 18 19 20      11 12 13 14 15 16 17
17 18 19 20 21 22 23      21 22 23 24 25 26 27      18 19 20 21 22 23 24
24 25 26 27 28 29 30      28 29 30 31               25 26 27 28 29 30
31

      October                   November                  December
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                   1             1  2  3  4  5                   1  2  3
 2  3  4  5  6  7  8       6  7  8  9 10 11 12       4  5  6  7  8  9 10
 9 10 11 12 13 14 15      13 14 15 16 17 18 19      11 12 13 14 15 16 17
16 17 18 19 20 21 22      20 21 22 23 24 25 26      18 19 20 21 22 23 24
23 24 25 26 27 28 29      27 28 29 30               25 26 27 28 29 30 31
30 31
</code></pre>

<h3 id="print-system-configuration">Print system configuration</h3>

<p><a href="https://docs.python.org/3/library/sysconfig.html#using-sysconfig-as-a-script">Sysconfig</a> module allows you to print the detailed system configuration including environment variables which might be useful for debugging purposes.</p>

<pre><code class="language-sh">$ python -m sysconfig
Platform: &quot;macosx-10.6-intel&quot;
Python version: &quot;3.6&quot;
Current installation scheme: &quot;posix_prefix&quot;

Paths:
    data = &quot;/Library/Frameworks/Python.framework/Versions/3.6&quot;
    include = &quot;/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m&quot;
    platinclude = &quot;/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m&quot;
    platlib = &quot;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages&quot;
    platstdlib = &quot;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6&quot;
    purelib = &quot;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages&quot;
    scripts = &quot;/Library/Frameworks/Python.framework/Versions/3.6/bin&quot;
    stdlib = &quot;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6&quot;

Variables:
    ABIFLAGS = &quot;m&quot;
    AC_APPLE_UNIVERSAL_BUILD = &quot;1&quot;
    AIX_GENUINE_CPLUSPLUS = &quot;0&quot;
    ANDROID_API_LEVEL = &quot;0&quot;
    ...
</code></pre></p>
<p>
<em><a href="http://arnavk.com/posts/python-executable-modules/">October 15, 2017 12:00 AM</a></em>
</p>





<h2>October 14, 2017</h2>




<hr /><h3 class="post"><a href="https://sandipanweb.wordpress.com" title="Python â sandipanweb">Sandipan Dey</a></h3>


<h4><a href="">Seam Carving: Using Dynamic Programming to implement Content-Aware Image Resizing in Python</a></h4>
<p>
The following problem appeared as an assignment in theÂ Algorithm CourseÂ (COS 226) atÂ Princeton UniversityÂ taught byÂ Prof. Sedgewick.Â  The followingÂ descriptionÂ of the problem is taken from theÂ assignmentÂ itself. The Seam Carving Problem Seam-carving is a content-aware image resizing technique where the image is reduced in size by one pixel of height (or width) at a time. AÂ vertical seamÂ in an image &#8230; <a href="https://sandipanweb.wordpress.com/2017/10/14/seam-carving-using-dynamic-programming-to-implement-context-aware-image-resizing-in-python/" class="more-link">Continue reading <span class="screen-reader-text">Seam Carving: Using Dynamic Programming to implement Content-Aware Image Resizing in&#160;Python</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=sandipanweb.wordpress.com&blog=113312303&post=6577&subd=sandipanweb&ref=&feed=1" width="1" height="1" /></p>
<p>
<em><a href="">October 14, 2017 11:18 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://python-weekly.blogspot.com/" title="# python weekly reports">Weekly Python StackOverflow Report</a></h3>


<h4><a href="http://python-weekly.blogspot.com/2017/10/xcv-stackoverflow-python-report.html">(xcv) stackoverflow python report</a></h4>
<p>
These are the ten most rated questions at <a href="http://www.stackoverflow.com/">Stack Overflow</a> last week.<br />Between brackets: [<b>question score</b> / answers count]<br />Build date: 2017-10-14 16:03:15 GMT<br /><hr /><ol><li><a href="http://stackoverflow.com/questions/46664007" target="_blank">Why do tuples take less space in memory than lists?</a> - [<b>64</b>/4]</li><li><a href="http://stackoverflow.com/questions/46661455" target="_blank">Multiply doubles in Python with same precision as C++</a> - [<b>16</b>/3]</li><li><a href="http://stackoverflow.com/questions/46670183" target="_blank">Why is groupby so fast?</a> - [<b>12</b>/1]</li><li><a href="http://stackoverflow.com/questions/46633065" target="_blank">Multiples-keys dictionary where key order doesn't matter</a> - [<b>9</b>/2]</li><li><a href="http://stackoverflow.com/questions/46695522" target="_blank">Proper use of the * operator in a oneline if statement python</a> - [<b>8</b>/4]</li><li><a href="http://stackoverflow.com/questions/46737082" target="_blank">Difference between foo.bar() and bar(foo)?</a> - [<b>8</b>/2]</li><li><a href="http://stackoverflow.com/questions/46715354" target="_blank">How does COPY work and why is it so much faster than INSERT?</a> - [<b>7</b>/3]</li><li><a href="http://stackoverflow.com/questions/46732436" target="_blank">Why is it required to typecast a map into a list to assign it to a pandas series?</a> - [<b>7</b>/1]</li><li><a href="http://stackoverflow.com/questions/46689373" target="_blank">Compute x**k with x, k being arrays of arbitrary dimensionality</a> - [<b>6</b>/2]</li><li><a href="http://stackoverflow.com/questions/46715586" target="_blank">isinstance() unexpectedly returning False</a> - [<b>6</b>/1]</li></ol></p>
<p>
<em><a href="http://python-weekly.blogspot.com/2017/10/xcv-stackoverflow-python-report.html">October 14, 2017 04:03 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://stackabuse.com/" title="python - Stack Abuse">Stack Abuse</a></h3>


<h4><a href="http://stackabuse.com/python-list-files-in-a-directory/">Python: List Files in a Directory</a></h4>
<p>
<p>I prefer to work with Python because it is a very flexible programming language, and allows me to interact with the operating system easily. This also includes file system functions. To simply list files in a directory the modules <code>os</code>, <code>subprocess</code>, <code>fnmatch</code>, and <code>pathlib</code> come into play. The following solutions demonstrate how to use these methods effectively.</p>

<h3 id="usingoswalk">Using <code>os.walk()</code></h3>

<p>The <code>os</code> module contains a long list of methods that deal with the filesystem, and the operating system. One of them is <code>walk()</code>, which generates the filenames in a directory tree by walking the tree either top-down or bottom-up (with top-down being the default setting).</p>

<p><code>os.walk()</code> returns a list of three items. It contains the name of the root directory, a list of the names of the subdirectories, and a list of the filenames in the current directory. <em>Listing 1</em> shows how to write this with only three lines of code. This works with both Python 2 and 3 interpreters.</p>

<p><em>Listing 1: Traversing the current directory using <code>os.walk()</code></em></p>

<pre><code class="language-python">import os

for root, dirs, files in os.walk("."):  
    for filename in files:
        print(filename)
</code></pre>

<h3 id="usingthecommandlineviasubprocess">Using the Command Line via Subprocess</h3>

<p>As already described in the article <a href="http://stackabuse.com/parallel-processing-in-python/">Parallel Processing in Python</a>, the <code>subprocess</code> module allows you to execute a system command, and collect its result. The system command we call in this case is the following one:</p>

<p><em>Example 1: Listing the files in the current directory</em></p>

<pre><code class="language-sh">$ ls -p . | grep -v /$
</code></pre>

<p>The command <code>ls -p .</code> lists directory files for the current directory, and adds the delimiter <code>/</code> at the end of the name of each subdirectory, which we'll need in the next step. The output of this call is piped to the <code>grep</code> command that filters the data as we need it.</p>

<p>The parameters <code>-v /$</code> exclude all the names of entries that end with the delimiter <code>/</code>. Actually, <code>/$</code> is a Regular Expression that matches all the strings that contain the character <code>/</code> as the very last character before the end of the string, which is represented by <code>$</code>.</p>

<p>The <code>subprocess</code> module allows to build real pipes, and to connect the input and output streams as you do on a command line. Calling the method <code>subprocess.Popen()</code> opens a corresponding process, and defines the two parameters named <em>stdin</em> and <em>stdout</em>.</p>

<p><em>Listing 2</em> shows how to program that. The first variable <code>ls</code> is defined as a process executing <code>ls -p .</code> that outputs to a pipe. That's why the stdout channel is defined as <code>subprocess.PIPE</code>. The second variable <code>grep</code> is defined as a process, too, but executes the command <code>grep -v /$</code>, instead. </p>

<p>To read the output of the <code>ls</code> command from the pipe, the stdin channel of <code>grep</code> is defined as <code>ls.stdout</code>. Finally, the variable <code>endOfPipe</code> reads the output of <code>grep</code> from <code>grep.stdout</code> that is printed to stdout element-wise in the <code>for</code>-loop below. The output is seen in <em>Example 2</em>.</p>

<p><em>Listing 2: Defining two processes connected with a pipe</em></p>

<pre><code class="language-python">import subprocess

# define the ls command
ls = subprocess.Popen(["ls", "-p", "."],  
                      stdout=subprocess.PIPE,
                     )

# define the grep command
grep = subprocess.Popen(["grep", "-v", "/$"],  
                        stdin=ls.stdout,
                        stdout=subprocess.PIPE,
                        )

# read from the end of the pipe (stdout)
endOfPipe = grep.stdout

# output the files line by line
for line in endOfPipe:  
    print (line)
</code></pre>

<p><em>Example 2: Running the program</em></p>

<pre><code class="language-sh">$ python find-files3.py
find-files2.py  
find-files3.py  
find-files4.py  
...
</code></pre>

<p>This solution works quite well with both Python 2 and 3, but can we improve it somehow? Let us have a look at the other variants, then.</p>

<h3 id="combiningosandfnmatch">Combining <code>os</code> and <code>fnmatch</code></h3>

<p>As you have seen before the solution using subprocesses is elegant but requires lots of code. Instead, let us combine the methods from the two modules <code>os</code>, and <code>fnmatch</code>. This variant works with Python 2 and 3, too.</p>

<p>As the first step, we import the two modules <code>os</code>, and <code>fnmatch</code>. Next, we define the directory we would like to list the files using <code>os.listdir()</code>, as well as the pattern for which files to filter. In a <code>for</code> loop we iterate over the list of entries stored in the variable <code>listOfFiles</code>.</p>

<p>Finally, with the help of <code>fnmatch</code> we filter for the entries we are looking for, and print the matching entries to stdout. <em>Listing 3</em> contains the Python script, and <em>Example 3</em> the corresponding output.</p>

<p><em>Listing 3: Listing files using os and fnmatch module</em></p>

<pre><code class="language-python">import os, fnmatch

listOfFiles = os.listdir('.')  
pattern = "*.py"  
for entry in listOfFiles:  
    if fnmatch.fnmatch(entry, pattern):
            print (entry)
</code></pre>

<p><em>Example 3: The output of Listing 3</em></p>

<pre><code class="language-sh">$ python2 find-files.py
find-files.py  
find-files2.py  
find-files3.py  
...
</code></pre>

<h3 id="usingoslistdirandgenerators">Using <code>os.listdir()</code> and Generators</h3>

<p>In simple terms, a generator is a powerful iterator that keeps its state. To learn more about generators, check out one of our previous articles, <a href="http://stackabuse.com/python-generators/">Python Generators</a>.</p>

<p>The following variant combines the <code>listdir()</code> method of the <code>os</code> module with a generator function. The code works with both versions 2 and 3 of Python.</p>

<p>As you may have noted before, the <code>listdir()</code> method returns the list of entries for the given directory. The method <code>os.path.isfile()</code> returns <code>True</code> if the given entry is a file. The <code>yield</code> operator quits the function but keeps the current state, and returns only the name of the entry detected as a file. This allows us to loop over the generator function (see <em>Listing 4</em>). The output is identical to the one from <em>Example 3</em>.</p>

<p><em>Listing 4: Combining <code>os.listdir()</code> and a generator function</em></p>

<pre><code class="language-python">import os

def files(path):  
    for file in os.listdir(path):
        if os.path.isfile(os.path.join(path, file)):
            yield file

for file in files("."):  
    print (file)
</code></pre>

<h3 id="usepathlib">Use <code>pathlib</code></h3>

<p>The <code>pathlib</code> module describes itself as a way to "Parse, build, test, and otherwise work on filenames and paths using an object-oriented API instead of low-level string operations". This sounds cool - let's do it. Starting with Python 3, the module belongs to the standard distribution.</p>

<p>In <em>Listing 5</em>, we first define the directory. The dot (".") defines the current directory. Next, the <code>iterdir()</code> method returns an iterator that yields the names of all the files. In a <code>for</code> loop we print the name of the files one after the other.</p>

<p><em>Listing 5: Reading directory contents with <code>pathlib</code></em></p>

<pre><code class="language-python">import pathlib

# define the path
currentDirectory = pathlib.Path('.')

for currentFile in currentDirectory.iterdir():  
    print(currentFile)
</code></pre>

<p>Again, the output is identical to the one from <em>Example 3</em>.</p>

<p>As an alternative, we can retrieve files by matching their filenames by using something called a <a rel="nofollow" target="_blank" href="https://en.wikipedia.org/wiki/Glob_(programming)">glob</a>. This way we can only retrieve the files we want. For example, in the code below we only want to list the Python files in our directory, which we do by specifying "*.py" in the glob.</p>

<p><em>Listing 6: Using <code>pathlib</code> with the <code>glob</code> method</em></p>

<pre><code class="language-python">import pathlib

# define the path
currentDirectory = pathlib.Path('.')

# define the pattern
currentPattern = "*.py"

for currentFile in currentDirectory.glob(currentPattern):  
    print(currentFile)
</code></pre>

<h3 id="usingosscandir">Using <code>os.scandir()</code></h3>

<p>In Python 3.6, a new method becomes available in the <code>os</code> module. It is named <code>scandir()</code>, and significantly simplifies the call to list files in a directory.</p>

<p>Having imported the <code>os</code> module first, use the <code>getcwd()</code> method to detect the current working directory, and save this value in the <code>path</code> variable. Next, <code>scandir()</code> returns a list of entries for this path, which we test for being a file using the <code>is_file()</code> method.</p>

<p><em>Listing 7: Reading directory contents with <code>scandir()</code></em></p>

<pre><code class="language-python">import os

# detect the current working directory
path = os.getcwd()

# read the entries
with os.scandir(path) as listOfEntries:  
    for entry in listOfEntries:
        # print all entries that are files
        if entry.is_file():
            print(entry.name)
</code></pre>

<p>Again, the output of <em>Listing 7</em> is identical to the one from <em>Example 3</em>.</p>

<h3 id="conclusion">Conclusion</h3>

<p>There is disagreement which version is the best, which is the most elegant, and which is the most "pythonic" one. I like the simplicity of the <code>os.walk()</code> method as well as the usage of both the <code>fnmatch</code> and <code>pathlib</code> modules.</p>

<p>The two versions with the processes/piping and the iterator require a deeper understanding of UNIX processes and Python knowledge, so they may not be best for all programmers due to their added (and unnecessary) complexity.</p>

<p>To find an answer to which version is the quickest one, the <code>timeit</code> module is quite handy. This module counts the time that has elapsed between two events.</p>

<p>To compare all of our solutions without modifying them, we use a Python functionality: call the Python interpreter with the name of the module, and the appropriate Python code to be executed. To do that for all the Python scripts at once a shell script helps (<em>Listing 8</em>).</p>

<p><em>Listing 8: Evaluating the execution time using the <code>timeit</code> module</em></p>

<pre><code class="language-sh">#! /bin/bash

for filename in *.py; do  
    echo "$filename:"
    cat $filename | python3 -m timeit
    echo " "
done  
</code></pre>

<p>The tests were taken using Python 3.5.3. The result is as follows whereas <code>os.walk()</code> gives the best result. Running the tests with Python 2 returns different values but does not change the order - <code>os.walk()</code> is still on top of the list.</p>

<table class="table table-striped">  
    <thead>
        <tr>
            <th>Method</th>
            <th>Result for 100,000,000 loops</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>os.walk</td>
            <td>0.0085 usec per loop</td>
        </tr>
        <tr>
            <td>subprocess/pipe</td>
            <td>0.00859 usec per loop</td>
        </tr>
        <tr>
            <td>os.listdir/fnmatch</td>
            <td>0.00912 usec per loop</td>
        </tr>
        <tr>
            <td>os.listdir/generator</td>
            <td>0.00867 usec per loop</td>
        </tr>
        <tr>
            <td>pathlib</td>
            <td>0.00854 usec per loop</td>
        </tr>
        <tr>
            <td>pathlib/glob</td>
            <td>0.00858 usec per loop</td>
        </tr>
        <tr>
            <td>os.scandir</td>
            <td>0.00856 usec per loop</td>
        </tr>
    </tbody>
</table>

<h3 id="acknowledgements">Acknowledgements</h3>

<p>The author would like to thank <a rel="nofollow" target="_blank" href="http://geneva-observer.blogspot.com/"> Gerold Rupprecht</a> for his support, and comments while preparing this article.</p></p>
<p>
<em><a href="http://stackabuse.com/python-list-files-in-a-directory/">October 14, 2017 01:30 PM</a></em>
</p>









<hr /><h3 class="post"><a href="https://pune.pycon.org/blog/" title="PyCon Pune Blog">PyCon Pune</a></h3>


<h4><a href="https://pune.pycon.org/blog/post/registration-pycon-pune-2018-open/">The Registration for the PyCon Pune 2018 is  now open.</a></h4>
<p>
PyCon Pune, the conference that started its journey in 2017, has opened up the registrations for the 2018 version now.
You have the following ticket options for the conference which you can purchase from the registration page in our website:
 The Conference Ticket for â¹1700 grants you access to the main conference, 8th &amp; 9th of February 2018. This ticket also includes a t-shirt of your preferred size.
 The Conference &amp; Developer Sprints Ticket come at a price of â¹2500.</p>
<p>
<em><a href="https://pune.pycon.org/blog/post/registration-pycon-pune-2018-open/">October 14, 2017 10:44 AM</a></em>
</p>









<hr /><h3 class="post"><a href="https://www.codementor.io/community/topic/python" title="Codementor Community">Codementor</a></h3>


<h4><a href="https://www.codementor.io/dushyantbgs/building-a-spotify-lyrics-gui-application-for-linux-cuvancpex">Building a Spotify-Lyrics GUI application for Linux</a></h4>
<p>
A basic GUI application to display the lyrics of the song being played on the Spotify app for Linux systems</p>
<p>
<em><a href="https://www.codementor.io/dushyantbgs/building-a-spotify-lyrics-gui-application-for-linux-cuvancpex">October 14, 2017 05:38 AM</a></em>
</p>









<hr /><h3 class="post"><a href="https://www.fullstackpython.com/" title="Full Stack Python">Full Stack Python</a></h3>


<h4><a href="https://www.fullstackpython.com/full-stack-python-blog.html">The Full Stack Python Blog</a></h4>
<p>
<p><a href="https://www.fullstackpython.com/">Full Stack Python</a> began 
<a href="https://www.fullstackpython.com/change-log.html">way back in December 2012</a>
when I started writing the initial <a href="https://www.fullstackpython.com/deployment.html">deployment</a>, 
<a href="https://www.fullstackpython.com/servers.html">server</a>, <a href="https://www.fullstackpython.com/operating-systems.html">operating system</a>, 
<a href="https://www.fullstackpython.com/web-servers.html">web server</a> and <a href="https://www.fullstackpython.com/wsgi-servers.html">WSGI server</a> pages. 
The site has has broadly expanded out into a 
<a href="https://www.fullstackpython.com/table-of-contents.html">many other subjects</a> outside the deployment 
topics I originally started this site to explain.</p>
<p>However, I frequently wanted to write a Python walkthrough that was not a
good fit for the page format I use for each topic. Many of those walkthroughs
became <a href="https://www.twilio.com/blog/author/mmakai">Twilio blog posts</a>
but not all of them were quite the right fit on there. I'll still write
more <a href="https://www.fullstackpython.com/twilio.html">Twilio</a> tutorials, but this 
<a href="https://www.fullstackpython.com/blog.html">Full Stack Python blog</a> is the spot for technical posts that 
fall outside the Twilio domain.</p>
<p>Let me know what you think and what tutorials you'd like to see in the 
future. </p>
<p>Hit me up on Twitter <a href="https://twitter.com/fullstackpython">@fullstackpython</a>
or <a href="https://twitter.com/mattmakai">@mattmakai</a>.</p></p>
<p>
<em><a href="https://www.fullstackpython.com/full-stack-python-blog.html">October 14, 2017 04:00 AM</a></em>
</p>





<h2>October 13, 2017</h2>




<hr /><h3 class="post"><a href="https://www.peterbe.com/rss.xml" title="Peterbe.com">Peter Bengtsson</a></h3>


<h4><a href="https://www.peterbe.com/plog/concurrent-gzip-in-python">Concurrent Gzip in Python</a></h4>
<p>
<p>Suppose you have a bunch of files you need to Gzip in Python; what's the optimal way to do that? In serial, to avoid saturating the GIL? In multiprocessing, to spread the load across CPU cores? Or with threads?  </p>
<p>I needed to know this for <a href="https://symbols.mozilla.org">symbols.mozilla.org</a> since it does <strong>a lot</strong> of Gzip'ing. In symbols.mozilla.org clients upload <strong>a zip file full of files</strong>. A lot of them are plain text and when uploaded to S3 it's best to store them gzipped. Basically it does this:  </p>
<div class="highlight">

<pre><span></span><span class="k">def</span> <span class="nf">upload_sym_file</span><span class="p">(</span><span class="n">s3_client</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">key_name</span><span class="p">):</span>
    <span class="n">file_buffer</span> <span class="o">=</span> <span class="n">BytesIO</span><span class="p">()</span>
    <span class="k">with</span> <span class="n">gzip</span><span class="o">.</span><span class="n">GzipFile</span><span class="p">(</span><span class="n">fileobj</span><span class="o">=</span><span class="n">file_buffer</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">file_buffer</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">SEEK_END</span><span class="p">)</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">file_buffer</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>
    <span class="n">file_buffer</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">s3_client</span><span class="o">.</span><span class="n">put_object</span><span class="p">(</span>
        <span class="n">Bucket</span><span class="o">=</span><span class="n">bucket_name</span><span class="p">,</span>
        <span class="n">Key</span><span class="o">=</span><span class="n">key_name</span><span class="p">,</span>
        <span class="n">Body</span><span class="o">=</span><span class="n">file_buffer</span>
    <span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&quot;Uploaded {size}&quot;</span><span class="p">)</span>
</pre></div>

<p>Another important thing to consider before jumping into the benchmark is to appreciate the context of this application; the bundles of files I need to gzip are often <em>many</em> but <em>smallish</em>. The average file size of the files that need to be gzip'ed is ~300KB. And each bundle is between 5 to 25 files.  </p>
<h3>The Benchmark</h3>
<p>For the sake of the benchmark, here, all it does it figure out the size of each gzipped buffer and reports that as a list.  </p>
<h4><code>f1</code> - Basic serial</h4>
<div class="highlight">

<pre><span></span><span class="k">def</span> <span class="nf">f1</span><span class="p">(</span><span class="n">payloads</span><span class="p">):</span>
    <span class="n">sizes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">payload</span> <span class="ow">in</span> <span class="n">payloads</span><span class="p">:</span>
        <span class="n">sizes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">_get_size</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">sizes</span>
</pre>

<p></p></div>  
<h4><code>f2</code> - Using <code>multiprocessing.Pool</code></h4>
<div class="highlight">

<pre><span></span><span class="k">def</span> <span class="nf">f2</span><span class="p">(</span><span class="n">payloads</span><span class="p">):</span>  <span class="c1"># multiprocessing</span>
    <span class="n">sizes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Pool</span><span class="p">()</span> <span class="k">as</span> <span class="n">p</span><span class="p">:</span>
        <span class="n">sizes</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">_get_size</span><span class="p">,</span> <span class="n">payloads</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">sizes</span>
</pre>

<p></p></div>  
<h4><code>f3</code> - Using <code>concurrent.futures.ThreadPoolExecutor</code></h4>
<div class="highlight">

<pre><span></span><span class="k">def</span> <span class="nf">f3</span><span class="p">(</span><span class="n">payloads</span><span class="p">):</span>  <span class="c1"># concurrent.futures.ThreadPoolExecutor</span>
    <span class="n">sizes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="n">concurrent</span><span class="o">.</span><span class="n">futures</span><span class="o">.</span><span class="n">ThreadPoolExecutor</span><span class="p">()</span> <span class="k">as</span> <span class="n">executor</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">payload</span> <span class="ow">in</span> <span class="n">payloads</span><span class="p">:</span>
            <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
                <span class="n">executor</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span>
                    <span class="n">_get_size</span><span class="p">,</span>
                    <span class="n">payload</span>
                <span class="p">)</span>
            <span class="p">)</span>
        <span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">concurrent</span><span class="o">.</span><span class="n">futures</span><span class="o">.</span><span class="n">as_completed</span><span class="p">(</span><span class="n">futures</span><span class="p">):</span>
            <span class="n">sizes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">sizes</span>
</pre>

<p></p></div>  
<h4><code>f4</code> - Using <code>concurrent.futures.ProcessPoolExecutor</code></h4>
<div class="highlight">

<pre><span></span><span class="k">def</span> <span class="nf">f4</span><span class="p">(</span><span class="n">payloads</span><span class="p">):</span>  <span class="c1"># concurrent.futures.ProcessPoolExecutor</span>
    <span class="n">sizes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="n">concurrent</span><span class="o">.</span><span class="n">futures</span><span class="o">.</span><span class="n">ProcessPoolExecutor</span><span class="p">()</span> <span class="k">as</span> <span class="n">executor</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">payload</span> <span class="ow">in</span> <span class="n">payloads</span><span class="p">:</span>
            <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
                <span class="n">executor</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span>
                    <span class="n">_get_size</span><span class="p">,</span>
                    <span class="n">payload</span>
                <span class="p">)</span>
            <span class="p">)</span>
        <span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">concurrent</span><span class="o">.</span><span class="n">futures</span><span class="o">.</span><span class="n">as_completed</span><span class="p">(</span><span class="n">futures</span><span class="p">):</span>
            <span class="n">sizes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">sizes</span>
</pre>

<p></p></div>  
<p>Note that when using asynchronous methods like this, the order of items returned is not the same as they're submitted. An easy remedy if you need the results back in order is to not use a list but to use a dictionary. Then you can track each key (or index if you like) to a value.  </p>
<h3>The Results</h3>
<p>I ran this on three different .zip files of different sizes. To get some sanity in the benchmark I made it print out how many bytes it has to process and how many bytes the gzip will manage to do.  </p>
<pre>
# files 66
Total bytes to gzip 140.69MB
Total bytes gzipped 14.96MB
Total bytes shaved off by gzip 125.73MB

# files 103
Total bytes to gzip 331.57MB
Total bytes gzipped 66.90MB
Total bytes shaved off by gzip 264.67MB

# files 26
Total bytes to gzip 86.91MB
Total bytes gzipped 8.28MB
Total bytes shaved off by gzip 78.63MB
</pre>

<p>Sorry for being eastetically handicapped when it comes to using Google Docs but here goes...  </p>
<p><img src="https://cdn-2916.kxcdn.com/cache/99/48/994880b3e99823bce9973035e1bb3ee8.png" /><br />
This demonstrates the median times it takes each function to complete, each of the three different files.  </p>
<p>In all three files I tested, clearly doing it serially (<code>f1</code>) is the worst. Supposedly since my laptop has more than one CPU core and the others are not being used. Another pertinent thing to notice is that when the work is really big, (the middle 4 bars) the difference isn't as big doing things serially compared to concurrently.  </p>
<p>That second zip file contained a single file that was 80MB. The largest in the other two files were 18MB and 22MB.  </p>
<p><img src="https://cdn-2916.kxcdn.com/cache/d5/65/d565f64040870bc4055d64a6003460e5.png" /><br />
This is the mean across all medians grouped by function and each compared to the slowest.  </p>
<p>I call this the "bestest graph". It's a combination across all different sizes and basically concludes which one is the best, which clearly is function <code>f3</code> (the one using <code>concurrent.futures.ThreadPoolExecutor</code>).  </p>
<h3>CPU Usage</h3>
<p>This is probably the best way to explain how the CPU is used; I ran each function repeatedly, then opened <a href="https://github.com/aksakalli/gtop"><code>gtop</code></a> and took a screenshot of the list of processes sorted by CPU percentage.  </p>
<h4><code>f1</code> - Serially</h4>
<p><a href="https://cdn-2916.kxcdn.com/cache/e1/37/e1374f6c927614d228829cb30440c5d3.png"><img src="https://cdn-2916.kxcdn.com/cache/9f/f7/9ff793eb16877ee71bc06ea2ecae5e05.png" alt="f1" class="" width="370" height="320" /></a><br />
No distractions but it takes 100% of one CPU to work.  </p>
<h4><code>f2</code> - <code>multiprocessing.Pool</code></h4>
<p><a href="https://cdn-2916.kxcdn.com/cache/f5/da/f5daa7c210218ad6219740a62e3ba490.png"><img src="https://cdn-2916.kxcdn.com/cache/61/f4/61f4005c7e02ccda1f33bbdbd9552d80.png" alt="f2" class="" width="370" height="369" /></a><br />
My laptop has 8 CPU cores, but I don't know why I see 9 Python processes here.<br />
I don't know why each CPU isn't 100% but I guess there's some administrative overhead to start processes by Python.  </p>
<h4><code>f3</code> - <code>concurrent.futures.ThreadPoolExecutor</code></h4>
<p><a href="https://cdn-2916.kxcdn.com/cache/91/74/9174d8766e39918ad9d31896c39e268d.png"><img src="https://cdn-2916.kxcdn.com/cache/db/81/db8140a581090dd5b3e4a24bb48c6eab.png" alt="f3" class="" width="370" height="322" /></a><br />
One process, with roughly 5 x 8 = 40 threads GIL swapping back and forth but all in all it manages to keep itself very busy since threads are lightweight to share data to.  </p>
<h4><code>f4</code> - <code>concurrent.futures.ProcessPoolExecutor</code></h4>
<p><a href="https://cdn-2916.kxcdn.com/cache/8c/b6/8cb6d9a7f2171cc56f132dd91c7b0a84.png"><img src="https://cdn-2916.kxcdn.com/cache/83/c3/83c31783e0d412c64d59e94bc3c6bfd6.png" alt="f4" class="" width="370" height="292" /></a><br />
This is actually kinda like <code>multiprocessing.Pool</code> but with a different (arguably easier) API.  </p>
<h3>Conclusion</h3>
<p>By a small margin <code>concurrent.futures.ThreadPoolExecutor</code> won. That's despite not being able to use all CPU cores. This, pseudo scientifically, proves that the overhead of starting the threads is (remember average number of files in each .zip is ~65) more worth it than being able to use all CPUs.  </p>
<h3>Discussion</h3>
<p>There's an interesting twist to this! At least for my use case...  </p>
<p>In the application I'm working on, there's actually a lot more that needs to be done other than just gzip'ping some blobs of files. For each file I need to a HEAD query to AWS S3 and an PUT query to AWS S3 too. So what I actually need to do is create an instance of <code>client = botocore.client.S3</code> that I use to call <code>client.list_objects_v2</code> and <code>client.put_object</code>.  </p>
<p>When you create an instance of <code>botocore.client.S3</code>, automatically <code>botocore</code> will instanciate itself with credentials from <code>os.environ['AWS_ACCESS_KEY_ID']</code> etc. (or read from some <code>/.aws</code> file). Once created, if you ask it to do many different network operations, internally it relies on <code>urllib3.poolmanager.PoolManager</code> which is a list of 10 HTTP connections that get reused.  </p>
<p>So when you run the serial version you can re-use the client instance for every file you process but you can only use one HTTP connection in the pool. With the <code>concurrent.futures.ThreadPoolExecutor</code> it can not only re-use the same instance of <code>botocore.client.S3</code> it can cycle through all the HTTP connections in the pool.  </p>
<p>The process based alternatives like <code>multiprocessing.Pool</code> and <code>concurrent.futures.ProcessPoolExecutor</code> can <em>not</em> re-use the <code>botocore.client.S3</code> instance since it's not pickle'able. And it has to create a new HTTP connection for every single file.  </p>
<p>So, the conclusion of the above rambling is that <code>concurrent.futures.ThreadPoolExecutor</code> is really awesome! Not only did it perform excellently in the Gzip benchmark, it has the added bonus that it can share instance objects and HTTP connections.</p></p>
<p>
<em><a href="https://www.peterbe.com/plog/concurrent-gzip-in-python">October 13, 2017 03:27 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://blog.europython.eu/" title="EuroPython Blog">EuroPython</a></h3>


<h4><a href="http://blog.europython.eu/post/166360439237">EuroPython 2017: Videos for Wednesday available online</a></h4>
<p>
<p>We are pleased to announce the third batch of cut videos for EuroPython 2017.</p><p>To see the new videos, please head over to our <a href="http://europython.tv" target="_blank">EuroPython YouTube channel</a> and select the <a href="https://www.youtube.com/watch?v=XMcNFBKNWKg&index=31&list=PL8uoeex94UhG9QAoRICebFpeKK2M0Herh" target="_blank">âEuroPython 2017â³ playlist</a>. The new videos start at entry 63 in the playlist.</p><p>In the coming two weeks, we will continue to release the other videos currently marked as âprivateâ, in batches of one conference day per week.Â <br /></p><p>

Enjoy,<br />â<br /><a href="https://ep2017.europython.eu/en/europython/team/" target="_blank">EuroPython 2017 Team</a><br /><a href="http://www.europython-society.org/" target="_blank">EuroPython Society</a><br /><a href="https://ep2017.europython.eu/" target="_blank">EuroPython 2017 Conference</a> 

<br /></p></p>
<p>
<em><a href="http://blog.europython.eu/post/166360439237">October 13, 2017 03:24 PM</a></em>
</p>









<hr /><h3 class="post"><a href="https://blog.jetbrains.com/pycharm" title="PyCharm Blog">PyCharm</a></h3>


<h4><a href="http://feedproxy.google.com/~r/Pycharm/~3/2rn3lk0oggI/">PyCharm 2017.3 EAP 5</a></h4>
<p>
<p><span>The latest and greatest early access program (EAP) version of PyCharm is now available from our website:</span></p>
<p align="center"><a class="jb-download-button" href="https://jetbrains.com/pycharm/nextversion">Get PyCharm 2017.3 EAP 5</a></p>
<h2>New Interface for Interpreter Selection</h2>
<p>In recent times, PyCharm has added more and more advanced ways of configuring your project interpreter. In addition to your regular system Python and virtualenvs based on it, we now also supportÂ Conda environments, interpreters on remote machines through SSH, within Docker containers, and in Vagrant boxes. This list is likely to grow in the future as the Python community adapts new ways to isolate dependencies.</p>
<p>The interface that we&#8217;ve used to configure these interpreters has slowly been adapting to accommodate new ways of configuring an interpreter. The time has come to overhaul it, both to make it more intuitive to use now, and to be ready for future expansion.</p>
<h3>No More Long List</h3>
<p>In the project interpreter settings, there is a dropdown, which contains all theÂ virtualenvs you&#8217;ve ever used in PyCharm. If you have many projects which all have their own virtualenv, this becomes a very long list. Yet,Â for the project you&#8217;re working on most of them are irrelevant.</p>
<p>This changes in PyCharm 2017.3, the project interpreter dropdown will only have theÂ virtualenvs you have specifically configured for that project, and virtualenvs that you&#8217;ve specifically configured to be shared between projects.</p>
<p><a href="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/10/Interpreter-List.png" rel="attachment wp-att-5061"><img class="alignnone size-full wp-image-5061" src="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/10/Interpreter-List.png" alt="Interpreter List" width="691" height="297" /></a></p>
<h3>Creating New Virtualenvs Made Easy</h3>
<p>If you want to configure a new interpreter for your project, use the gear icon, and choose either &#8216;Add Local&#8217; or &#8216;Add Remote&#8217;. Local interpreters are those that run directly on your operating system, remote interpreters include Docker and Vagrant in addition to remote computers you connect to through SSH.</p>
<p><a href="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/10/Add-Local.png" rel="attachment wp-att-5062"><img class="alignnone size-full wp-image-5062" src="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/10/Add-Local.png" alt="Add Local" width="688" height="171" /></a></p>
<p>Let&#8217;s have a look at the new Add Local dialog:</p>
<p><img class="alignnone size-full wp-image-5064" src="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/10/Add-Local-Dialog.png" alt="Add Local Dialog" width="1054" height="696" /></p>
<p>This makes it very easy to configure a new virtualenv. If you&#8217;d like to reuse an existing virtualenv, you can choose it under &#8216;Existing virtualenv&#8217;. And if you&#8217;d like to reuse that virtualenv for further projects in the future, you can check &#8216;Make available to all projects&#8217; and it will appear in the dropdown on the project interpreter page for all projects.</p>
<p>As we know the decision where to place virtualenvs is a choice that users like to make for themselves, we&#8217;ll remember where you placed the virtualenv the previous time. Whether that&#8217;s inside your project, or in a separate directory.</p>
<p>For users of virtualenvwrapper and similar tools, we&#8217;ve added some intelligence to the existing virtualenv section, and if we find a virtualenv that looks like it belongs to this project (if the name matches, either fully or partially), we&#8217;ll preselect it. That means that after setting up your project with mkvirtualenv, after opening PyCharm you&#8217;ll be prompted to configure an interpreter, and you&#8217;ll most likely only have to click &#8216;OK&#8217; to confirm.</p>
<h2><span>Also New in this Version</span></h2>
<p><span>Syntax Highlighting for Function Calls</span></p>
<p><span>An oft-requested small improvement to our syntax highlighting: you can now customize the color of function calls in your code. By default, they&#8217;re set to black, but you can change them in the settings: Editor | Color Scheme | Python.</span></p>
<p><a href="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/10/Function-Call.png" rel="attachment wp-att-5060"><img class="alignnone size-full wp-image-5060" src="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/10/Function-Call.png" alt="Function Call Highlighting" width="995" height="403" /></a></p>
<h3><span>SSH Config File Support</span></h3>
<p><span>If you&#8217;re using a bastion host (also referred to as a jump host), you&#8217;ll be very happy to know that PyCharm 2017.3 supports SSH config files. Even on Windows. Just write an OpenSSH style config file in <code>~/.ssh/config</code> or <code>/etc/ssh/ssh_config</code> and choose &#8220;OpenSSHÂ Authentication&#8221;.Â </span></p>
<h3></h3>
<h3><span>Further Improvements</span></h3>
<ul>
<li><span>Fast autocompletionÂ from the command history in the Python console. For example, to import something you&#8217;ve imported recently, just type <code>im</code> and then use the up and down arrow keys to find the import.</span></li>
<li><span>Asynchronous evaluation of variables in the debugger, if you have large objects in your code, you will now be able to see the simple values while the large objects are still loading. Very useful if you have large DataFrames.Â </span></li>
<li>Are you using Django together with a JavaScript framework that also uses curly braces in HTML files? You can now disable Django template autocompletion for these files, and get the proper support for the JS framework instead. To do this, right-click the folder that contains the HTML files and click Mark Directory as | Resource Files.</li>
<li>We&#8217;ve added support for Twisted Trial unit tests</li>
<li><span>And more, </span><span><a href="https://confluence.jetbrains.com/display/PYH/PyCharm+173.3188.29+Release+Notes">have a look at the release notes for details</a></span></li>
</ul>
<p><span>If these features sound interesting to you, try them yourself:</span></p>
<p align="center"><a class="jb-download-button" href="https://jetbrains.com/pycharm/nextversion">Get PyCharm 2017.3 EAP 5</a></p>
<p><span>As a reminder, PyCharm EAP versions:</span></p>
<ul>
<li><span>Are free, including PyCharm Professional Edition EAP</span></li>
<li><span>Will work for 30 days from being built, youâll need to update when the build expires</span></li>
</ul>
<p><span>If you run into any issues with this version, or another version of PyCharm, please </span><a href="https://youtrack.jetbrains.com/issues/PY"><span>let us know on our YouTrack</span></a><span>. If you have other suggestions or remarks, you can </span><a href="https://twitter.com/pycharm"><span>reach us on Twitter</span></a><span>, or by commenting on the blog.</span></p>
<img src="http://feeds.feedburner.com/~r/Pycharm/~4/2rn3lk0oggI" height="1" width="1" alt="" /></p>
<p>
<em><a href="http://feedproxy.google.com/~r/Pycharm/~3/2rn3lk0oggI/">October 13, 2017 03:24 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://importpython.com/blog/feed/" title="ImportPython Blog">Import Python</a></h3>


<h4><a href="http://importpython.com/blog/post/import-python-146-c-extensions-cleaning-data-pandas-machine-learning-and-more">Import Python 146 - C extensions, Cleaning data with Pandas, Machine Learning and more</a></h4>
<p>
<table>
                    <tbody><tr>
                        <td class="container-padding content" align="left">
                            <div class="title">
                                Worthy
                                Read
                            </div>
                            <br />
                            
                                <div class="subtitle">
                                    <a href="https://www.gocd.org/?utm_campaign=gocd_oss&utm_medium=email&utm_source=importpython_newsletter&utm_content=go_website&utm_term=" target="_blank">GoCD - open source continuous delivery server</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            GoCD is a continuous delivery tool specializing in advanced workflow modeling and dependency management. It lets you track a change from commit to deploy at a glance, providing superior visibility into your workflow. Itâs open source, free to use and download. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">advert</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://medium.com/@abhijeetagorhe/performance-gain-by-writing-a-c-extension-in-python-12dda9aa8ee6" target="_blank">Performance gain by writing a C extension in python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Interpreted language will never match the performance of compiled languages&nbsp;. Ever since I moved on to python from C/C++&nbsp;, I always wanted to combine best of both worlds by extending python in C&nbsp;.
 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">cpython</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://medium.com/@madhavayyagari/introduction-to-data-cleaning-using-pandas-64102b97dd62" target="_blank">Introduction to data cleaning using Pandas</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Iâve been using Excel for data cleaning until I discovered how powerful pandas are for data analysis and data cleaning. In this article I want to go over basics of how to use pandas for cleaning data in excel files.
 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">pandas</div>,</em>
                                    
                                        <em><div class="body-text">excel</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://goelhardik.github.io/2016/10/04/fishers-lda/" target="_blank">Implementing Fisherâs LDA from scratch in Python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Fisherâs Linear Discriminant Analysis (LDA) is a dimension reduction technique that can be used for classification as well. In this blog post, we will learn more about Fisherâs LDA and implement it from scratch in Python. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">machine learning</div>,</em>
                                    
                                        <em><div class="body-text">LDA</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://hackernoon.com/front-running-bancor-in-150-lines-of-python-with-ethereum-api-d5e2bfd0d798" target="_blank">Implementing Ethereum trading front-runs on the Bancor exchange in Python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            This post is a deep-dive into programmatically trading on the Ethereum / Bancor exchange and exploiting a game-theoretic security flaw in Bancor, a high-profile smart contract on the Ethereum blockchain. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">cryptocurrency</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://4url.in/3KkreyOn/" target="_blank">HelloSign eSign API</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Embed docs directly on your website with a few lines of code. Test the API for free. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text"></div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://medium.com/technology-nineleaps/python-method-resolution-order-4fd41d2fcc" target="_blank">Python Method Resolution Order</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            In Python, a class can inherit features and attributes from multiple classes and thus, implements multiple inheritance. MRO or Method Resolution Order is the hierarchy in which base classes are searched when looking for a method in the parent class.  
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">core-python</div>,</em>
                                    
                                        <em><div class="body-text">MRO</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://medium.com/@pgjones/how-to-serve-http-2-using-python-5e5bbd1e7ff1" target="_blank">How to serve HTTP/2 using Python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            The simplest way to serve HTTP/2 is to use the Quart framework, furthermore Quart is the only Python framework to support server-push. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">HTTP2</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://medium.freecodecamp.org/how-to-get-embarrassingly-fast-random-subset-sampling-with-python-da9b27d494d9" target="_blank">How to get embarrassingly fast random subset sampling with Python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Imagine that you are developing a machine learning model to classify articles. You have managed to get an unreasonably large text file which contains millions of identifiers of similar articles that belong to the same class. You are unsure whether identifiers that are close to each other are independent.
 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">machine learning</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://4url.in/XDpjMAkV/" target="_blank">Toptal</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            We help companies like Airbnb, Pfizer, and Artsy find great developers. Let us find your next great hire. Get started today. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text"></div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="http://agiliq.com/blog/2017/10/iterators-and-iterables/#.Wd9kLZkpcd0.twitter" target="_blank">Iterators and Iterables - Agiliq Blog</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                        <em><div class="body-text">core-python</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://medium.freecodecamp.org/how-i-used-python-to-find-interesting-people-on-medium-be9261b924b0" target="_blank">How I used Python to find interesting people to follow on Medium</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Medium has a large amount of content, a large number of users, and an almost overwhelming number of posts. When you try to find interesting users to interact with, youâre flooded with visual noise. I define an interesting user as someone who is from your network, who is active, and who writes responses that are generally appreciated by the Medium community.
 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">scraping</div>,</em>
                                    
                                        <em><div class="body-text">codesnippets</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://medium.com/deep-math-machine-learning-ai" target="_blank">Deep Math Machine learning.ai</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Explained using Python code snippets. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">machine learning</div>,</em>
                                    
                                        <em><div class="body-text">math</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://github.com/agermanidis/livepython" target="_blank">livepython - Visually trace your Python code in real time</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Watch your Python run like a movie. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">tracing code execution</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://twitter.com/llanga/status/916460954128285696" target="_blank">State of Python version at Facebook</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                        <em><div class="body-text">tweet</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://mubaris.com/2017-10-01/kmeans-clustering-in-python?ref=hn" target="_blank">K-Means Clustering in Python</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                        
                                            Clustering is a type of Unsupervised learning. This is very often used when you donât have labeled data. K-Means Clustering is one of the popular clustering algorithm. The goal of this algorithm is to find groups(clusters) in the given data. In this post we will implement K-Means algorithm using Python from scratch. 
                                        
                                    <br />
                            
                                    
                                        <em><div class="body-text">machine learning</div></em>
                                    
                                </div>
                                <br />
                            
                        
                                <div class="subtitle">
                                    <a href="https://www.databrawl.com/2017/10/08/blog-analysis/" target="_blank">8 best languages to blog about</a>
                                </div>
                                
                                    <div class="body-text">
                              
                                    
                                        <em><div class="body-text">web crawling</div></em>
                                    
                                </div>
                                <br />
                            
                        
                        <br />
                        
                        
                        
                        <div class="title">
                            Projects
                        </div>
                        <div class="hr"></div>
                        <br />
                        
                            <div class="subtitle">
                                <a href="https://github.com/minimaxir/magic-the-gifening" target="_blank">magic-the-gifening</a> -
                                <small>146 Stars, 6
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            A Twitter bot which tweets Magic: the Gathering cards with appropriate GIFs superimposed onto them. 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/kz26/mailproxy" target="_blank">mailproxy</a> -
                                <small>94 Stars, 4
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            mailproxy is a simple SMTP proxy. It receives emails through an unencrypted, unauthenticated SMTP interface and retransmits them through a remote SMTP server that requires modern features such as encryption and/or authentication. mailproxy is primarily useful for enabling email functionality in legacy software that only supports plain SMTP. 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/anilshanbhag/RobinhoodShell" target="_blank">RobinhoodShell</a> -
                                <small>30 Stars, 4
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            A command line shell for trading stocks using Robinhood 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/OlegYurchik/InstagramLib" target="_blank">InstagramLib</a> -
                                <small>26 Stars, 4
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            Library for interaction with Instagram web-interface. If you haven't access to Instagram API, you can use this library 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/twtrubiks/CSRF-tutorial" target="_blank">CSRF-tutorial</a> -
                                <small>17 Stars, 2
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            Use Django To Introduce CSRF and Cookies , Session  
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/tstringer/verpy" target="_blank">verpy</a> -
                                <small>6 Stars, 0
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            Python application versioning tool 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/narimiran/tably" target="_blank">tably</a> -
                                <small>0 Stars, 0
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            Python script for converting .csv data to LaTeX tables. 
                        </div>
                        <br />
                    
                            <div class="subtitle">
                                <a href="https://github.com/lonetwin/pythonrc/" target="_blank">pythonrc</a> -
                                <small>0 Stars, 0
                                Fork
                                </small>
                            </div>
                            <div class="body-text">
                                
                            This is a python script intended to improve on the default Python interactive shell experience.

 
                        </div>
                        <br />
                    
                    
                        
                            <img src="http://www.launchbit.com/taz-pixel/11284-6889-111" />
                        
                            <img src="http://www.launchbit.com/taz-pixel/11284-6947-111" />
                        
                    
                    
                </td>
            </tr>
        </tbody></table></p>
<p>
<em><a href="http://importpython.com/blog/post/import-python-146-c-extensions-cleaning-data-pandas-machine-learning-and-more">October 13, 2017 12:37 PM</a></em>
</p>









<hr /><h3 class="post"><a href="https://blog.qutebrowser.org/" title="qutebrowser development blog">qutebrowser development blog</a></h3>


<h4><a href="https://blog.qutebrowser.org/qutebrowser-v100-released.html">qutebrowser v1.0.0 released!</a></h4>
<p>
<p>I'm delighted to announce that I just released qutebrowser v1.0.0!</p>
<p>qutebrowser is a keyboard driven browser with a vim-like, minimalistic
interface. It's written using PyQt and cross-platform.</p>
<p>This release comes with many big breaking changes such as the new config and
QtWebEngine by default, so please take a look at the changelog.</p>
<p>As announced previously, per-domain settings unfortunately didn't make it into
v1.0.0 - it's the next thing I plan on tackling. However, there's more than
enough big things in v1.0.0! :)</p>
<p>Enjoy!</p>
<p><strong>edit:</strong> I just released v1.0.1 which fixes three bugs introduced in v1.0.0:</p>
<ul class="simple">
<li>Fixed starting after customizing <cite>fonts.tabs</cite> or <cite>fonts.debug_console</cite>.</li>
<li>Fixed starting with old PyQt versions compiled against newer Qt versions.</li>
<li>Fixed check for PyQt version to correctly enforce 5.7 (not 5.2).</li>
</ul>
<p>The full changelog for v1.0.0:</p>
<div class="section" id="major-changes">
<h2>Major changes</h2>
<ul class="simple">
<li>Dependency changes:<ul>
<li>Support for legacy QtWebKit (before 5.212 which is
<a class="reference external" href="https://github.com/annulen/webkit/wiki">distributed independently from Qt</a>)
is dropped.</li>
<li>Support for Python 3.4 is dropped.</li>
<li>Support for Qt before 5.7.1 and PyQt before 5.7 is dropped.</li>
<li>New dependency on the QtSql module and Qt sqlite support.</li>
<li>New dependency on the <a class="reference external" href="http://www.attrs.org/">attrs</a> project (packaged as
<tt class="docutils literal"><span class="pre">python-attr</span></tt> in some distributions).</li>
<li>The depedency on PyOpenGL (when using QtWebEngine) got removed. Note
that PyQt5.QtOpenGL is still a dependency.</li>
<li>PyQt5.QtOpenGL is now always required, even with QtWebKit.</li>
</ul>
</li>
<li>The QtWebEngine backend is now used by default. Note this means that
QtWebEngine now should be a required dependency, and QtWebKit (if new enough)
should be changed to an optional dependency.</li>
<li>Completely rewritten configuration system which ignores the old config file.
See <tt class="docutils literal"><span class="pre">qute://help/configuring.html</span></tt> for details.</li>
<li>Various documentation files got moved to the doc/ subfolder; <tt class="docutils literal">qutebrowser.desktop</tt> got moved to misc/.</li>
<li><tt class="docutils literal">:set</tt> now doesn't support toggling/cycling values anymore, that functionality got moved to <tt class="docutils literal"><span class="pre">:config-cycle</span></tt>.</li>
<li>New completion engine based on sqlite, which allows to complete
the entire browsing history. The default for
<tt class="docutils literal">completion.web_history_max_items</tt> got changed to <tt class="docutils literal"><span class="pre">-1</span></tt> (unlimited). If the
completion is too slow on your machine, try setting it to a few 1000 items.</li>
</ul>
</div>
<div class="section" id="added">
<h2>Added</h2>
<ul class="simple">
<li>QtWebEngine: Spell checking support, see the <tt class="docutils literal">spellcheck.languages</tt> setting.</li>
<li>New <tt class="docutils literal">qt.args</tt> setting to pass additional arguments to Qt/Chromium.</li>
<li>New <tt class="docutils literal">backend</tt> setting to select the backend to use.
Together with the previous setting, this should make most wrapper scripts
unnecessary.</li>
<li>qutebrowser can now be set as the default browser on macOS.</li>
<li>New config commands:<ul>
<li><tt class="docutils literal"><span class="pre">:config-cycle</span></tt> to cycle an option between multiple values.</li>
<li><tt class="docutils literal"><span class="pre">:config-unset</span></tt> to remove a configured option.</li>
<li><tt class="docutils literal"><span class="pre">:config-clear</span></tt> to remove all configured options.</li>
<li><tt class="docutils literal"><span class="pre">:config-source</span></tt> to (re-)read a <tt class="docutils literal">config.py</tt> file.</li>
<li><tt class="docutils literal"><span class="pre">:config-edit</span></tt> to open the <tt class="docutils literal">config.py</tt> file in an editor.</li>
<li><tt class="docutils literal"><span class="pre">:config-write-py</span></tt> to write a <tt class="docutils literal">config.py</tt> template file.</li>
</ul>
</li>
<li>New <tt class="docutils literal">:version</tt> command which opens <tt class="docutils literal"><span class="pre">qute://version</span></tt>.</li>
<li>New back/forward indicator in the statusbar.</li>
<li>New <tt class="docutils literal">bindings.key_mappings</tt> setting to map keys to other keys.</li>
<li>QtWebEngine: Support for proxy authentication.</li>
</ul>
</div>
<div class="section" id="changed">
<h2>Changed</h2>
<ul class="simple">
<li>Using <tt class="docutils literal">:download</tt> now uses the page's title as filename.</li>
<li>Using <tt class="docutils literal">:back</tt> or <tt class="docutils literal">:forward</tt> with a count now skips intermediate pages.</li>
<li>When there are multiple messages shown, the timeout is increased.</li>
<li><tt class="docutils literal">:search</tt> now only clears the search if one was displayed before, so pressing
<tt class="docutils literal">&lt;Escape&gt;</tt> doesn't un-focus inputs anymore.</li>
<li>Pinned tabs now adjust to their text's width, so the <tt class="docutils literal">tabs.width.pinned</tt>
setting got removed.</li>
<li><tt class="docutils literal"><span class="pre">:set-cmd-text</span></tt> now has a <tt class="docutils literal"><span class="pre">--run-on-count</span></tt> argument to run the underlying
command directly if a count was given.</li>
<li><tt class="docutils literal"><span class="pre">:scroll-perc</span></tt> got renamed to <tt class="docutils literal"><span class="pre">:scroll-to-perc</span></tt>.</li>
</ul>
</div>
<div class="section" id="removed">
<h2>Removed</h2>
<ul class="simple">
<li>Migrating QtWebEngine data written by versions before 2016-11-15 (before
v0.9.0) is now not supported anymore.</li>
<li>Upgrading qutebrowser with a version older than v0.4.0 still running now won't
work properly anymore.</li>
<li>The <tt class="docutils literal"><span class="pre">--harfbuzz</span></tt> and <tt class="docutils literal"><span class="pre">--relaxed-config</span></tt> commandline arguments got dropped.</li>
</ul>
</div>
<div class="section" id="fixes">
<h2>Fixes</h2>
<ul class="simple">
<li>Exiting fullscreen via <tt class="docutils literal">:fullscreen</tt> or buttons on a page now
restores the correct previous window state (maximized/fullscreen).</li>
<li>When <tt class="docutils literal">input.insert_mode.auto_load</tt> is set, background tabs now don't enter
insert mode anymore.</li>
<li>The keybinding help widget now works correctly when using keybindings with a
count.</li>
<li>The <tt class="docutils literal">window.hide_wayland_decoration</tt> setting now works correctly again.</li>
</ul>
</div></p>
<p>
<em><a href="https://blog.qutebrowser.org/qutebrowser-v100-released.html">October 13, 2017 07:52 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.blog.pythonlibrary.org" title="The Mouse Vs. The Python">Mike Driscoll</a></h3>


<h4><a href="http://www.blog.pythonlibrary.org/2017/10/12/how-to-resize-a-photo-with-python/">How to Resize a Photo with Python</a></h4>
<p>
<div class="pf-content"><p>Sometimes you will find yourself wanting to resize a photo. I usually want to do this for photos that I want to email or post on a website since some of my images can be quite large. Normal people use an image editor. I usually do as well, but for fun I thought I would look into how to do it with the Python programming language.</p>
<p>The quickest way to do this is to use the Pillow package which you can install with pip. Once you have it, open up your favorite code editor and try the following code:</p>
<pre class="python"><span>from</span> PIL <span>import</span> Image
&nbsp;
<span>def</span> resize_image<span>&#40;</span>input_image_path,
                 output_image_path,
                 size<span>&#41;</span>:
    original_image = Image.<span>open</span><span>&#40;</span>input_image_path<span>&#41;</span>
    width, height = original_image.<span>size</span>
    <span>print</span><span>&#40;</span><span>'The original image size is {wide} wide x {height} '</span>
          <span>'high'</span>.<span>format</span><span>&#40;</span>wide=width, height=height<span>&#41;</span><span>&#41;</span>
&nbsp;
    resized_image = original_image.<span>resize</span><span>&#40;</span>size<span>&#41;</span>
    width, height = resized_image.<span>size</span>
    <span>print</span><span>&#40;</span><span>'The resized image size is {wide} wide x {height} '</span>
          <span>'high'</span>.<span>format</span><span>&#40;</span>wide=width, height=height<span>&#41;</span><span>&#41;</span>
    resized_image.<span>show</span><span>&#40;</span><span>&#41;</span>
    resized_image.<span>save</span><span>&#40;</span>output_image_path<span>&#41;</span>
&nbsp;
<span>if</span> __name__ == <span>'__main__'</span>:
    resize_image<span>&#40;</span>input_image_path=<span>'caterpillar.jpg'</span>,
                 output_image_path=<span>'caterpillar_small.jpg'</span>,
                 size=<span>&#40;</span><span>800</span>, <span>400</span><span>&#41;</span><span>&#41;</span></pre>
<p><span id="more-6763"></span></p>
<p>Here we import the <strong>Image</strong> class from the <strong>PIL</strong> package. Next we have a function that takes 3 arguments: The location of the file we want to open, the location we want to save the resized image and a tuple that represents the new size the image should be where the tuple is the width and height respectively. Next we open our image and print out its size. Then we call the image object&#8217;s <strong>resize()</strong> method with the <strong>size</strong> tuple we passed in. Finally we grab the new siz, print it out and then show the image before saving the resized photo. Here is what it looks like now:</p>
<p><img src="http://www.blog.pythonlibrary.org/wp-content/uploads/2017/10/caterpillar_resized-300x171.png" alt="" width="300" height="171" class="aligncenter size-medium wp-image-6769" /></p>
<p>As you can see, the resize() method doesn&#8217;t do any kind of scaling. We will look t how to do that next!</p>
<hr />
<h3>Scaling an Image</h3>
<p>Most of the time, you won&#8217;t want to resize your image like we did in the previous example unless you want to write a scaling method. The problem with the previous method is that it does not maintain the photo&#8217;s aspect ratio when resizing. So instead of resizing, you can just use the <strong>thumbnail()</strong> method. Let&#8217;s take a look:</p>
<pre class="python"><span>from</span> PIL <span>import</span> Image
&nbsp;
<span>def</span> scale_image<span>&#40;</span>input_image_path,
                output_image_path,
                width=<span>None</span>,
                height=<span>None</span>
                <span>&#41;</span>:
    original_image = Image.<span>open</span><span>&#40;</span>input_image_path<span>&#41;</span>
    w, h = original_image.<span>size</span>
    <span>print</span><span>&#40;</span><span>'The original image size is {wide} wide x {height} '</span>
          <span>'high'</span>.<span>format</span><span>&#40;</span>wide=w, height=h<span>&#41;</span><span>&#41;</span>
&nbsp;
    <span>if</span> width <span>and</span> height:
        max_size = <span>&#40;</span>width, height<span>&#41;</span>
    <span>elif</span> width:
        max_size = <span>&#40;</span>width, h<span>&#41;</span>
    <span>elif</span> height:
        max_size = <span>&#40;</span>w, height<span>&#41;</span>
    <span>else</span>:
        <span># No width or height specified</span>
        <span>raise</span> <span>RuntimeError</span><span>&#40;</span><span>'Width or height required!'</span><span>&#41;</span>
&nbsp;
    original_image.<span>thumbnail</span><span>&#40;</span>max_size, Image.<span>ANTIALIAS</span><span>&#41;</span>
    original_image.<span>save</span><span>&#40;</span>output_image_path<span>&#41;</span>
&nbsp;
    scaled_image = Image.<span>open</span><span>&#40;</span>output_image_path<span>&#41;</span>
    width, height = scaled_image.<span>size</span>
    <span>print</span><span>&#40;</span><span>'The scaled image size is {wide} wide x {height} '</span>
          <span>'high'</span>.<span>format</span><span>&#40;</span>wide=width, height=height<span>&#41;</span><span>&#41;</span>
&nbsp;
&nbsp;
<span>if</span> __name__ == <span>'__main__'</span>:
    scale_image<span>&#40;</span>input_image_path=<span>'caterpillar.jpg'</span>,
                output_image_path=<span>'caterpillar_scaled.jpg'</span>,
                width=<span>800</span><span>&#41;</span></pre>
<p>Here we allow the programmer to pass in the input and output paths as well as our max width and height. We then use a conditional to determine what our max size should be and then we call the <strong>thumbnail()</strong> method on our open image object. We also pass in the <strong>Image.ANTIALIAS</strong> flag which will apply a high quality down sampling filter which results in a better image. Finally we open the newly saved scaled image and print out its size to compare with the original size. If you open up the scaled image, you will see that the aspect ratio of the photo was maintained.</p>
<hr />
<h3>Wrapping Up</h3>
<p>Playing around with the Pillow package is a lot of fun! In this article you learned how to resize an image and how to scale a photo while maintaining its aspect ratio. You can now use this knowledge to create a function that could iterate over a folder and create thumbnails of all the photos in that folder or you might create a simple photo viewing application where this sort of capability might be handy to have.</p>
<hr />
<h3>Related Reading</h3>
<ul>
<li>StackOverflow: <a href="https://stackoverflow.com/questions/24745857/python-pillow-how-to-scale-an-image" rel="noopener" target="_blank">Python / Pillow: How to scale an image</a></li>
<li>Convert a <a href="https://www.blog.pythonlibrary.org/2017/10/11/convert-a-photo-to-black-and-white-in-python/" rel="noopener" target="_blank">Photo to Black and White in Python</a></li>
<li><a href="https://www.blog.pythonlibrary.org/2017/10/05/how-to-rotate-mirror-photos-with-python/" rel="noopener" target="_blank">How to Rotate / Mirror Photos</a> with Python</li>
<li><a href="https://www.blog.pythonlibrary.org/2017/10/03/how-to-crop-a-photo-with-python/" rel="noopener" target="_blank">How to Crop a Photo</a> with Python</li>
</ul>
</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F10%2F12%2Fhow-to-resize-a-photo-with-python%2F&linkname=How%20to%20Resize%20a%20Photo%20with%20Python" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F10%2F12%2Fhow-to-resize-a-photo-with-python%2F&linkname=How%20to%20Resize%20a%20Photo%20with%20Python" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F10%2F12%2Fhow-to-resize-a-photo-with-python%2F&linkname=How%20to%20Resize%20a%20Photo%20with%20Python" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F10%2F12%2Fhow-to-resize-a-photo-with-python%2F&title=How%20to%20Resize%20a%20Photo%20with%20Python"></a></p></p>
<p>
<em><a href="http://www.blog.pythonlibrary.org/2017/10/12/how-to-resize-a-photo-with-python/">October 13, 2017 02:01 AM</a></em>
</p>





<h2>October 12, 2017</h2>




<hr /><h3 class="post"><a href="http://www.weeklypython.chat/" title="Weekly Python Chat">Weekly Python Chat</a></h3>


<h4><a href="http://ccst.io/e/namespaces">Namespaces: one honking great idea</a></h4>
<p>
<p>What does the word "namespace" mean?  What are some examples of namespaces in Python and why are they such a "honking great idea"?</p></p>
<p>
<em><a href="http://ccst.io/e/namespaces">October 12, 2017 06:00 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://pythonbytes.fm/" title="Python Bytes">Python Bytes</a></h3>


<h4><a href="https://pythonbytes.fm/episodes/show/47/pypy-now-works-with-way-more-c-extensions-and-parking-your-package-safely">#47 PyPy now works with way more C-extensions and parking your package safely</a></h4>
<p>
</p>
<p>
<em><a href="https://pythonbytes.fm/episodes/show/47/pypy-now-works-with-way-more-c-extensions-and-parking-your-package-safely">October 12, 2017 08:00 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://pyfound.blogspot.com/" title="Python Software Foundation News">Python Software Foundation</a></h3>


<h4><a href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/kUop15s4Qls/thomas-kluyver-community-service-award.html">Thomas Kluyver, Community Service Award 3rd Quarter 2017 Recipient</a></h4>
<p>
<div dir="ltr">
<div>
<div>
<span>People love Python for its ease of use, breadth of modules, and vibrant community. These qualities are made possible by people like Thomas Kluyver who, during the course of his career using Python for scientific research, has identified and implemented various modules, upgrades, and enhancements to Python. He is also an active member of the Python community, attending conferences, participating in his local Python User Group, and contributing his expertise to Python Subreddits.</span><br />
<br />
<div dir="ltr">
<span>For these reasons, the Python Software Foundation has awarded Thomas with the Q3 2017 Community Service Award.</span></div>
<br />
<div dir="ltr">
<span>RESOLVED, that the Python Software Foundation Q3 2017 Community Service Award be given to Thomas Kluyver for his contributions to the Scientific Python Community. Thomas has also served on many other open source projects and is active on the Python subreddit helping many people in the Python community.</span></div>
<br />
<div dir="ltr">
<span>Contributions to Scientific Python</span></div>
<br />
<div dir="ltr">
<span>Thomas earned his Ph.D. in plant biology at the University of Sheffield in England. As a scientist, Thomasâ interest in programming stemmed from childhood where he learned QBasic with support from his father. During his Ph.D. program, Thomas became a regular contributor to Jupyter/IPython, working single-handedly to port it from Python 2 to Python 3. This caught the attention of Fernando PÃ©rez, creator of IPython and co-founder of Project Jupyter, who just happened to be looking for a post-doc. âGiven his amazing contributions even while he was still a student,â says Fernando, âI was looking for an opportunity to engage him more with the project.â Thomas accepted the offer to work with Fernando at UC Berkeley developing IPython and open source tools for science. Looking back Thomas recalls, âit was a great opportunity for me.â Thomas stayed at Berkeley for 2 years before returning to England for a position at the University of Southampton. There he continues to work on Jupyter and IPython and is also involved in the </span><a href="http://ngcm.soton.ac.uk/summer-academy"><span>NGCM Summer Academy</span></a><span>, teaching scientists a variety of computational skills in Python.</span></div>
<br />
<div dir="ltr">
<span>Contributions to Other Open Source Projects</span></div>
<br />
<div dir="ltr">
<span>Thomas has worked on a number of tools outside of his profession as well, such as </span><a href="https://github.com/takluyver/flit"><span>Flit</span></a><span>. Flit is a packaging tool which aims to make it simpler to publish your Python code on PyPI. This tool and the concepts it presents have led to discussions about standard interfaces for different packaging tools to work together better, documented in PEP </span><a href="https://www.python.org/dev/peps/pep-0517/"><span>517</span></a><span> and </span><a href="https://www.python.org/dev/peps/pep-0518/"><span>518</span></a><span>. Nick Coghlan, a CPython core developer who has worked with Thomas in his efforts to help move the Python packaging ecosystem forward, characterizes Thomas contributions to Flit as ârather than just writing it as a standalone tool, Thomas worked hard to ensure that the underlying interoperability standards also evolved to make it easier to write tools like Flit, and that such tools integrate nicely with frontend installation tools like pip.â</span></div>
<br />
<div dir="ltr">
<span>Distributing applications to end users is still a weak point for Python, whereas distributing libraries and developer tools have become better equipped to handle this challenge in recent years. That is why Thomas built </span><a href="https://github.com/takluyver/pynsist"><span>Pynsist</span></a><span>, a tool to build Windows installers for Python applications. Pynsist can even build a Windows installer from a Linux system, which builds on the work of other projects like </span><a href="http://nsis.sourceforge.net/Main_Page"><span>NSIS</span></a><span>. Fernando says, âconsidering that Thomas is mostly a Linux user, this is a great example of how he does work that has great value to the Python community even beyond his immediate needs.â</span></div>
<br />
<div dir="ltr">
<span>Contributions to the Python Community</span></div>
<br />
<span>Thomas is a regular speaker at Python events around the world such as SciPy, PyData, EuroSciPy, and PyCon conferences. He is also involved in his local Southampton Python User Group. âBasically he's all over the community,â says Fernando, âhelping others on the mailing lists, working on IPython/Jupyter, building multiple tools of great value to many, and teaching across a variety of spaces.â Fellow Jupyter/IPython developer and Flit collaborator Matthias Bussonnier agrees saying, âThomas has always cared a lot about community and has spent hours teaching new contributors how to do things, even if it would take him less time to do them himself.â</span></div>
<br />
<div dir="ltr">
<span>Why Python?</span></div>
<span> </span><br />
<table cellpadding="0" cellspacing="0" class="tr-caption-container"><tbody>
<tr><td><a href="https://lh6.googleusercontent.com/HJYMMtTFtoSvwHaPbReg_lCb5X2HSJDQZlNzphrnN-4t6JXkmrTIMLPaDLeu5Tt95H-XZx_2pzr2k70lCTEiPjJhz_7Np1XkUompPJFesrYO1SrsbKKEg4lxZSjxcORQUEC-QAUc"><img border="0" height="320" src="https://lh6.googleusercontent.com/HJYMMtTFtoSvwHaPbReg_lCb5X2HSJDQZlNzphrnN-4t6JXkmrTIMLPaDLeu5Tt95H-XZx_2pzr2k70lCTEiPjJhz_7Np1XkUompPJFesrYO1SrsbKKEg4lxZSjxcORQUEC-QAUc" width="241" /></a></td></tr>
<tr><td class="tr-caption"><span id="docs-internal-guid-fc47fd45-0dd5-d6a5-2888-733ef4428316"><a href="http://blog.sotonsailrobot.org/articles/xsens-test/"><span><span>Working on the Black Python</span></span></a></span></td></tr>
</tbody></table>
<span id="docs-internal-guid-fc47fd45-0dc4-e416-c5fa-1a4b9c0dcff7"><span>When asked why Python is his language of choice, Thomas explains, âIt's a beginners language, but it's also a language that many experienced programmers are using to solve real problems. I also like the breadth of domains in which Python is used and the strong open source ethos in the community around Python.â</span></span><br />
<span id="docs-internal-guid-fc47fd45-0dd5-7cf3-f5da-219e5d5f9af9"><span></span></span><br />
<span><span>As if Thomas has yet to prove the full breadth of Pythonâs domains, Thomas recently participated in the </span><a href="http://www.roboticsailing.org/"><span>World Robotic Sailing Competition</span></a><span>. His team entered in their model sailboat, named the Black Python, which carries a Raspberry Pi to control the sails and the rudder. The Black Python took first place in the 'micro sailboat' class both this year and last. Read more about this project on their </span><a href="http://blog.sotonsailrobot.org/"><span>blog</span></a><span>.</span></span></div>
<br />
<div dir="ltr">
<span></span></div>
<div dir="ltr">
<span>Despite these significant accomplishments, Thomas recognizes the support he has gotten over the years recalling, âI've benefited immensely from other people: from my father helping me to learn programming, to the IPython team welcoming me and bringing me into the scientific Python community, to the thousands of programmers whose open source code I've used.â</span><br />
<span><br /></span></div>
<table><colgroup><col width="438" /></colgroup><tbody>
<tr><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container"><tbody>
<tr><td><img height="277" src="https://lh6.googleusercontent.com/BXNlQ-iBtbdNUg4loKpUbm5ZPiv8aKlb5mC5L_XgmCu5mmPcjjgInwTe1Jj3WrNeuOJX4ZAVGP1SeIOEdzqZczZ4fSkB_aXD87WxP3dlQzXRgrgpNWOs-Nz6uyQHqs_jQzVhFd5k" width="320" /></td></tr>
<tr><td class="tr-caption"><span>Community Service Award Winner 2017Q3 Thomas Kluyver</span></td></tr>
</tbody></table>
<div dir="ltr">
<span></span></div>
</td></tr>
<tr><td><div dir="ltr">
<br /></div>
</td></tr>
</tbody></table>
</div>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=kUop15s4Qls:W7AJN8KgBn0:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?d=yIl2AUoC8zA" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=kUop15s4Qls:W7AJN8KgBn0:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=kUop15s4Qls:W7AJN8KgBn0:-BTjWOF_DHI" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=kUop15s4Qls:W7AJN8KgBn0:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=kUop15s4Qls:W7AJN8KgBn0:F7zBnMyn0Lo" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=kUop15s4Qls:W7AJN8KgBn0:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=kUop15s4Qls:W7AJN8KgBn0:V_sGLiPBpWU" border="0" /></a>
</div><img src="http://feeds.feedburner.com/~r/PythonSoftwareFoundationNews/~4/kUop15s4Qls" height="1" width="1" alt="" /></p>
<p>
<em><a href="http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/kUop15s4Qls/thomas-kluyver-community-service-award.html">October 12, 2017 07:00 AM</a></em>
</p>









<hr /><h3 class="post"><a href="http://grodola.blogspot.com/search/label/python" title="Random writings and thoughts about Python">Giampaolo Rodola</a></h3>


<h4><a href="http://grodola.blogspot.com/2017/10/psutil-540-with-aix-support-is-out.html">psutil 5.4.0 with AIX support is out</a></h4>
<p>
After a long time psutil finally adds support for a brand new exotic platform: AIX! Honestly I am not sure how many AIX Python users are out there (I suppose not many) but still, here it is. For this we have to thank Arnon Yaari who started working on the porting <a href="https://github.com/giampaolo/psutil/issues/605" target="_blank">a couple of years ago</a>. To be honest I was skeptical at first because AIX is the only platform which I cannot virtualize and test on my laptop so that made me a bit nervous but Arnon did a very good job. The final <a href="https://github.com/giampaolo/psutil/pull/1123" target="_blank">PR</a> is huge, it required a considerable amount of work on his part and a review process of over 140 messages which were exchanged between me and him over the course of over 1 month during which I was travelling through China. The final result is very good, basically (almost) all original unit tests pass and the quality of the submitted code is awesome which (I must say) is kind of unusual for an external contribution like this one. Kudos to you Arnon! ;-) <br /><br />Other than AIX support, release 5.4.0 also includes a couple of important bug fixes for <i>sensors_temperatures()</i> and <i>sensors_fans()</i> functions on Linux and the fix of a bug on OSX which could cause a segmentation fault when using Process.open_files(). Complete list of bugfixes is <a href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst#540" target="_blank">here</a>.<br /><br />In terms of future contributions for exotic and still unsupported platforms it is worth mentioning a (still incomplete) PR for <a href="https://github.com/giampaolo/psutil/pull/998" target="_blank">Cygwin</a> which looks promising and <a href="https://github.com/giampaolo/psutil/pull/845" target="_blank">Mingw32</a>&nbsp;compiler support on Windows. It looks like psutil is gradually getting to a point where the addition of new functionalities is becoming more rare, so it is good that support for new platforms happens now when the API is mature and stable. Future development in this direction can also include Android and (hopefully) IOS support. Now *that* would be really awesome to have! =)<br /><br />Stay tuned.<br /><br /><ul><li><a href="https://www.reddit.com/r/Python/comments/75wsfu/psutil_540_with_aix_support_is_out/" target="_blank">Reddit</a></li><li><a href="http://grodola.blogspot.com/2017/10/psutil-540-with-aix-support-is-out.html" target="_blank">HackerNews</a></li></ul></p>
<p>
<em><a href="http://grodola.blogspot.com/2017/10/psutil-540-with-aix-support-is-out.html">October 12, 2017 05:56 AM</a></em>
</p>





<h2>October 11, 2017</h2>




<hr /><h3 class="post"><a href="https://nvbn.github.io" title="nvbn blog - python">Vladimir Iakolev</a></h3>


<h4><a href="https://nvbn.github.io/2017/10/11/iterm2-ssh-color/">Change iTerm2 tab and window title colors depending on ssh host</a></h4>
<p>
<p>At my work, I use macOS with iTerm2 as a terminal. And iTerm2 has
fancy escape codes for changing tab and window titles colors:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="se">\0</span>33]6;1;bg;red;brightness;255<span class="se">\a</span>
<span class="se">\0</span>33]6;1;bg;green;brightness;255<span class="se">\a</span>
<span class="se">\0</span>33]6;1;bg;blue;brightness;255<span class="se">\a</span>
</code></pre>
</div>

<p>So I thought that it will be nice to distinguish different ssh
hosts by color. I found on
<a href="https://stackoverflow.com/questions/3426404/create-a-hexadecimal-colour-based-on-a-string-with-javascript">Stack Overflow</a>
how to generate color from a string and wrote a python script that
extracts host from command line arguments and prints fancy sequences:</p>

<div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="c">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">sys</span>


<span class="k">def</span> <span class="nf">get_host</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">arg</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">'-'</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">arg</span>


<span class="k">def</span> <span class="nf">str_to_color</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="nb">hash</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="nb">hash</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="nb">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">-</span> <span class="nb">hash</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="k">yield</span> <span class="p">(</span><span class="nb">hash</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">8</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mh">0xff</span>


<span class="k">def</span> <span class="nf">generate_seqs</span><span class="p">(</span><span class="n">color</span><span class="p">):</span>
    <span class="n">seq</span> <span class="o">=</span> <span class="s">'</span><span class="se">\033</span><span class="s">]6;1;bg;{};brightness;{}</span><span class="se">\a</span><span class="s">'</span>
    <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">'red'</span><span class="p">,</span> <span class="s">'green'</span><span class="p">,</span> <span class="s">'blue'</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
        <span class="k">yield</span> <span class="n">seq</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">host</span> <span class="o">=</span> <span class="n">get_host</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">host</span><span class="p">:</span>
        <span class="n">color</span> <span class="o">=</span> <span class="n">str_to_color</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">seq</span> <span class="ow">in</span> <span class="n">generate_seqs</span><span class="p">(</span><span class="n">color</span><span class="p">):</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
</code></pre>
</div>

<p>In action:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>â ./ssh_color.py mrw.wtf
]6;1;bg;red;brightness;173]6;1;bg;green;brightness;84]6;1;bg;blue;brightness;51
</code></pre>
</div>

<p>Now we need to create a bash/zsh function that will call our script,
run <code class="highlighter-rouge">ssh</code> and reset color on exit:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>ssh_color <span class="o">()</span> <span class="o">{</span>
    ssh_color.py <span class="nv">$*</span>  <span class="c"># I put script in /usr/local/bin/</span>
    <span class="nb">trap</span> <span class="s1">'echo -e "\033]6;1;bg;*;default\a"'</span> INT EXIT
    ssh <span class="nv">$*</span>
<span class="o">}</span>

<span class="nb">alias </span><span class="nv">ssh</span><span class="o">=</span>ssh_color
</code></pre>
</div>

<p>And it just works:</p>

<p><img src="https://nvbn.github.io/assets/iterm2_ssh_color.png" alt="book cover white" /></p></p>
<p>
<em><a href="https://nvbn.github.io/2017/10/11/iterm2-ssh-color/">October 11, 2017 10:30 PM</a></em>
</p>









<hr /><h3 class="post"><a href="https://www.peterbe.com/rss.xml" title="Peterbe.com">Peter Bengtsson</a></h3>


<h4><a href="https://www.peterbe.com/plog/simple-or-fancy-upsert-in-postgresql-with-django">Simple or fancy UPSERT in PostgreSQL with Django</a></h4>
<p>
<p>As of PostgreSQL 9.5 we have UPSERT support. Technically, it's <a href="https://www.postgresql.org/docs/9.5/static/sql-insert.html#SQL-ON-CONFLICT"><code>ON CONFLICT</code></a>, but it's basically a way to execute an <code>UPDATE</code> statement in case the <code>INSERT</code> triggers a conflict on some column value. By the way, here's <a href="https://hashrocket.com/blog/posts/upsert-records-with-postgresql-9-5">a great blog post</a> that demonstrates how to use <code>ON CONFLICT</code>.  </p>
<p>In this Django app I have a model that has a field called <code>hash</code> which has a <code>unique=True</code> index on it. What I want to do is either insert a row, or if the <code>hash</code> is already in there, it should increment the <code>count</code> and the <code>modified_at</code> timestamp instead.  </p>
<h3>The Code(s)</h3>
<p>Here's the basic version in "pure Django ORM":  </p>
<div class="highlight">

<pre><span></span><span class="k">if</span> <span class="n">MissingSymbol</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="nb">hash</span><span class="o">=</span><span class="n">hash_</span><span class="p">)</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>
    <span class="n">MissingSymbol</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="nb">hash</span><span class="o">=</span><span class="n">hash_</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
        <span class="n">count</span><span class="o">=</span><span class="n">F</span><span class="p">(</span><span class="s1">'count'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
        <span class="n">modified_at</span><span class="o">=</span><span class="n">timezone</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
    <span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">MissingSymbol</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
        <span class="nb">hash</span><span class="o">=</span><span class="n">hash_</span><span class="p">,</span>
        <span class="n">symbol</span><span class="o">=</span><span class="n">symbol</span><span class="p">,</span>
        <span class="n">debugid</span><span class="o">=</span><span class="n">debugid</span><span class="p">,</span>
        <span class="n">filename</span><span class="o">=</span><span class="n">filename</span><span class="p">,</span>
        <span class="n">code_file</span><span class="o">=</span><span class="n">code_file</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">code_id</span><span class="o">=</span><span class="n">code_id</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span>
</pre></div>

<p>Here's that same code rewritten in "pure SQL":  </p>
<div class="highlight">

<pre><span></span><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">connection</span>


<span class="k">with</span> <span class="n">connection</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span> <span class="k">as</span> <span class="n">cursor</span><span class="p">:</span>
    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;&quot;&quot;</span>
<span class="s2">        INSERT INTO download_missingsymbol (</span>
<span class="s2">            hash, symbol, debugid, filename, code_file, code_id,</span>
<span class="s2">            count, created_at, modified_at</span>
<span class="s2">        ) VALUES (</span>
<span class="s2">            </span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">,</span>
<span class="s2">            1, CLOCK_TIMESTAMP(), CLOCK_TIMESTAMP()</span>
<span class="s2">          )</span>
<span class="s2">        ON CONFLICT (hash)</span>
<span class="s2">        DO UPDATE SET</span>
<span class="s2">            count = download_missingsymbol.count + 1,</span>
<span class="s2">            modified_at = CLOCK_TIMESTAMP()</span>
<span class="s2">        WHERE download_missingsymbol.hash = </span><span class="si">%s</span><span class="s2"></span>
<span class="s2">        &quot;&quot;&quot;</span><span class="p">,</span> <span class="p">[</span>
            <span class="n">hash_</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">debugid</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span>
            <span class="n">code_file</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">,</span> <span class="n">code_id</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">hash_</span>
        <span class="p">]</span>
    <span class="p">)</span>
</pre></div>

<p>Both work.  </p>
<p>Note the use of <code>CLOCK_TIMESTAMP()</code> instead of <code>NOW()</code>. Since Django wraps all writes in transactions if you use <code>NOW()</code> it will be evaluated to the same value for the whole transaction, thus making unit testing really hard.  </p>
<p>But which is fastest?  </p>
<h3>The Results</h3>
<p>First of all, this hard to test locally because my Postgres is running locally in Docker so the network latency in talking to a network Postgres means that the latency is less and having to do two different executions would cost more if the network latency is more.  </p>
<p>I ran a simple benchmark where it randomly picked one of the two code blocks (above) depending on a 50% chance.<br />
The results are:  </p>
<pre>
METHOD     MEAN       MEDIAN
SQL        6.99ms     6.61ms
ORM        10.28ms    9.86ms
</pre>

<p>So doing it with a block of raw SQL instead is 1.5 times faster. But this difference would surely grow when the network latency is higher.  </p>
<h3>Discussion</h3>
<p>There's an alternative and that's to use <a href="http://django-postgres-extra.readthedocs.io"><code>django-postgres-extra</code></a> but I'm personally hesitant. The above little raw SQL hack is the only thing I need and adding more libraries makes far-future maintenance harder.  </p>
<p>Beyond the time optimization of being able to send only 1 SQL instruction to PostgreSQL, the biggest benefit is avoiding concurrency race conditions. From the documentation:  </p>
<p><em>"ON CONFLICT DO UPDATE guarantees an atomic INSERT or UPDATE outcome; provided there is no independent error, one of those two outcomes is guaranteed, even under high concurrency. This is also known as UPSERT â "UPDATE or INSERT"."</em></p>
<p>I'm going to keep this little hack. It's not beautiful but it works and saves time and gives me more comfort around race conditions.</p></p>
<p>
<em><a href="https://www.peterbe.com/plog/simple-or-fancy-upsert-in-postgresql-with-django">October 11, 2017 02:57 PM</a></em>
</p>









<hr /><h3 class="post"><a href="https://blog.jetbrains.com/pycharm" title="PyCharm Blog">PyCharm</a></h3>


<h4><a href="http://feedproxy.google.com/~r/Pycharm/~3/Xc8fOaFyUd8/">Webinar: âGraphQL in the Python Worldâ</a></h4>
<p>
<p><a href="https://www.graphql.com">GraphQL</a> is a new way of communicating with your data sources. It might replace RESTful APIs because it provides a better framework for dealing with your data. This webinar is about what GraphQL is and what problems it actually solves in comparison to RESTful APIs. Then, if you like it, how you can get started using the Python <a href="http://graphene-python.org">graphene</a> library, and how to use it with different ORMs like <a href="https://www.djangoproject.com">Django</a> and <a href="http://www.sqlalchemy.org">SQLAlchemy</a> as well as Python web frameworks like <a href="http://flask.pocoo.org">Flask</a> and <a href="https://trypyramid.com">Pyramid</a>.</p>
<ul>
<li>Tuesday, October 31</li>
<li>17:00 European Time, 11AM Eastern Standard Time</li>
<li><a href="https://info.jetbrains.com/PyCharm-Webinar-October2017.html">Register here</a></li>
</ul>
<p><a href="https://info.jetbrains.com/PyCharm-Webinar-October2017.html" rel="attachment wp-att-4705"><img class="alignnone size-full wp-image-5053" src="https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2017/10/p8r.png" alt="p8r" width="799" height="541" /></a></p>
<p>This webinar will provide both a theoretical perspective as well as hands-on demos to showcase what GraphQL is, what it is capable of, and how it can benefit in your own jobs and side projects.</p>
<h2>Technical Requirements</h2>
<ul>
<li>Understanding of Web Development</li>
<li>Understanding of RESTful Web Services</li>
<li>Experience with at least one Python web framework like Flask, Django or Pyramid</li>
</ul>
<h2>Speaking to you</h2>
<p><a href="https://twitter.com/gamesbrainiac">Quazi Nafiul</a> is a software engineer at Suitsupply. He has been building REST APIs for over five years professionally. He has used pretty much every major web framework in the Python ecosystem. He&#8217;s given talks at multiple PyCons including APAC and Germany. He is currently working on evangelizing GraphQL to those who have used REST and are looking for better alternatives.</p>
<p>Quazi is also the author of <a href="https://www.packtpub.com/web-development/mastering-pycharm">Mastering PyCharm</a>.</p>
<img src="http://feeds.feedburner.com/~r/Pycharm/~4/Xc8fOaFyUd8" height="1" width="1" alt="" /></p>
<p>
<em><a href="http://feedproxy.google.com/~r/Pycharm/~3/Xc8fOaFyUd8/">October 11, 2017 12:33 PM</a></em>
</p>









<hr /><h3 class="post"><a href="http://www.blog.pythonlibrary.org" title="The Mouse Vs. The Python">Mike Driscoll</a></h3>


<h4><a href="http://www.blog.pythonlibrary.org/2017/10/11/convert-a-photo-to-black-and-white-in-python/">Convert a Photo to Black and White in Python</a></h4>
<p>
<div class="pf-content"><p>Black and white images aren&#8217;t for everyone. I personally like to play around with them as you can sometimes take a boring photo and turn it into something dramatic. I have also rescued a drab photo by turning it black and white. If you want to change a photo that you took into a black and white photo programmatically, the Pillow package has you covered. In this article we will look at the two simple ways to convert a photo to black and white and then we will also learn how to make a sepia-toned photo.</p>
<hr />
<h3>Making it Black and White</h3>
<p>The first obstacle is finding a photo that you would like to edit. For this example, we will use the following fuzzy caterpillar:<span id="more-6698"></span></p>
<p><img class="aligncenter size-medium wp-image-6740" src="http://www.blog.pythonlibrary.org/wp-content/uploads/2017/10/caterpillar-287x300.jpg" alt="" width="287" height="300" /></p>
<p>Now we just need to create a simple function that can turn our full color photo into a black and white one:</p>
<pre class="python"><span>from</span> PIL <span>import</span> Image
&nbsp;
<span>def</span> black_and_white<span>&#40;</span>input_image_path,
    output_image_path<span>&#41;</span>:
   color_image = Image.<span>open</span><span>&#40;</span>input_image_path<span>&#41;</span>
   bw = color_image.<span>convert</span><span>&#40;</span><span>'L'</span><span>&#41;</span>
   bw.<span>save</span><span>&#40;</span>output_image_path<span>&#41;</span>
&nbsp;
<span>if</span> __name__ == <span>'__main__'</span>:  
    black_and_white<span>&#40;</span><span>'caterpillar.jpg'</span>,
        <span>'bw_caterpillar.jpg'</span><span>&#41;</span></pre>
<p>The function above takes two arguments: the input image&#8217;s file path and the path we want to save the output to. The piece we really care about in this script is this function. It contains a call to open the Image which will return an <strong>Image</strong> object. We then use that object&#8217;s <strong>convert</strong> method to transform the image to black and white by passing it the string <strong>&#8216;L&#8217;</strong>. This may seem a bit strange, so let&#8217;s look at the <a href="https://pillow.readthedocs.io/en/4.3.x/reference/Image.html#PIL.Image.Image.convert" target="_blank" rel="noopener">documentation</a>.</p>
<p>Here you will find that the first parameter to the convert() method is the mode. Pillow supports several modes including: &#8216;P&#8217;, &#8216;L&#8217; and &#8216;1&#8217;. The mode we care about at the moment is &#8216;L&#8217;. The documentation states <em>&#8220;When translating a color image to black and white (mode âLâ), the library uses the ITU-R 601-2 luma transform: L = R * 299/1000 + G * 587/1000 + B * 114/1000&#8221;</em> where the RGB maps to Red, Green and Blue. Let&#8217;s see what kind of output our code generated:</p>
<p><img class="aligncenter size-medium wp-image-6737" src="http://www.blog.pythonlibrary.org/wp-content/uploads/2017/10/bw_caterpillar-287x300.jpg" alt="" width="287" height="300" /></p>
<p>That looks pretty nice if I do say so myself. The Pillow project also supports creating black and white images with dithering, which is basically adding noise to the image. Let&#8217;s take a look at how that changes the code:</p>
<pre class="python"><span>from</span> PIL <span>import</span> Image
&nbsp;
<span>def</span> black_and_white_dithering<span>&#40;</span>input_image_path,
    output_image_path,
    dithering=<span>True</span><span>&#41;</span>:
    color_image = Image.<span>open</span><span>&#40;</span>input_image_path<span>&#41;</span>
    <span>if</span> dithering:
        bw = color_image.<span>convert</span><span>&#40;</span><span>'1'</span><span>&#41;</span>  
    <span>else</span>:
        bw = color_image.<span>convert</span><span>&#40;</span><span>'1'</span>,
&nbsp;
    dither=Image.<span>NONE</span><span>&#41;</span>
    bw.<span>save</span><span>&#40;</span>output_image_path<span>&#41;</span>
&nbsp;
<span>if</span> __name__ == <span>'__main__'</span>:
    black_and_white_dithering<span>&#40;</span>
        <span>'caterpillar.jpg'</span>,
        <span>'bw_caterpillar_dithering.jpg'</span><span>&#41;</span></pre>
<p>The only difference between this function and the previous one is that we added a <strong>dithering</strong> argument and we also called the convert() method with a &#8216;1&#8217; (one) instead of &#8216;L&#8217;. You can do dithering with the &#8216;L&#8217; mode, but I wanted to show what happens when you use &#8216;1&#8217;. Let&#8217;s take a look at the output:</p>
<p><img class="aligncenter size-medium wp-image-6738" src="http://www.blog.pythonlibrary.org/wp-content/uploads/2017/10/bw_caterpillar_dithering-287x300.jpg" alt="" width="287" height="300" /></p>
<p>This one looks a lot different when you have the image at full size because you can see the white noise a lot easier. However since I am using a small version here, the change is pretty subtle.</p>
<p>Now let&#8217;s call the function with dithering set to <strong>False</strong>. If you do that, you will see the following image:</p>
<p><img class="aligncenter size-medium wp-image-6739" src="http://www.blog.pythonlibrary.org/wp-content/uploads/2017/10/bw_caterpillar_no_dithering-287x300.jpg" alt="" width="287" height="300" /></p>
<p>This one is a bit abstract looking, but also kind of interesting. It&#8217;s almost an ink-blot! As you can see, when it comes to creating black and white images, &#8216;L&#8217; is probably the mode you will want to focus on.</p>
<hr />
<h3>Creating a Sepia Toned Image</h3>
<p>Now that we&#8217;ve learned how to make our images black and white, I wanted to talk about how to add a sepia toning to your image. Sepia toned images are pretty popular and give your image that old fashioned yellowed look. I went digging around the web and found an article on Fredrik Lundh&#8217;s <a href="http://effbot.org/zone/pil-sepia.htm" rel="noopener" target="_blank">site</a> that talked about how to do this trick.</p>
<p>Let&#8217;s take a look at the code:</p>
<pre class="python"><span>from</span> PIL <span>import</span> Image
&nbsp;
<span>def</span> make_sepia_palette<span>&#40;</span>color<span>&#41;</span>:
    palette = <span>&#91;</span><span>&#93;</span>
    r, g, b = color
    <span>for</span> i <span>in</span> <span>range</span><span>&#40;</span><span>255</span><span>&#41;</span>:
        palette.<span>extend</span><span>&#40;</span><span>&#40;</span>r<span>*</span>i/<span>255</span>, g<span>*</span>i/<span>255</span>, b<span>*</span>i/<span>255</span><span>&#41;</span><span>&#41;</span>
&nbsp;
    <span>return</span> palette
&nbsp;
<span>def</span> create_sepia<span>&#40;</span>input_image_path,
    output_image_path<span>&#41;</span>:
    whitish = <span>&#40;</span><span>255</span>, <span>240</span>, <span>192</span><span>&#41;</span>
    sepia = make_sepia_palette<span>&#40;</span>whitish<span>&#41;</span>
&nbsp;
    color_image = Image.<span>open</span><span>&#40;</span>input_image_path<span>&#41;</span>
&nbsp;
    <span># convert our image to gray scale</span>
    bw = color_image.<span>convert</span><span>&#40;</span><span>'L'</span><span>&#41;</span>
&nbsp;
    <span># add the sepia toning</span>
    bw.<span>putpalette</span><span>&#40;</span>sepia<span>&#41;</span>
&nbsp;
    <span># convert to RGB for easier saving</span>
    sepia_image = bw.<span>convert</span><span>&#40;</span><span>'RGB'</span><span>&#41;</span>
&nbsp;
    sepia_image.<span>save</span><span>&#40;</span>output_image_path<span>&#41;</span>
&nbsp;
<span>if</span> __name__ == <span>'__main__'</span>:
    create_sepia<span>&#40;</span><span>'caterpillar.jpg'</span>,
                 <span>'sepia_caterpillar.jpg'</span><span>&#41;</span></pre>
<p>Here we create two functions. One for creating the sepia palette and the other for applying it. To create the palette, we need an off-white color created, so we do that by iterating over a tuple that is off-white and then iterating over all 255 variations of the RGB color spectrum. This creates a good sized tuple of various RGB values that represents out sepia palette.</p>
<p>Next we convert our image to black and white (or gray scale depending on how you look at it). Then we apply our sepia palette using the <strong>putpalette()</strong> method of the image object. Finally we convert the image back to &#8216;RGB&#8217; as according to Lundh, this allows us to save the image as a Jpeg. I didn&#8217;t do any digging to see if this is still required in Pillow or not. Finally we save the image and this is what I got:</p>
<p><img class="aligncenter size-medium wp-image-6746" src="http://www.blog.pythonlibrary.org/wp-content/uploads/2017/10/sepia_caterpillar-287x300.jpg" alt="" width="287" height="300" /></p>
<p>Pretty neat and the code runs quite fast too!</p>
<hr />
<h3>Wrapping Up</h3>
<p>Now you know how to use the Pillow package to create several variations of black and white photos. You also have discovered how easy it is to apply a palette to your black and white images to add sepia toning. You can go and play around with other colors to make your black and white photos change their look considerably. Have fun and happy coding!</p>
<hr />
<h3>Related Readng</h3>
<ul>
<li><a href="http://effbot.org/zone/pil-sepia.htm" rel="noopener" target="_blank">PIL and Sepia</a></li>
<li>Automate the Boring Stuff&#8217;s <a href="https://automatetheboringstuff.com/chapter17/" rel="noopener" target="_blank">chapter</a></li>
<li><a href="https://www.blog.pythonlibrary.org/2017/10/05/how-to-rotate-mirror-photos-with-python/" rel="noopener" target="_blank">How to Rotate / Mirror Photos</a> with Python</li>
<li><a href="https://www.blog.pythonlibrary.org/2017/10/03/how-to-crop-a-photo-with-python/" rel="noopener" target="_blank">How to Crop a Photo</a> with Python</li>
</ul>
</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F10%2F11%2Fconvert-a-photo-to-black-and-white-in-python%2F&linkname=Convert%20a%20Photo%20to%20Black%20and%20White%20in%20Python" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F10%2F11%2Fconvert-a-photo-to-black-and-white-in-python%2F&linkname=Convert%20a%20Photo%20to%20Black%20and%20White%20in%20Python" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F10%2F11%2Fconvert-a-photo-to-black-and-white-in-python%2F&linkname=Convert%20a%20Photo%20to%20Black%20and%20White%20in%20Python" title="Google+" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F10%2F11%2Fconvert-a-photo-to-black-and-white-in-python%2F&title=Convert%20a%20Photo%20to%20Black%20and%20White%20in%20Python"></a></p></p>
<p>
<em><a href="http://www.blog.pythonlibrary.org/2017/10/11/convert-a-photo-to-black-and-white-in-python/">October 11, 2017 11:42 AM</a></em>
</p>









<hr /><h3 class="post"><a href="https://talkpython.fm/" title="Talk Python To Me - Python conversations for passionate developers">Talk Python to Me</a></h3>


<h4><a href="https://talkpython.fm/episodes/show/133/productivity-for-developers">#133 Productivity for developers</a></h4>
<p>
This episode is all about developer productivity. From continuous learning, to git source control tips, to tools and books for developers, Jay Miller from the Productivity in Tech podcast is here to share his experiences.</p>
<p>
<em><a href="https://talkpython.fm/episodes/show/133/productivity-for-developers">October 11, 2017 08:00 AM</a></em>
</p>





<h2>October 10, 2017</h2>




<hr /><h3 class="post"><a href="https://carlchenet.com" title="planetpython â Carl Chenet's Blog">Carl Chenet</a></h3>


<h4><a href="https://carlchenet.com/the-slack-threat/">The Slack Threat</a></h4>
<p>
<p>During a long era, electronic mail was the main communication tool for enterprises. <a href="https://slack.com/">Slack</a>, which offer public or private group discussion boards and instant messaging between two people, challenge its position, especially in the IT industry.</p>
<p>Not only Slack has features known and used since <a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC launch</a> in the late â80s, but Slack also offers file sending and sharing, code quoting, and it indexing for ulterior searches everything that goes through the application. Slack is also modular with numerous plug-in to easily add new features.</p>
<p><a href="https://slack.com"><img class="aligncenter wp-image-4374 size-medium" src="https://carlchenet.com/wp-content/uploads/2016/10/slack-logo-300x86.png" alt="" width="300" height="86" /></a></p>
<p>Using the Software-As-A-Service (SAAS) model, Slack basic version is free, and users pay for options. Slack is now considered by the Github generation like the new main enterprise communication tool.</p>
<p>As I did in my previous article on <a href="https://carlchenet.com/the-github-threat/">the Github threat</a>, this one wonât promote Slask&rsquo;s advantages, as many other articles have already covered all these points ad nauseam, but to show the other side and to warn the companies using this service about its inherent risks. So far, these risks have been ignored, sometimes voluntary in the name of the âIt works<span>â¢â</span> ideology. Neglecting all economic and safety consideration, neglecting all threat to privacy and individual freedom. Weâll see about them below.</p>
<div id="attachment_3361" class="wp-caption aligncenter"><a href="https://github.com"><img class="wp-image-3361 size-medium" src="https://carlchenet.com/wp-content/uploads/2016/01/github-logo-300x133.png" alt="" width="300" height="133" /></a><p class="wp-caption-text">Github, a software forge as a SAAS, with all the advantage but also all the risk of its economic model</p></div>
<p><b>All your company communication since its creation</b></p>
<p>When a start-up chooses Slack, all of its internal communication will be stored by Slack. When someone uses this service, the simple fact to chat through it means that the whole communication is archived.</p>
<p>One may point that within the basic Slack offer, only the last 10.000 messages can be read and searched. Bad argument. Slack stored every message and every file shared as it pleases. Weâll see below this application behavior is of capital importance in the Slack threat to enterprises.</p>
<p>And the problem is the same for all other companies which choose Slack at one point or another. If they replace their traditional communication method with it, Slack will have access to capital data, not only in volume, but also because of their value for the company itselfâ¦ Or anyone interested in this company life.</p>
<p><b>Search Your Entire Archive</b></p>
<p>One of the main arguments to use Slack is its âSearch your entire archiveâ feature. One can search almost anything one can think of. Why? Because everything is indexed. Your team chat archive or the more or less confidential documents exchanged with the accountant department; everything is in it in order to provide the most effective search tool.</p>
<div id="attachment_5242" class="wp-caption aligncenter"><img class="wp-image-5242 size-full" src="https://carlchenet.com/wp-content/uploads/2017/10/slack-bar.png" alt="" width="521" height="65" /><p class="wp-caption-text">The search bar, well-known by Slack users</p></div>
<p>We canât deny itâs a very attractive feature for everyone inside the company. But it is also a very attractive feature for everyone outside of the company who would want to know more about its internal life. Even more if youâre looking for a specific subject.</p>
<p>If Slack is the main communication tool of your company, and if as Iâve experienced in my professional life, some teams prefer to use it than to go to the office next door or even bug you to put the information on the dedicated channel, one can easily deduce that nothingâin this type of companyâescape Slack. The automatic indexation and the search feature efficiency are excellent tools to get all the information needed, in quantity and in quality.</p>
<p>As such, itâs a great social engineering tool for everyone who has access to it, with a history as old as the use of Slack as a communication tool in the company.</p>
<p><b>Across bordersâ¦ And Beyond!</b></p>
<p>Slack is a Web service which uses mainly <a href="https://aws.amazon.com/fr/">Amazon Web services</a> and most specially <a href="https://aws.amazon.com/fr/cloudfront/">Cloudfront</a>, as stated by the available information on Slack infrastructure.</p>
<p>Even without a complete study of said infrastructure, itâs easy to state that all the data regarding many innovative global companies around the world (and some of them including for all their internal communication since their creation) are located in the United States, or at least in the hands of a US company, which must follow US laws, a country with a well-known history of large scale industrial espionage, as the whistleblower <a href="https://en.wikipedia.org/wiki/Edward_Snowden">Edward Snowden</a> demonstrated it in 2013 and where company data access has no restriction under <a href="https://en.wikipedia.org/wiki/Patriot_Act">the Patriot Act</a>, as in the Microsoft case (2014) where data stored in Ireland by the Redmond software editor have been given to US authorities.</p>
<div id="attachment_4395" class="wp-caption aligncenter"><img class="wp-image-4395 size-medium" src="https://carlchenet.com/wp-content/uploads/2016/10/snowden-249x300.jpg" alt="" width="249" height="300" /><p class="wp-caption-text">Edward Snowden, an individualâand corporateâfreedom fighter</p></div>
<p>As such, Slackâs automatic indexation and search tool are a boon for anyoneâspy agency or hackerâwhich get authorized access to it.</p>
<p>To trust a third party with all, or at least most of, your internal corporate communication is a certain risk for your company if the said third party doesnât follow the same regulations as yours or if it has different interests, from a data security point of view or more globally on its competitiveness. A badly timed data leak can be catastrophic.</p>
<p>Whatâs the point of secretly preparing a new product launch or an aggressive takeover if all your recent Slack conversations have leaked, including your secret plans?</p>
<p><b>What ifâ¦ Slack is hacked? </b></p>
<p>First letâs remember that even if a cyber attack may appear as a rare or hypothetical scenario to a badly informed and hurried manager, it is far from being as rare as she or he believes it (or wants to believe it).</p>
<p>Infrastructure hacking is quite common, as a regular visit to <a href="https://news.ycombinator.com/">Hacker News</a> will give you multiple evidence. And Slack itself has already been hacked.</p>
<p>February 2015: Slack is the victim during four days of a cyber attack, which was made public by the company in March. Officially, the unauthorized access was limited to information on the usersâ profiles. It is impossible to measure exactly what and who was impacted by this attack. In a recent announcement, Yahoo confessed that these 3 billion accounts (youâve read well: 3 billions) were compromised â¦ late 2014!</p>
<div id="attachment_4387" class="wp-caption aligncenter"><a href="https://yahoo.com"><img class="size-medium wp-image-4387" src="https://carlchenet.com/wp-content/uploads/2016/10/Yahoo-logo-300x70.png" alt="" width="300" height="70" /></a><p class="wp-caption-text">Yahoo, the company which suffered the largest recorded cyberattack regarding the compromised account numbers</p></div>
<p>Officially, Slack stated that âNo financial or payment information was accessed or compromised in this attack.â Which is, and by far, the least interesting of all data stored within Slack! With company internal communication indexedâsometimes from the very beginning of said companyâand searchable, Slack may be a potential target for cybercriminal not looking for its usersâ financial credentials but more their internal data already in a usable format. One can imagine Slack must give information on a massive data leak, which canât be ignored. But what would happen if only one Slack user is the victim of said leak?</p>
<p><b>The Free A</b><b>lternative Solutions</b></p>
<p>As we demonstrated above, companies need to find an alternative solution to Slack, one they can host themselves to reduce data leaks and industrial espionage and dependency on the Internet connection. Luckily, Slack success created its own copycats, some of them being also free software.</p>
<p><a href="https://rocket.chat/">Rocket.chat</a> is one of them. Its comprehensive service offers chat rooms, direct messages and file sharing but also videoconferencing and screen sharing, and even most features. Check their <a href="https://rocket.chat/features">dedicated page</a>. You can also try an <a href="https://demo.rocket.chat/home">online demo</a>. And even more, Rocket Chat has a very simple extension system and an API.</p>
<p><a href="https://rocket.chat"><img class="aligncenter wp-image-4380 size-medium" src="https://carlchenet.com/wp-content/uploads/2016/10/rocket-chat-logo-300x85.png" alt="" width="300" height="85" /></a></p>
<p><a href="https://about.mattermost.com/">Mattermost</a> is another service which has the advantages of proximity and of compatibility with Slack. It offers <a href="https://about.mattermost.com/features/">numerous features</a> including the main expected by this type of software. It also offers <a href="https://about.mattermost.com/community-applications/#privateApps">numerous apps and plug-in</a>s to interact with online services, software forges, and continuous integration tools.</p>
<p><a href="https://mattermost.org"><img class="aligncenter size-medium wp-image-4381" src="https://carlchenet.com/wp-content/uploads/2016/10/mattermost-logo-300x48.png" alt="" width="300" height="48" /></a></p>
<p><b>It works</b><span>â¢</span></p>
<p>In the introduction, we discussed the âIt works<span>â¢â </span>effect, usually invoked to dispel any arguments about data protection and exchange confidentiality we discussed in this article. True, one single developer can ask: why worry about it? All I want is to chat with my colleagues and send files!</p>
<p>Because Slack service subscription in the long term put the company continuously at risk. Maybe itâs not the employeesâ place to worry about it, they just have to do their job the more efficiently possible. On the other side, the company management, usually non-technical, may not be aware of what risks will threaten their company with this technical choice. The technical management may pretend to be omniscient, nobody is fooled.</p>
<p>Either someone from the direction will ask the right questionÂ (where are our data and who can access them?) or someone from the technical side alert them officially on these problems. This is this technical audience, even if not always heard by their direction, which is the target of this article. May they find in it the right arguments to be convincing.</p>
<p>We hope that the several points we developed in this article will help you to make the right choice.</p>
<h2>About Me</h2>
<p>Carl Chenet, Free Software Indie Hacker, founder of the French-speaking Hacker News-like <a href="https://www.journalduhacker.net">Journal du hacker</a>.</p>
<h2>Follow me on social networks</h2>
<ul>
<li>My Mastodon account : <a href="https://mastodon.social/@carlchenet">@carlchenet</a></li>
<li>My Diaspora* account : <a href="https://framasphere.org/u/carlchenet">@carlchenet</a></li>
<li>My Twitter account : <a href="https://twitter.com/carl_chenet">@carl_chenet</a></li>
</ul>
<p>Translated from French by <a href="https://www.outrelivres.fr/me-contacter/">StÃ©phanie Chaptal</a>. <a href="https://carlchenet.com/le-danger-slack/">Original article</a> written in October 2016.</p>
<p>&nbsp;</p></p>
<p>
<em><a href="https://carlchenet.com/the-slack-threat/">October 10, 2017 10:00 PM</a></em>
</p>

    </div>
  </div>

  <div id="left-hand-navigation">
    <div id="menu">
      <ul class="level-one">
          <li>
          <ul class="level-two">
             <li><a href="rss20.xml">RSS feed</a></li>
             <li><a href="titles_only.html">Titles Only</a></li>
             <li><a href="http://www.planetplanet.org/">Powered by Planet!</a></li>
	  </ul></li>
	  <li>Other Python Planets
            <ul class="level-two">
              <li><a href="http://terri.toybox.ca/python-soc/">Python Summer of Code</a></li>
              <li><a href="http://www.afpy.org/planet/">Planet Python Francophone</a></li>
              <li><a href="http://planeta.python.org.ar/">Planet Python Argentina</a></li>
              <li><a href="http://planetpython.matrix.jp/planet/">Planet Python Japan</a></li>
              <li><a href="http://wiki.python.org.br/planet/">Planet Python Brasil</a></li>
              <li><a href="http://planet.python.or.id">Planet Python Indonesia</a></li>
              <li><a href="http://pl.python.org/planeta/">Planet Python Poland</a></li>
  	  </ul></li>
	  <li>Python Libraries
          <ul class="level-two">
            <li><a href="http://planet.pysoy.org/">PySoy</a></li>
            <li><a href="http://planet.scipy.org/">SciPy</a></li>
            <li><a href="http://planet.sympy.org/">SymPy</a></li>
            <li><a href="http://planet.twistedmatrix.com/">Twisted</a></li>
	  </ul></li>
	  <li>Python/Web Planets
          <ul class="level-two">
            <li><a href="http://planet.cherrypy.org/">CherryPy</a></li>
            <li><a href="http://www.djangoproject.com/community/">Django Community</a></li>
            <li><a href="http://planet.plone.org/">Plone</a></li>
            <li><a href="http://planet.turbogears.org/">Turbogears</a></li>
	  </ul></li>
	  <li>Other Languages
          <ul class="level-two">
            <li><a href="http://planet.haskell.org/">Haskell</a></li>
            <li><a href="http://planet.lisp.org/">Lisp</a></li>
            <li><a href="http://planet.parrotcode.org/">Parrot</a></li>
            <li><a href="http://planet.perl.org/">Perl</a></li>
            <li><a href="http://planetruby.0x42.net/">Ruby</a></li>
	  </ul></li>
	  <li>Databases
          <ul class="level-two">
	    <li><a href="http://www.planetmysql.org/">MySQL</a></li>
	    <li><a href="http://planet.postgresql.org/">PostgreSQL</a></li>
	    <li><a href=""></a></li>
	  </ul></li>
	  <li>Subscriptions
          <ul class="level-two">
<li><a href="opml.xml">[OPML feed]</a></li>
<li><a href="http://thelivingpearl.com" title="python â Captain DeadBones Chronicles">"Captain DeadBones'' Chronicles"</a>
</li>
<li><a href="http://controlfd.com" title="Ctrl-F'd - Python">"Control F'd"</a>
</li>
<li><a href="" title="">"Eric Wu's Pythonfilter"</a>
</li>
<li><a href="https://metallapan.se/post/" title="Posts on Metallapan">"Fredrik HÃ¥Ã¥rd's Blaag"</a>
</li>
<li><a href="http://menno.io/" title="Menno's Musings">"Menno's Musings"</a>
</li>
<li><a href="http://mjtokelly.blogspot.com/search/label/Python" title="mokelly's devlog">"Michael J.T. O'Kelly"</a>
</li>
<li><a href="http://blogologue.com" title="Morphex's blogologue (Life, technology, music, politics, business, mental health and more)">"Morphex's Blogologue"</a>
</li>
<li><a href="http://speno.blogspot.com/" title="Speno's Pythonic Avocado">"Speno's Pythonic Avocado"</a>
</li>
<li><a href="http://ballingt.com" title="ballingt - Python">"Thomas Ballinger's Blog"</a>
</li>
<li><a href="https://william-os4y.livejournal.com/" title="William's journal">"William's Journal"</a>
</li>
<li><a href="" title="">2General</a>
</li>
<li><a href="http://dev.2degreesnetwork.com/" title="2degrees Developers">2degrees</a>
</li>
<li><a href="http://devblog.4teamwork.ch/" title="Category: Planet Python | Python Tales and Plone Stories">4teamwork</a>
</li>
<li><a href="" title="">A Little Bit of Python</a>
</li>
<li><a href="https://emptysqua.re/blog/category/python/index.xml" title="Python on A. Jesse Jiryu Davis">A. Jesse Jiryu Davis</a>
</li>
<li><a href="http://ablog.readthedocs.org" title="ABlog">ABlog for Sphinx</a>
</li>
<li><a href="https://engineering.aweber.com" title="Python â ENGINEERING @ AWEBER">AWeber Engineering</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=aahz" title="Aahz's Weblog">Aahz</a>
</li>
<li><a href="http://masnun.rocks/tags/python/index.xml" title="masnun.rocks()">Abu Ashraf Masnun</a>
</li>
<li><a href="http://techarttiki.blogspot.com/search/label/python" title="Tech Art Tiki">Adam Pletcher</a>
</li>
<li><a href="" title="">AdriÃ¡n Deccico</a>
</li>
<li><a href="https://agendaless.com/blog/?category=python" title="Agendaless Blog">Agendaless Consulting</a>
</li>
<li><a href="http://alstatr.blogspot.com/search/label/Python" title="Analysis with Programming">Al-Ahmadgaid Asaad</a>
</li>
<li><a href="http://marduk.ghost.io/" title="Python - Albert Hopkins">Albert Hopkins</a>
</li>
<li><a href="http://alecmunro.blogspot.com/search/label/python" title="Experiments in public">Alec Munro</a>
</li>
<li><a href="http://blog.aclark.net" title="Alex Clark's Blog - Posts in Python">Alex Clark</a>
</li>
<li><a href="" title="">Alex Gaynor</a>
</li>
<li><a href="http://alextechrants.blogspot.com/search/label/python" title="Alex's Tech Rants">Alex GrÃ¶nholm</a>
</li>
<li><a href="https://morozov.ca/" title="CTO with a CEO flavor">Alex Morozov</a>
</li>
<li><a href="https://smirnov-am.github.io/" title="smirnov-am tech blog - python">Alex Smirnov</a>
</li>
<li><a href="http://limi.net" title="On Python">Alexander Limi</a>
</li>
<li><a href="" title="">Alexandre Bourget</a>
</li>
<li><a href="http://www.alexconrad.org/search/label/python" title="Alex Conrad">Alexandre Conrad</a>
</li>
<li><a href="http://peadrop.com/blog" title="Alexandre Vassalotti Â» Python">Alexandre Vassalotti</a>
</li>
<li><a href="http://www.lexev.org/en/" title="Alexey Evseev's blog">Alexey Evseev</a>
</li>
<li><a href="" title="">Ali Afshar</a>
</li>
<li><a href="http://akaptur.github.com/" title="Category: python, | Allison Kaptur">Allison Kaptur</a>
</li>
<li><a href="" title="">Amir Rachum</a>
</li>
<li><a href="http://echorand.me/" title="Programming and Writing about it">Amit Saha</a>
</li>
<li><a href="http://blog.amjith.com" title="Brain Spill - python">Amjith Ramanujam</a>
</li>
<li><a href="https://www.amvtek.com/blog/" title="AmvTek blog">AmvTek</a>
</li>
<li><a href="http://anarc.at/tag/python-planet/" title="pages tagged python-planet">Anarcat</a>
</li>
<li><a href="http://pyswarm.blogspot.com/" title="Aeonic - from UML to Python">Anastasios Hatzis</a>
</li>
<li><a href="http://techtonik.rainforce.org/search/label/python" title="another day another vice another roll of the dice">Anatoly Techtonik</a>
</li>
<li><a href="http://aroberge.blogspot.com/" title="Only Python">Andre Roberge</a>
</li>
<li><a href="" title="">Andrea Grandi</a>
</li>
<li><a href="http://www.dalkescientific.com/writings/diary/index.html" title="Andrew Dalke's writings">Andrew Dalke</a>
</li>
<li><a href="" title="">Andriy Drozdyuk</a>
</li>
<li><a href="http://mindref.blogspot.com/search/label/python" title="Mind Reference">Andriy Kornatskyy</a>
</li>
<li><a href="http://kendriu.com/" title="kendriu writes...">Andrzej SkupieÅ</a>
</li>
<li><a href="http://mysql-python.blogspot.com/" title="MySQL-Python">Andy Dustman</a>
</li>
<li><a href="http://andy.terrel.us/" title="Codematician">Andy R. Terrel</a>
</li>
<li><a href="" title="">Andy Todd</a>
</li>
<li><a href="http://nerandell.github.io/" title="Ankit Chandawala">Ankit Chandawala</a>
</li>
<li><a href="http://annaraven.blogspot.com/search/label/python" title="Meandering streams of consciousness">Anna Martelli Ravenscroft</a>
</li>
<li><a href="http://codingweasel.blogspot.com/search/label/python" title="The Coding Weasel">Anthony Baxter</a>
</li>
<li><a href="http://kpoxit.blogspot.com/search/label/python" title="kpoxit">Anton Belyaev</a>
</li>
<li><a href="http://bobrochel.blogspot.com/search/label/python" title="Beaver notes">Anton Bobrov</a>
</li>
<li><a href="http://anweshadas.in/" title="Python - Law Explained India">Anwesha Das</a>
</li>
<li><a href="https://www.appneta.com/blog" title="python â AppNeta Blog | App and Network Performance Monitoring">AppNeta Blog</a>
</li>
<li><a href="http://lucumr.pocoo.org/" title="Armin Ronacher's Thoughts and Writings">Armin Ronacher</a>
</li>
<li><a href="http://arnavk.com/tags/python/" title="Python on Arnav Khare">Arnav Khare</a>
</li>
<li><a href="" title="">Ashish Dutt</a>
</li>
<li><a href="http://pyfunc.blogspot.com/search/label/python" title="Programmer's notebook">Ashish Vidyarthi</a>
</li>
<li><a href="" title="">Ashley Camba</a>
</li>
<li><a href="http://astrocodeschool.com/" title="Astro Code School">Astro Code School</a>
</li>
<li><a href="http://www.toolness.com/wp" title="Python â Toolness">Atul Varma -- Toolness</a>
</li>
<li><a href="http://www.codemakesmehappy.com/search/label/Python" title="Code Makes Me Happy">Audrey Roy Greenfeld</a>
</li>
<li><a href="http://www.automatingosint.com/blog" title="Python â Automating OSINT Blog">Automating OSINT</a>
</li>
<li><a href="http://baijum.blogspot.com/search/label/python" title="Baiju Muthukadan's Blog">Baiju Muthukadan</a>
</li>
<li><a href="http://gbtami.github.io" title="gbtami - Python">Bajusz TamÃ¡s</a>
</li>
<li><a href="http://importthis.tumblr.com/" title="HeldenTechniek">Balthazar Rouberol</a>
</li>
<li><a href="http://bangalore.python.org.in/" title="BangPypers">BangPypers</a>
</li>
<li><a href="" title="">Barbara Shaurette</a>
</li>
<li><a href="http://www.wefearchange.org/" title="Pumpichank">Barry Warsaw</a>
</li>
<li><a href="http://www.bedjango.com/planet/feed/" title="Bedjango posts">BeDjango</a>
</li>
<li><a href="" title="">Ben Bangert</a>
</li>
<li><a href="http://blog.codedstructure.net/search/label/python" title="Coded Structure">Ben Bass</a>
</li>
<li><a href="http://clusterbleep.net/blog" title="python â Ben Rousch's Cluster of Bleep">Ben Rousch</a>
</li>
<li><a href="http://mrben.co.uk/category/python/" title="mrben.co.uk - entries in the Python category">Ben Tappin</a>
</li>
<li><a href="http://pybites.blogspot.com/" title="Python bytes">Benjamin Peterson</a>
</li>
<li><a href="" title="">Benjamin W. Smith</a>
</li>
<li><a href="http://benjiyork.com/blog/" title="Benji York">Benji York</a>
</li>
<li><a href="http://zebert.blogspot.com/search/label/python" title="Paste here">Bertrand Mathieu</a>
</li>
<li><a href="http://www.thetaranights.com" title="The Tara Nights">Bhishan Bhandari</a>
</li>
<li><a href="" title="">Bill Mill</a>
</li>
<li><a href="http://news.open-bio.org/news/category/obf-projects/biopython/feed/atom/#respond" title="Comments on">BioPython News</a>
</li>
<li><a href="http://bitofcheese.blogspot.com/" title="Bit Of Cheese">Bit of Cheese</a>
</li>
<li><a href="" title="">BjÃ¶rn Tillenius</a>
</li>
<li><a href="http://www.blendedtechnologies.com" title="Blended Technologies">Blended Technologies</a>
</li>
<li><a href="https://tech.blue-yonder.com" title="Python â Blue Yonder Technology Blog">Blue Yonder Tech</a>
</li>
<li><a href="" title="">BlueBream</a>
</li>
<li><a href="" title="">BlueDynamics Alliance</a>
</li>
<li><a href="http://source.mihelac.org/categories/django/" title="code @ informatikaMihelac posts category feed">Bojan Mihelac</a>
</li>
<li><a href="http://blog.bradlucas.com/" title="Brad Lucas">Brad Lucas</a>
</li>
<li><a href="http://rhodesmill.org/brandon/" title="Python posts by Brandon Rhodes">Brandon Rhodes</a>
</li>
<li><a href="" title="">BreadcrumbsCollector</a>
</li>
<li><a href="https://python4dads.wordpress.com" title="Python for Dads">Brendan Scott</a>
</li>
<li><a href="http://snarky.ca/" title="Tall, Snarky Canadian">Brett Cannon</a>
</li>
<li><a href="http://briancurtin.com/blog/" title="Brian Curtin (Posts about python)">Brian Curtin</a>
</li>
<li><a href="https://ferringb.wordpress.com" title="python â ferringbs space">Brian Harring</a>
</li>
<li><a href="http://www.protocolostomy.com" title="Musings of an Anonymous Geek Â» Python">Brian Jones</a>
</li>
<li><a href="http://pythontesting.net" title="planet â Python Testing">Brian Okken</a>
</li>
<li><a href="http://nicoddemus.github.io/" title="Midnight Coding">Bruno Oliveira</a>
</li>
<li><a href="http://brunorocha.org/" title="BrunoRocha.org | Python web development | Tag pythonplanet | feed">Bruno Rocha</a>
</li>
<li><a href="" title="">Bryce Verdier</a>
</li>
<li><a href="https://www.caktusgroup.com/blog/tags/python/" title="Caktus Blog">Caktus Consulting Group</a>
</li>
<li><a href="https://calvinx.com" title="Python â Calvin's">Calvin Cheng</a>
</li>
<li><a href="http://techblog.ironfroggy.com/search/label/programming" title="Developing Upwards">Calvin Spealman</a>
</li>
<li><a href="https://carlchenet.com" title="planetpython â Carl Chenet's Blog">Carl Chenet</a>
</li>
<li><a href="http://pyright.blogspot.com/" title="pyright">Carl Trachte</a>
</li>
<li><a href="http://themindcaster.blogspot.com/search/label/python" title="The Mindcaster">Carlos Eduardo de Paula</a>
</li>
<li><a href="http://blog.delaguardia.com.mx/" title="Pyramid Schemes">Carlos de la Guardia</a>
</li>
<li><a href="http://eatthedots.blogspot.com/" title=":: eat the dots ::">Casey Duncan</a>
</li>
<li><a href="http://python-catalin.blogspot.com/search/label/python" title="python-catalin">Catalin George Festila</a>
</li>
<li><a href="http://catherinedevlin.blogspot.com/search/label/python" title="Catherine: pyOraGeek">Catherine Devlin</a>
</li>
<li><a href="" title="">Chad Cooper</a>
</li>
<li><a href="" title="">Chad Whitacre</a>
</li>
<li><a href="" title="Comments on:">Checking and Sharing</a>
</li>
<li><a href="http://blog.chrisarndt.de" title="Python â Christopher Arndt">Chris Arndt</a>
</li>
<li><a href="https://www.metachris.com/tags/python/" title="Chris Hager">Chris Hager</a>
</li>
<li><a href="http://blog.cdleary.com/category/python/" title="Honest to a Segfault: Python category syndication">Chris Leary</a>
</li>
<li><a href="http://chrismcavoy.org" title="Chris McAvoy Â» Python">Chris McAvoy</a>
</li>
<li><a href="http://plope.com" title="Chris McDonough's Python Feed">Chris McDonough</a>
</li>
<li><a href="http://chris-miles-writes-python.blogspot.com/" title="Chris Miles Writes Python">Chris Miles</a>
</li>
<li><a href="" title="">Chris Miller</a>
</li>
<li><a href="http://pyinformatics.blogspot.com/" title="PyInformatics: Bioinformatics and Data Science in Python">Chris Mitchell</a>
</li>
<li><a href="http://pbpython.com/" title="Practical Business Python">Chris Moffitt</a>
</li>
<li><a href="" title="">Chris Perkins</a>
</li>
<li><a href="http://ideas.offby1.net/" title="Ideas.Offby1 - python">Chris Rose</a>
</li>
<li><a href="https://chriswarrick.com/" title="Chris Warrick (Posts about Python)">Chris Warrick</a>
</li>
<li><a href="https://www.chrisbarra.me/" title="chrisbarra.me (Posts about python)">Christian Barra</a>
</li>
<li><a href="http://lipyrary.blogspot.com/" title="LiPyrary - Python for books">Christian Heimes</a>
</li>
<li><a href="" title="">Christian Joergensen</a>
</li>
<li><a href="" title="Kommentare zu:">Christian Scholz</a>
</li>
<li><a href="https://cito.github.io/tags/python/index.xml" title="Python on Seasoned &amp;amp; Agile">Christoph Zwerschke</a>
</li>
<li><a href="" title="">Christopher Denter</a>
</li>
<li><a href="" title="">Christopher Lenz</a>
</li>
<li><a href="" title="">Christopher Perkins</a>
</li>
<li><a href="http://www.evilchuck.com/search/label/python" title="EvilChuck">Chuck Thier</a>
</li>
<li><a href="http://www.redmountainsw.com/wordpress/archives/category/python/feed/atom/#respond" title="Comments on">Chui Tey</a>
</li>
<li><a href="http://csparpa.github.io/blog/" title="Vorsprung durch Informatik">Claudio Sparpaglione</a>
</li>
<li><a href="" title="">Cloudnumbers</a>
</li>
<li><a href="https://clusterhq.com" title="ClusterHQ Blog">ClusterHQ</a>
</li>
<li><a href="https://cobe.io/" title="Cobe (Posts about python)">Cobe.io</a>
</li>
<li><a href="http://CodeSnipers.com/?q=taxonomy/term/16/0" title="CodeSnipers.com - Python">CodeSnipers</a>
</li>
<li><a href="https://www.codementor.io/community/topic/python" title="Codementor Community">Codementor</a>
</li>
<li><a href="https://allanderek.github.io/" title="Coding Diet (python)">Coding Diet</a>
</li>
<li><a href="" title="">Collin Winter</a>
</li>
<li><a href="https://concretecloud.github.io/" title="Concrete Clouds">Concrete Clouds</a>
</li>
<li><a href="https://www.anaconda.com" title="Anaconda">Continuum Analytics Blog</a>
</li>
<li><a href="https://www.anaconda.com" title="Anaconda">Continuum Analytics News</a>
</li>
<li><a href="https://www.anaconda.com" title="Anaconda">Continuum Blog</a>
</li>
<li><a href="http://www.coresoftwaregroup.com/blog/topics/python" title="Topics">Core Software</a>
</li>
<li><a href="http://coreygoldberg.blogspot.com/search/label/python" title="Corey Goldberg">Corey Goldberg</a>
</li>
<li><a href="http://depressedoptimism.com/" title="Depressed Optimism">Corey Oordt</a>
</li>
<li><a href="http://cormoran-project.blogspot.com/" title="Cormoran Development Blog">Cormoran Project</a>
</li>
<li><a href="http://www.craigkerstiens.com/" title="Category: Python | Craig Kerstiens">Craig Kerstiens</a>
</li>
<li><a href="" title="">Creative Commons</a>
</li>
<li><a href="http://portablecommandline.blogspot.com/" title="Cross-Platform Command Line Tools">Cross-Platform Command Line Tools</a>
</li>
<li><a href="https://www.cubicweb.org/view?rql=Any%20X%2CT%2CCD%20ORDERBY%20CD%20DESC%20LIMIT%2020%20WHERE%20X%20is%20BlogEntry%2C%20X%20title%20T%2C%20X%20creation_date%20CD" title="Blog entries (CubicWeb's Forge) RSS Feed">CubicWeb</a>
</li>
<li><a href="https://ntguardian.wordpress.com" title="Python â Curtis Miller's Personal Website">Curtis Miller</a>
</li>
<li><a href="http://dspillustrations.com/" title="DSPIllustrations.com">DSPIllustrations.com</a>
</li>
<li><a href="http://dailytechvideo.com" title="Python â Daily Tech Video">Daily Tech Video (Python)</a>
</li>
<li><a href="" title="">Dalius Dobravolskas</a>
</li>
<li><a href="http://dfwpython.blogspot.com/" title="DFW Pythoneers">Dallas Fort Worth Pythoneers</a>
</li>
<li><a href="http://www.damian.oquanta.info/" title="Damian's blog (Posts about python)">DamiÃ¡n Avila</a>
</li>
<li><a href="http://damyanon.net" title="Python â Damyan's Blog">Damyan Bogoev</a>
</li>
<li><a href="https://late.am/" title="late.am - python">Dan Crosta</a>
</li>
<li><a href="http://strombrg.blogspot.com/search/label/Python" title="Dan on Python">Dan Stromberg</a>
</li>
<li><a href="https://dbader.org/blog/tags/python" title="dbader.org - Python">Daniel Bader</a>
</li>
<li><a href="http://www.endlesslycurious.com" title="Endlessly Curious">Daniel Brown</a>
</li>
<li><a href="http://danielnouri.org/notes" title="Daniel Nouri's Blog">Daniel Nouri</a>
</li>
<li><a href="http://pydanny.com/" title="pydanny">Daniel Roy Greenfeld</a>
</li>
<li><a href="" title="">Dariusz Suchojad</a>
</li>
<li><a href="" title="">Data Community DC</a>
</li>
<li><a href="http://www.dataschool.io/" title="Python - Data School">Data School</a>
</li>
<li><a href="http://www.datacamp.com/community/blog" title="DataCamp Blog">DataCamp</a>
</li>
<li><a href="https://www.dataquest.io/blog/" title="-- python">Dataquest</a>
</li>
<li><a href="http://dabeaz.blogspot.com/" title="Dabeaz">Dave Beazley</a>
</li>
<li><a href="" title="">Dave Behnke</a>
</li>
<li><a href="http://hwit.org/" title="Here's What I Think">Dave Haynes</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=goodger" title="David Goodger's Weblog">David Goodger</a>
</li>
<li><a href="" title="">David Grant</a>
</li>
<li><a href="" title="">David J C Beach</a>
</li>
<li><a href="http://thppython.blogspot.com/" title="thp on Python">David Janes</a>
</li>
<li><a href="http://www.drmaciver.com" title="Python â David R. MacIver">David MacIver</a>
</li>
<li><a href="https://dmalcolm.livejournal.com/" title="dmalcolm">David Malcolm</a>
</li>
<li><a href="" title="">David Marte</a>
</li>
<li><a href="" title="">David Stanek</a>
</li>
<li><a href="http://www.szotten.com/david/" title="davidszotten">David Szotten</a>
</li>
<li><a href="http://codeinthehole.com/writing/tagged/python/" title="Writing on python | David Winterbottom">David Winterbottom</a>
</li>
<li><a href="http://davidemoro.blogspot.com/search/label/planetpython" title="Davide Moro">Davide Moro</a>
</li>
<li><a href="http://daftpython.blogspot.com/" title="daftpython">Davy Mitchell</a>
</li>
<li><a href="http://davywybiral.blogspot.com/" title="Davy Wybiral">Davy Wybiral</a>
</li>
<li><a href="" title="">Dazza</a>
</li>
<li><a href="http://degizmo.com" title="DeGizmo">DeGizmo</a>
</li>
<li><a href="http://makkalot-opensource.blogspot.com/search/label/python" title="Open Sourced">Denis Kurov</a>
</li>
<li><a href="" title="">Derrick Petzold</a>
</li>
<li><a href="" title="">Dethe Elza</a>
</li>
<li><a href="" title="">Diane Trout</a>
</li>
<li><a href="http://www.diego-garcia.info/" title="Diego Garcia - Python">Diego Garcia</a>
</li>
<li><a href="https://www.djangoproject.com/weblog/" title="The Django weblog">Django Weblog</a>
</li>
<li><a href="http://djangoweekly.com/blog/feed/" title="DjangoWeekly Blog">Django Weekly</a>
</li>
<li><a href="http://django.zone/" title="Django Zone latests posts">Django Zone</a>
</li>
<li><a href="" title="">Djangocon</a>
</li>
<li><a href="" title="">Djangofeed</a>
</li>
<li><a href="http://djangostars.com/blog/" title="Python - Django Stars">Djangostars</a>
</li>
<li><a href="http://doingmathwithpython.github.io/" title="Doing Math with Python">Doing Math with Python</a>
</li>
<li><a href="https://doughellmann.com/blog" title="python â Doug Hellmann">Doug Hellmann</a>
</li>
<li><a href="http://douglatornell.ca/blog" title="Doug Latornell">Doug Latornell</a>
</li>
<li><a href="http://www.dougalmatthews.com/" title="Dougal Matthews - python">Dougal Matthews</a>
</li>
<li><a href="" title="">Douglas Napoleone</a>
</li>
<li><a href="https://www.dreamhost.com/blog" title="DreamHost.blog">DreamHost</a>
</li>
<li><a href="http://oubiwann.blogspot.com/search/label/python" title="Electric Duncan">Duncan McGreggor</a>
</li>
<li><a href="http://buchuki.com" title="Dustyâs Diverse Domain">Dusty Phillips</a>
</li>
<li><a href="https://easygui.wordpress.com" title="EasyGui">EasyGUI</a>
</li>
<li><a href="http://edcrewe.blogspot.com/search/label/python" title="Ed Crewe">Ed Crewe</a>
</li>
<li><a href="" title="">Ed Taekema</a>
</li>
<li><a href="http://edreamleo.blogspot.com/search/label/python" title="Explorations">Edward K. Ream</a>
</li>
<li><a href="http://pythonthusiast.pythonblogs.com/230_pythonthusiast" title="Pythonthusiast">Eko S. Wibowo</a>
</li>
<li><a href="https://eli.thegreenplace.net/" title="Eli Bendersky's website">Eli Bendersky</a>
</li>
<li><a href="http://touilleman.xyz/" title="touilleMan.xyz - Python">Emmanuel Leblond</a>
</li>
<li><a href="http://eniramltd.github.io/devblog/" title="Eniram developers' blog - python">Eniram Ltd.</a>
</li>
<li><a href="http://blog.enthought.com" title="Enthought Blog">Enthought</a>
</li>
<li><a href="https://examachine.net/blog" title="Python â log.examachine.net">Eray Ãzkural (examachine)</a>
</li>
<li><a href="" title="">Eric Florenzano</a>
</li>
<li><a href="http://ericholscher.com" title="Eric Holscher - Surfing in Kansas - Posts tagged python">Eric Holscher</a>
</li>
<li><a href="http://www.marsja.se" title="Python â Erik Marsja">Erik Marsja</a>
</li>
<li><a href="http://etienned.github.io/" title="Etienneâs blog (Python)">Etienne Desautels</a>
</li>
<li><a href="http://blog.europython.eu/" title="EuroPython Blog">EuroPython</a>
</li>
<li><a href="http://www.europython-society.org/" title="EuroPython Society">EuroPython Society</a>
</li>
<li><a href="" title="">Evan Fosmark</a>
</li>
<li><a href="http://blog.python-eve.org/" title="Eve News">Eve REST Framework</a>
</li>
<li><a href="http://eventh.tumblr.com/" title="Eventh">Even Wiik Thomassen</a>
</li>
<li><a href="http://evennia.blogspot.com/" title="Griatch's Evennia musings">Evennia</a>
</li>
<li><a href="http://interactivepython.org/courselib/feed/everyday.rss" title="Everyday Python">Everyday Python</a>
</li>
<li><a href="http://www.snowboardingcoder.com/django" title="Experienced Django">Experienced Django</a>
</li>
<li><a href="http://pydev.blogspot.com/" title="PyDev adventures">Fabio Zadrozny</a>
</li>
<li><a href="https://majid.info/blog" title="Python â Fazal Majid's low intensity weblog">Fazal Majid</a>
</li>
<li><a href="http://en.ig.ma/notebook/tag/python/" title="Filip Wasilewski (en.ig.ma): Newest Articles Tagged 'python'">Filip Wasilewski</a>
</li>
<li><a href="http://blog.filipesaraiva.info" title="planet-python â Filipe Saraiva's blog">Filipe Saraiva</a>
</li>
<li><a href="http://pyinsci.blogspot.com/" title="Python in Science">Flavio Coelho</a>
</li>
<li><a href="https://blog.flaper87.com/" title="Developer's black hole - python">Flavio Percoco</a>
</li>
<li><a href="http://blog.devork.be/search/label/python" title="devork">Floris Bruynooghe</a>
</li>
<li><a href="" title="">Francisco Souza</a>
</li>
<li><a href="http://fwierzbicki.blogspot.com/" title="Frank Wierzbicki's Weblog">Frank Wierzbicki</a>
</li>
<li><a href="http://raspberry-python.blogspot.com/search/label/english" title="Raspberry Pi Python Adventures">FranÃ§ois Dion</a>
</li>
<li><a href="http://feeding.cloud.geek.nz/tags/python/" title="pages tagged python">FranÃ§ois Marier</a>
</li>
<li><a href="http://fridh.nl/" title="FRidh's blog">Frederik Rietdijk</a>
</li>
<li><a href="http://effbot.org/" title="online.effbot.org">Fredrik Lundh</a>
</li>
<li><a href="http://www.frompythonimportpodcast.com" title="From Python Import Podcast">From Python Import Podcast</a>
</li>
<li><a href="https://www.fullstackpython.com/" title="Full Stack Python">Full Stack Python</a>
</li>
<li><a href="http://gael-varoquaux.info/" title="GaÃ«l Varoquaux">Ga&#235;l Varoquaux</a>
</li>
<li><a href="http://blog.tshirtman.fr/" title="/dev/blah">Gabriel Pettier</a>
</li>
<li><a href="http://blog.galvanize.com" title="python â Galvanize">Galvanize</a>
</li>
<li><a href="http://blog.extracheese.org/" title="Extra Cheese">Gary Bernhardt</a>
</li>
<li><a href="http://www.garyrobinson.net/" title="Gary Robinson's Rants">Gary Robinson</a>
</li>
<li><a href="http://thegarywilson.com/blog/" title="Gary Wilson Jr. - Latest blog entries tagged with: python">Gary Wilson</a>
</li>
<li><a href="http://gavrie.github.io/" title="Category: python | Gavrie's Blog">Gavrie Philipson</a>
</li>
<li><a href="" title="">Geek Scrap</a>
</li>
<li><a href="https://geert.vanderkelen.org/" title="Geert JM Vanderkelen">Geert Vanderkelen</a>
</li>
<li><a href="" title="">Gene Campbell</a>
</li>
<li><a href="" title="">Georg Brandl</a>
</li>
<li><a href="https://compiletoi.net/" title="python - Compile-toi toi mÃªme">Georges Dubus</a>
</li>
<li><a href="http://ghaandeeonit.tumblr.com/" title="Ghaandee on IT">Ghaandee on IT</a>
</li>
<li><a href="http://grodola.blogspot.com/search/label/python" title="Random writings and thoughts about Python">Giampaolo Rodola</a>
</li>
<li><a href="" title="">Gilad Raphaelli</a>
</li>
<li><a href="http://giuliofidente.com/" title="Giulio Fidente - python">Giulio Fidente</a>
</li>
<li><a href="http://hackermojo.com" title="Glenn Fanxman's python feed">Glenn Franxman</a>
</li>
<li><a href="https://glyph.twistedmatrix.com/" title="Deciphering Glyph">Glyph Lefkowitz</a>
</li>
<li><a href="http://paddy3118.blogspot.com/" title="Go deh!">Go Deh</a>
</li>
<li><a href="https://godjango.com" title="GoDjango Screencasts and Tutorials">GoDjango</a>
</li>
<li><a href="https://blog.gocept.com" title="python â gocept blog">Gocept Weblog</a>
</li>
<li><a href="http://blog.godson.in/search/label/Python" title="Core Dump -- Godson Gera's Blog">Godson Gera</a>
</li>
<li><a href="" title="">GonÃ§alo Margalho</a>
</li>
<li><a href="http://www.curiousvenn.com" title="Python â Curious Venn">Graeme Cross</a>
</li>
<li><a href="http://blog.dscpl.com.au/" title="Graham Dumpleton">Graham Dumpleton</a>
</li>
<li><a href="https://gramps-project.org/introduction-WP" title="Programming â Gramps">Gramps</a>
</li>
<li><a href="http://defrobnication.blogspot.com/search/label/python" title="Defrobnication">Grant Baillie</a>
</li>
<li><a href="https://www.wisdomandwonder.com" title="Python â Wisdom and Wonder">Grant Rettke</a>
</li>
<li><a href="https://gc-taylor.com/" title="Greg Taylor">Greg Taylor</a>
</li>
<li><a href="" title="">Greg Turnquist</a>
</li>
<li><a href="" title="">Greg Wilson</a>
</li>
<li><a href="http://www.answermysearches.com" title="Answer My Searches Â» Python">Gregory Pinero</a>
</li>
<li><a href="http://agiletesting.blogspot.com/search/label/python" title="Agile Testing">Grig Gheorghiu</a>
</li>
<li><a href="http://blog.fizyk.net.pl/" title="Cases (python)">Grzegorz ÅliwiÅski</a>
</li>
<li><a href="" title="">Guido Kollerie</a>
</li>
<li><a href="http://neopythonic.blogspot.com/" title="Neopythonic">Guido van Rossum</a>
</li>
<li><a href="" title="">Guilherme Toti</a>
</li>
<li><a href="https://gustavonarea.net" title="Python â Gustavo on Software Development">Gustavo Narea</a>
</li>
<li><a href="https://blog.labix.org" title="Labix Blog">Gustavo Niemeyer</a>
</li>
<li><a href="" title="">Guyon Moree</a>
</li>
<li><a href="http://pycloud.blogspot.com/search/label/python" title="On Clouds, Poems, Python and more...">GÃ¶khan Sever</a>
</li>
<li><a href="http://blog.hannosch.eu/search/label/python" title="..: hannosch :..">Hanno Schlichting</a>
</li>
<li><a href="http://blog.vmfarms.com/search/label/python" title="VM Farms">Hany Fahim</a>
</li>
<li><a href="" title="">Harrison Erd</a>
</li>
<li><a href="http://www.nomadblue.com/blog/python/" title="Nomadblue - We are your CTO on-demand">Hector Garcia</a>
</li>
<li><a href="http://www.heikkitoivonen.net/blog" title="California Dreams Â» Python">Heikki Toivonen</a>
</li>
<li><a href="http://python-in-the-lab.blogspot.com/search/label/Python" title="Python in the Lab">Hernan Grecco</a>
</li>
<li><a href="https://hilarymason.com" title="Hi. I'm Hilary Mason.">Hilary Mason</a>
</li>
<li><a href="https://holgerkrekel.net" title="metaprogramming and politics">Holger Krekel</a>
</li>
<li><a href="http://www.holger-peters.de/" title="Data Voyage - Blog of Holger Peters - Python Feed">Holger Peters</a>
</li>
<li><a href="http://www.huyng.com/" title="Huy Nguyen">Huy Nguyen</a>
</li>
<li><a href="https://hynek.me/" title="Hynek Schlawack">Hynek Schlawack</a>
</li>
<li><a href="https://www.adampalmer.me/iodigitalsec" title="Python â IO Digital Sec">IO Digital Sec</a>
</li>
<li><a href="" title="">Ian Bicking</a>
</li>
<li><a href="http://ianozsvald.com" title="Python â Entrepreneurial Geekiness">Ian Ozsvald</a>
</li>
<li><a href="http://www.ilian.io/feed/" title="Between engineering and real life">Ilian Iliev</a>
</li>
<li><a href="" title="">Imaginary Landscape</a>
</li>
<li><a href="http://importpython.com/blog/feed/" title="ImportPython Blog">Import Python</a>
</li>
<li><a href="http://intellimath.bitbucket.org/blog/" title="Intellimath blog (python)">Intellimath blog</a>
</li>
<li><a href="http://inventwithpython.com/blog" title="The âInvent with Pythonâ Blog">Invent with Python</a>
</li>
<li><a href="https://www.talaikis.com" title="python | Talaikis">Investing using Python</a>
</li>
<li><a href="" title="">Ionel Cristian Maries</a>
</li>
<li><a href="" title="">Iraj Jelodari</a>
</li>
<li><a href="http://ironpython-urls.blogspot.com/" title="IronPython URLs">IronPython-URLs</a>
</li>
<li><a href="http://ishan.chattopadhyaya.com/blog" title="Chatman Diary">Ishan Chattopadhyaya</a>
</li>
<li><a href="" title="">Isotoma</a>
</li>
<li><a href="http://fruch.github.io" title="- Miscellaneous">Israel Fruchter</a>
</li>
<li><a href="http://www.codewithoutrules.com/" title="Code Without Rules">Itamar Turner Trauring</a>
</li>
<li><a href="" title="">Ivan Krstic</a>
</li>
<li><a href="http://jackdied.blogspot.com/" title="Jack Diederich's Python Blog">Jack Diederich</a>
</li>
<li><a href="https://streamhacker.com" title="python â StreamHacker">Jacob Perkins</a>
</li>
<li><a href="https://wrongsideofmemphis.wordpress.com" title="english â Wrong Side of Memphis">Jaime Buelta</a>
</li>
<li><a href="http://www.datadependence.com" title="python â Data Dependence">Jamal Moir</a>
</li>
<li><a href="http://shortcircuit.net.au/~prologic/blog/" title="James Mills's Blog">James Mills</a>
</li>
<li><a href="http://listbot.org/" title="[ listbot.org - Python feed]">James Polera</a>
</li>
<li><a href="" title="">James Tauber</a>
</li>
<li><a href="" title="">Jan-Carel Brand</a>
</li>
<li><a href="https://janusworx.com/" title="python - Janusworx">Janusworx</a>
</li>
<li><a href="" title="">Jared Forsyth</a>
</li>
<li><a href="http://blog.jarrodmillman.com/search/label/python" title="Jarrod Millman">Jarrod Millman</a>
</li>
<li><a href="" title="">Jason Baker</a>
</li>
<li><a href="http://jasonamyers.github.io//" title="The N00b Developer">Jason Meyers</a>
</li>
<li><a href="http://www.bigjason.com/tags/python.html" title="BigJason.com posts tagged python.">Jason Webb</a>
</li>
<li><a href="http://blog.jaysinh.com/" title="Jaysinhâs own heed">Jaysinh Shukla</a>
</li>
<li><a href="https://ganwell.github.io/" title="Duck! Another blag incoming! - python">Jean-Louis Fuchs</a>
</li>
<li><a href="http://as.ynchrono.us/search/label/python" title="Interesting Things, Largely Python and Twisted Related">Jean-Paul Calderone</a>
</li>
<li><a href="" title="Comments on:">Jeet Sukumaran</a>
</li>
<li><a href="http://jeethurao.com/blog" title="Jeethu's Blog">Jeethu Rao</a>
</li>
<li><a href="http://jbisbee.blogspot.com/search/label/python" title="Change for the Better">Jeff Bisbee</a>
</li>
<li><a href="http://jeffbradberry.com/" title="Jeff Bradberry">Jeff Bradberry</a>
</li>
<li><a href="http://inre.dundeemt.com" title="Python â In Re:">Jeff Hinrichs</a>
</li>
<li><a href="https://jeffknupp.com" title="Python Programming">Jeff Knupp</a>
</li>
<li><a href="" title="">Jeff McNeil</a>
</li>
<li><a href="http://www.thoughtamps.info/" title="ThoughtAmps">Jeff Rush</a>
</li>
<li><a href="http://griddlenoise.blogspot.com/search/label/python" title="Griddle Noise">Jeff Shell</a>
</li>
<li><a href="" title="">Jeff Winkler</a>
</li>
<li><a href="http://greenash.net.au/thoughts/topics/python/" title="GreenAsh: thoughts filed in Python">Jeremy Epstein</a>
</li>
<li><a href="http://jeremyhylton.blogspot.com/" title="Jeremy Hylton: Inconceivable">Jeremy Hylton</a>
</li>
<li><a href="" title="">Jessie Anderson</a>
</li>
<li><a href="http://www.zyasoft.com/pythoneering" title="Front Range Pythoneering">Jim Baker</a>
</li>
<li><a href="http://j1mfulton.blogspot.com/" title="Jim Fulton">Jim Fulton</a>
</li>
<li><a href="http://feetup.org/blog/dev/python" title="Feet up! : dev/python">Jim Hughes</a>
</li>
<li><a href="https://pyrseas.wordpress.com" title="Taming Serpents and Pachyderms">Joe Abbate</a>
</li>
<li><a href="https://joepitz.wordpress.com" title="Python â Joe Pitz â Technology Blog">Joe Pitz</a>
</li>
<li><a href="https://blogs.gnome.org/johan" title="Python â Johan Dahlin">Johan Dahlin</a>
</li>
<li><a href="" title="">John Anderson</a>
</li>
<li><a href="http://clouddbs.blogspot.com/search/label/python" title="Python Cloud">John Burns</a>
</li>
<li><a href="https://www.johndcook.com/blog" title="Python â John D. Cook">John Cook</a>
</li>
<li><a href="" title="">John Gagliardi</a>
</li>
<li><a href="http://eigenhombre.com" title="Forays into Simplicity - Python">John Jacobsen</a>
</li>
<li><a href="" title="">John Paulett</a>
</li>
<li><a href="http://www.indelible.org/ink/" title="Indelible Ink">Jon Parise</a>
</li>
<li><a href="http://hashbeat.blogspot.com/search/label/Python" title="hashbeat">Jonathan Dobson</a>
</li>
<li><a href="http://spyced.blogspot.com/search/label/python" title="Spyced">Jonathan Ellis</a>
</li>
<li><a href="http://blog.jonharrington.org/" title="python - Jonathan Harrington">Jonathan Harrington</a>
</li>
<li><a href="http://tartley.com" title="Python â tartley.com">Jonathan Hartley</a>
</li>
<li><a href="https://cleverdevil.io/external/bootstrap/assets/css/bootstrap-theme.min.css" title="">Jonathan LaCour</a>
</li>
<li><a href="http://jonathanstreet.com/" title="Posts tagged python at jonathanstreet.com">Jonathan Street</a>
</li>
<li><a href="" title="">Jordan Dimov</a>
</li>
<li><a href="http://www.metaklass.org/" title="Jorge Niedbalski">Jorge Niedbalski</a>
</li>
<li><a href="http://puentesarr.in" title="Tracking My Route Â» Python">Jorge Puente SarrÃ­n</a>
</li>
<li><a href="http://blog.jorgenschaefer.de/search/label/Python" title="Jorgenâs Weblog">Jorgen SchÃ¤fer</a>
</li>
<li><a href="https://joao.in/blog/category/python/" title="JoÃ£o's latest posts on python">JoÃ£o Laia</a>
</li>
<li><a href="https://pythonmonopoly.wordpress.com" title="Python Monopoly">Juan Manuel Contreras</a>
</li>
<li><a href="" title="">Juan Rivas</a>
</li>
<li><a href="http://www.juanrodriguezmonti.com.ar/tags/python/" title="Python on Blog">Juan RodrÃ­guez Monti</a>
</li>
<li><a href="http://www.nixtu.info/search/label/python" title="Nixtu">Juho VepsÃ¤lÃ¤inen</a>
</li>
<li><a href="https://julien.danjou.info/blog/" title="jd:/dev/blog">Julien Danjou</a>
</li>
<li><a href="http://dev-tricks.net" title="Python â {Dev Tricks}">Julien Palard</a>
</li>
<li><a href="http://beauty-of-imagination.blogspot.com/search/label/python" title="Imagination">Julien Tayon</a>
</li>
<li><a href="http://juripakaste.fi/cgi/pyblosxom.cgi" title="Juri Pakaste - The Blog">Juri Pakaste</a>
</li>
<li><a href="http://blog.pythonisito.com/" title="Just a little Python">Just a little Python</a>
</li>
<li><a href="https://hackercodex.com/" title="Hacker Codex - python">Justin Mayer</a>
</li>
<li><a href="" title="">Kai Diefenbach</a>
</li>
<li><a href="https://lautaportti.wordpress.com" title="Kai Lautaportti">Kai Lautaportti</a>
</li>
<li><a href="" title="">Kamon Ayeva</a>
</li>
<li><a href="" title="">Karen Rustad</a>
</li>
<li><a href="https://kate-editor.org" title="python â Kate | Get an Edge in Editing">Kate Editor</a>
</li>
<li><a href="http://therealkatie.net/blog" title="Latest Python entries from The Real Katie">Katie Cunningham</a>
</li>
<li><a href="http://nuitka.net/" title="Nuitka Home (Python)">Kay Hayen</a>
</li>
<li><a href="http://fiber-space.de/wordpress" title="Python â Trails in a Langscape">Kay Schluehr</a>
</li>
<li><a href="http://kbyanc.blogspot.com/search/label/python" title="The Other Kelly Yancey">Kelly Yancey</a>
</li>
<li><a href="" title="">Kenneth Reitz</a>
</li>
<li><a href="http://powertwenty.com/blog" title="Python â Toes to the Edge">Kevin Dahlhausen</a>
</li>
<li><a href="http://www.blueskyonmars.com" title="Python â Blue Sky On Mars">Kevin Dangoor</a>
</li>
<li><a href="" title="">Kiwi PyCon</a>
</li>
<li><a href="http://konryd.blogspot.com/" title="Most recent call">Konrad Delong</a>
</li>
<li><a href="https://koodaamo.wordpress.com" title="python â Koodaamo">Koodaamo</a>
</li>
<li><a href="http://kracekumar.com/" title="Random stream">Kracekumar Ramaraju</a>
</li>
<li><a href="https://cosmicpercolator.com" title="Python â KristjÃ¡n's Cosmic Percolator">KristjÃ¡n Valur JÃ³nsson</a>
</li>
<li><a href="http://justaworldaway.com" title="python â Just a World Away">Kriti Godey</a>
</li>
<li><a href="" title="">Krys Wilken</a>
</li>
<li><a href="https://krzysztofzuraw.com/" title="Krzysztof Å»uraw">Krzysztof Å»uraw</a>
</li>
<li><a href="https://gofedora.com" title="Tech Stuff Â» Python">Kulbir Saini</a>
</li>
<li><a href="http://farmdev.com/thoughts/on/3/python/" title="Farmdev: Thoughts on Python">Kumar McMillan</a>
</li>
<li><a href="https://www.kunxi.org/blog/" title="Kun Xi">Kun Xi</a>
</li>
<li><a href="http://kurtgrandis.com/blog" title="Kurt Grandis Â» PythonKurt Grandis">Kurt Grandis</a>
</li>
<li><a href="https://kushaldas.in/" title="Kushal Das">Kushal Das</a>
</li>
<li><a href="http://charlesnagy.info" title="python â Charles Nagy">KÃ¡roly Nagy</a>
</li>
<li><a href="http://shuttlethread.com/blog/aggregator-python" title="Shuttle Thread Blog">Laurence Rowe</a>
</li>
<li><a href="http://www.laurentluce.com" title="Python â Laurent Luce's Blog">Laurent Luce</a>
</li>
<li><a href="" title="">Laurent Szyster</a>
</li>
<li><a href="" title="">Lawrence Oluyede</a>
</li>
<li><a href="" title="">Lee Braiden</a>
</li>
<li><a href="https://hypatia.ca" title="python â hypatia dot ca">Leigh Honeywell</a>
</li>
<li><a href="https://regebro.wordpress.com" title="python â Lennart Regebro: Python, Plone, Web">Lennart Regebro</a>
</li>
<li><a href="https://leovt.wordpress.com" title="Python â leovt">Leonhard Vogt</a>
</li>
<li><a href="" title="">Lesscode.org</a>
</li>
<li><a href="http://levipy.com" title="Python - Articles">Levi VelÃ¡zquez</a>
</li>
<li><a href="" title="">Lightning Fast CMS</a>
</li>
<li><a href="http://www.getlfs.com/blog" title="All news about LFS">Lightning Fast Shop</a>
</li>
<li><a href="http://howto.lintel.in" title="python â Lintel Technologies Blog">Lintel Technologies</a>
</li>
<li><a href="" title="">Lion Kimbro</a>
</li>
<li><a href="" title="">Lionel Tan</a>
</li>
<li><a href="" title="">Logilab</a>
</li>
<li><a href="http://blog.lowkster.com/" title="Lowkster - Pythonly yours">Low Kian Seong</a>
</li>
<li><a href="http://codingandlinux.blogspot.com/search/label/python" title="Coding and Linux">Luca Botti</a>
</li>
<li><a href="http://blog.gmludo.eu/search/label/python" title="Ludovic Gasc (GMLudo)">Ludovic Gasc</a>
</li>
<li><a href="" title="">Ludovico Fischer</a>
</li>
<li><a href="http://blog.sendapatch.se" title="blog.sendapatch.se">Ludvig Ericson</a>
</li>
<li><a href="http://lewk.org/blog" title="l e w k . o r g">Luke Macken</a>
</li>
<li><a href="https://lukeplant.me.uk/" title="Luke Plant's home page - Python">Luke Plant</a>
</li>
<li><a href="http://www.machinalis.com/blog/" title="Blog | Machinalis">Machinalis</a>
</li>
<li><a href="http://lostinjit.blogspot.com/" title="Lost in JIT">Maciej Fijalkowsk</a>
</li>
<li><a href="" title="">Mahdi Yusuf</a>
</li>
<li><a href="http://sedimental.org/tagged/python/" title="Sedimental - python">Mahmoud Hashemi</a>
</li>
<li><a href="https://maltheborch.com/rss?tags=python" title="Malthe Borch's Homepage:
      A Blog About Computer Systems
      and Language Design">Malthe Borch</a>
</li>
<li><a href="" title="">Manuel de la Pena Saenz</a>
</li>
<li><a href="" title="">Marc Garcia</a>
</li>
<li><a href="http://mkerins.ghost.io/" title="python - Marc Kerins' Blog">Marc Kerins</a>
</li>
<li><a href="http://www.malemburg.com/" title="All Things Python">Marc-AndrÃ© Lemburg</a>
</li>
<li><a href="http://www.imgonline.com.ua/eng/" title="">Marcin KuÅºmiÅski</a>
</li>
<li><a href="http://www.grulic.org.ar/~mdione/glob//tags/python/" title="tags/python">Marcos Dione</a>
</li>
<li><a href="" title="">Marcus Whybrow</a>
</li>
<li><a href="http://pysnippet.blogspot.com/search/label/Python" title="PySnippet">Mario Boikov</a>
</li>
<li><a href="http://mg.pov.lt/blog/" title="Random notes from mg">Marius Gedminas</a>
</li>
<li><a href="http://www.stochasticgeometry.ie" title="Python â Stochastic Geometry">Mark Dennehy</a>
</li>
<li><a href="http://shed-skin.blogspot.com/" title="Shed Skin - A (restricted) Python-to-C++ Compiler">Mark Dufour</a>
</li>
<li><a href="https://blogs.gnome.org/markmc" title="python â Mark McLoughlin">Mark McLoughlin</a>
</li>
<li><a href="http://pywinauto.blogspot.com/" title="mark.py">Mark McMahon</a>
</li>
<li><a href="http://www.learningpython.com" title="learning python">Mark Mruss</a>
</li>
<li><a href="" title="">Mark Paschal</a>
</li>
<li><a href="" title="">Mark Ramm</a>
</li>
<li><a href="http://markos.gaivo.net/articles/" title="A notch above a monkey">Marko Samastur</a>
</li>
<li><a href="http://blog.startifact.com/" title="Secret Weblog (planetpython)">Martijn Faassen</a>
</li>
<li><a href="http://www.zopatista.com" title="Zopatista">Martijn Pieters</a>
</li>
<li><a href="" title="">Martin Blais</a>
</li>
<li><a href="https://martinfitzpatrick.name/" title="Martin Fitzpatrick">Martin Fitzpatrick</a>
</li>
<li><a href="" title="">Mathieu Fenniak</a>
</li>
<li><a href="http://txzone.net" title="Txzone Â» Planet Python">Mathieu Virbel</a>
</li>
<li><a href="http://mysqlmusings.blogspot.com/search/label/python" title="MySQL Musings">Mats Kindahl</a>
</li>
<li><a href="http://matt.goodall.me/" title="Random Acts of Senseless Blogging">Matt Goodall</a>
</li>
<li><a href="http://hairysun.com/" title="Hairy Sun - Python">Matt Harrison</a>
</li>
<li><a href="" title="">Matt Reid</a>
</li>
<li><a href="" title="">Matt Wilkes</a>
</li>
<li><a href="https://matthewrocklin.com/blog/" title="Working notes by Matthew Rocklin - Python">Matthew Rocklin</a>
</li>
<li><a href="http://www.stealthcopter.com/blog" title="python â Stealthcopter">Matthew Rollings</a>
</li>
<li><a href="http://blog.tplus1.com" title="Comments on:">Matthew Wilson</a>
</li>
<li><a href="http://copypasteprogrammer.blogspot.com/search/label/python" title="The copy/paste programmer">Mattias BrÃ¤ndstrÃ¶m</a>
</li>
<li><a href="http://mauveweb.co.uk/" title="Mauveweb">Mauveweb</a>
</li>
<li><a href="https://art-lemon.com/blog" title="">Max Ischenko</a>
</li>
<li><a href="http://blog.klymyshyn.com/search/label/python" title="Django and other">Max Klymyshyn</a>
</li>
<li><a href="" title="">Michael Bayer</a>
</li>
<li><a href="http://beckerfuffle.com/" title="Category: python | Beckerfuffle">Michael Becker</a>
</li>
<li><a href="" title="">Michael Crute</a>
</li>
<li><a href="http://droettboom.com/" title="Boom! Michael Droettboom's blog">Michael Droettboom</a>
</li>
<li><a href="http://www.voidspace.org.uk/python/weblog/index.shtml" title="The Voidspace Techie Blog">Michael Foord</a>
</li>
<li><a href="" title="">Michael Hudson</a>
</li>
<li><a href="" title="">Michael Martinez</a>
</li>
<li><a href="https://micknelson.wordpress.com" title="python â Something-driven development">Michael Nelson</a>
</li>
<li><a href="" title="">Michael Schurter</a>
</li>
<li><a href="" title="">Michael Sparks</a>
</li>
<li><a href="" title="">Michael Watkins</a>
</li>
<li><a href="https://mousebender.wordpress.com" title="Mousebender">Michal Kwiatkowski</a>
</li>
<li><a href="https://bultrowicz.com" title="Butlablog - Posts tagged Python">MichaÅ Bultrowicz</a>
</li>
<li><a href="" title="">MichaÅ DomaÅski</a>
</li>
<li><a href="http://www.artima.com/weblogs/index.jsp?blogger=micheles" title="Michele Simionato's Weblog">Michele Simionato</a>
</li>
<li><a href="http://firsttimeprogrammer.blogspot.com/search/label/python" title="The Beginner Programmer">Michy Alice</a>
</li>
<li><a href="http://blog.vrplumber.com/b/categories/snaking/" title="blog.vrplumber.com - Entries for the category Snaking">Mike C. Fletcher</a>
</li>
<li><a href="http://www.blog.pythonlibrary.org" title="The Mouse Vs. The Python">Mike Driscoll</a>
</li>
<li><a href="http://python-academy.blogspot.com/" title="Python Academy">Mike MÃ¼ller</a>
</li>
<li><a href="http://mikenaberezny.com" title="Python â Mike Naberezny">Mike Naberezny</a>
</li>
<li><a href="" title="">Mike Pirnat</a>
</li>
<li><a href="" title="">Mikeal Rogers</a>
</li>
<li><a href="http://kmike.ru/" title="kmike.ru">Mikhail Korobov</a>
</li>
<li><a href="https://opensourcehacker.com" title="python â Open Source Hacker">Mikko Ohtamaa</a>
</li>
<li><a href="" title="">Mitch Chapman</a>
</li>
<li><a href="http://www.elastician.com/" title="Elastician">Mitchell Garnaat</a>
</li>
<li><a href="http://pythonbyexample.blogspot.com/" title="PythonByExample">Mitya Sirenef</a>
</li>
<li><a href="http://montrealpython.org/feed/" title="MontrÃ©al-Python">Montreal Python User Group</a>
</li>
<li><a href="http://www.nidelven-it.no/weblogs/hosting" title="Nidelven IT - All about Python, Zope &amp;amp; Plone - and Open Source!">Morten W Petersen</a>
</li>
<li><a href="" title="">Moshe Zadka</a>
</li>
<li><a href="https://www.moyaproject.com/blog/" title="Moya Project Blog">Moya Project</a>
</li>
<li><a href="https://blog.mozilla.org/webdev" title="Python â Mozilla Web Development">Mozilla Web Development</a>
</li>
<li><a href="https://muharem.wordpress.com" title="Muharem Hrnjadovic">Muharem Hrnjadovic</a>
</li>
<li><a href="http://www.thesamet.com" title="python â Nadav Samet's Blog">Nadav Samet</a>
</li>
<li><a href="" title="">Nadia Alramli</a>
</li>
<li><a href="https://learnpython.wordpress.com" title="Learn Python">Naomi Ceder</a>
</li>
<li><a href="http://www.natan.termitnjak.net//blog" title="NMB's Development Blog">Natan Zabkar</a>
</li>
<li><a href="" title="">Nathan Lemoine</a>
</li>
<li><a href="http://neckbeardrepublic.com/" title="Neckbeard Republic - bite-sized python screencasts">Neckbeard Republic</a>
</li>
<li><a href="https://nedbatchelder.com/blog" title="Ned Batchelder's blog">Ned Batchelder</a>
</li>
<li><a href="http://python.ca/nas/log/" title="Neil Schemenauer's Web Log">Neil Schemenauer</a>
</li>
<li><a href="" title="">Ng Pheng Siong</a>
</li>
<li><a href="http://blog.alienretro.com" title="Python â alienretrÃ´">Nicholas Amorim</a>
</li>
<li><a href="" title="">Nicholas PiÃ«l</a>
</li>
<li><a href="http://www.curiousefficiency.org" title="Curious Efficiency (python)">Nick Coghlan</a>
</li>
<li><a href="http://www.craig-wood.com/nick/articles" title="Nick Craig-Wood's Articles">Nick Craig-Wood</a>
</li>
<li><a href="http://blog.efford.org/" title="Pythoneering">Nick Efford</a>
</li>
<li><a href="http://nickjanetakis.blogspot.com/search/label/python" title="Nick Janetakis">Nick Janetakis</a>
</li>
<li><a href="https://nicolaiarocci.com/tags/python/" title="Python on Nicola Iarocci">Nicola Iarocci</a>
</li>
<li><a href="https://nicdumz.fr/blog" title="Nicolas Dumazet - Blog">Nicolas Dumazet</a>
</li>
<li><a href="http://www.nicosphere.net" title="Nico Sphere">Nicolas Paris</a>
</li>
<li><a href="http://nigelb.me/" title="Nigel Babu">Nigel Babu</a>
</li>
<li><a href="" title="">Nikhil Gopal</a>
</li>
<li><a href="https://getnikola.com/" title="Nikola">Nikola</a>
</li>
<li><a href="" title="">Noah Gift</a>
</li>
<li><a href="https://www.numfocus.org" title="NumFOCUS">NumFOCUS</a>
</li>
<li><a href="http://www.obeythetestinggoat.com/" title="Obey the Testing Goat!">Obey the Testing Goat</a>
</li>
<li><a href="https://andrich.blog/tags/python/" title="Python on Oliver Andrich">Oliver Andrich</a>
</li>
<li><a href="http://www.omahapython.org/blog" title="Omaha Python Users Group">Omaha Python Users Group</a>
</li>
<li><a href="http://omar.toomuchcookies.net" title="Omar Abo-Namous Â» python">Omar Abo-Namous</a>
</li>
<li><a href="http://ondrejcertik.blogspot.com/search/label/python" title="OndÅej ÄertÃ­k">Ond&#345;ej &#268;ert&iacute;k</a>
</li>
<li><a href="http://blog.openhatch.org" title="python â The OpenHatch blog">OpenHatch Python posts</a>
</li>
<li><a href="http://orestis.gr/tags/python/" title="Posts tagged with python">Orestis Markou</a>
</li>
<li><a href="https://lab.free-and-safe.org" title="Free and Safe in Cyberspace">Partecs</a>
</li>
<li><a href="http://blog.pathwright.com/" title="Pathwright Blog">Pathwright</a>
</li>
<li><a href="http://weblog.patrice.ch/" title="Patrice's Weblog">Patrice Neff</a>
</li>
<li><a href="https://pp.com.mx/blog" title="Python â My blog">Patricio Paez</a>
</li>
<li><a href="http://www.patricksoftwareblog.com" title="python â Patrick's Software Blog">Patrick Kennedy</a>
</li>
<li><a href="http://pkaudio.blogspot.com/search/label/python" title="pkaudio">Patrick Stinson</a>
</li>
<li><a href="http://news.e-scribe.com/tag/python" title="E-Scribe News : a programmer's blog : python">Paul Bissex</a>
</li>
<li><a href="https://pauleveritt.wordpress.com" title="Chatterbox, Reloaded">Paul Everitt</a>
</li>
<li><a href="http://www.logarithmic.net/pfh/blog_code" title="pfh's blog: code section">Paul Harrison</a>
</li>
<li><a href="https://codebright.wordpress.com" title="Python â Codebright's Blog">Paul Redman</a>
</li>
<li><a href="" title="">Paulo Nuin</a>
</li>
<li><a href="http://pfertyk.me/" title="PaweÅ Fertyk">PaweÅ Fertyk</a>
</li>
<li><a href="https://www.paypal-engineering.com" title="python â PayPal Engineering Blog">PayPal Engineering Blog</a>
</li>
<li><a href="http://pedrokroger.net" title="Python â Pedro Kroger">Pedro Kroger</a>
</li>
<li><a href="http://pedro.valelima.com" title="Underwater log feed for python">Pedro Lima</a>
</li>
<li><a href="" title="">Pete Hunt</a>
</li>
<li><a href="" title="">Petecode</a>
</li>
<li><a href="https://www.peterbe.com/rss.xml" title="Peterbe.com">Peter Bengtsson</a>
</li>
<li><a href="http://petereisentraut.blogspot.com/search/label/Python" title="Peter Eisentraut's Blog">Peter Eisentraut</a>
</li>
<li><a href="https://neovox.advancedmagic.de" title="Python â Advanced Magic">Peter FankhÃ¤nel</a>
</li>
<li><a href="" title="">Peter Halliday</a>
</li>
<li><a href="https://push.cx" title="Python â Push cx">Peter Harkins</a>
</li>
<li><a href="http://peter-hoffmann.com" title="Peter Hoffmann - Python">Peter Hoffmann</a>
</li>
<li><a href="" title="">Peter Parente</a>
</li>
<li><a href="" title="">Petro Verkhogliad</a>
</li>
<li><a href="http://www.philhassey.com/blog" title="python â Phil Hassey">Phil Hassey</a>
</li>
<li><a href="http://dunderboss.blogspot.com/search/label/python" title="__boss__">Philip Jenvey</a>
</li>
<li><a href="http://blog.pyspoken.com" title="Python Spoken Here">Philip Semanchuk</a>
</li>
<li><a href="https://philikon.wordpress.com" title="Python â philiKON â a journal">Philipp von Weitershausen</a>
</li>
<li><a href="http://base-art.net/" title="Base-Art - Philippe Normand">Philippe Normand</a>
</li>
<li><a href="http://dirtsimple.org/programming/index.html" title="PJE on Programming">Phillip J. Eby</a>
</li>
<li><a href="http://sites.google.com/feeds/content/site/pydatalog" title="Posts of Python Blog">Pierre Carbonnelle</a>
</li>
<li><a href="http://mancoosi.org/~abate/tags/python/feed" title="Pietro Abate homepage - python">Pietro Abate</a>
</li>
<li><a href="" title="">Podcast.__init__</a>
</li>
<li><a href="http://polyglot.ninja" title="Python â Polyglot.Ninja()">Polyglot.Ninja()</a>
</li>
<li><a href="https://ironboundsoftware.com/blog" title="Python â Possibility and Probability">Possbility and Probability</a>
</li>
<li><a href="http://pradeepgowda.com" title="pradeepgowda.com">Pradeep Gowda</a>
</li>
<li><a href="http://flicker-technical.blogspot.com/search/label/Python" title="Hit n Trail">Pranav Pandey</a>
</li>
<li><a href="http://www.shutupandship.com/search/label/python" title="Shut Up and Ship">Praveen Gollakota</a>
</li>
<li><a href="https://programandociencia.com" title="English â Programando CiÃªncia">Programando CiÃªncia</a>
</li>
<li><a href="https://www.programiz.com/python-programming/rss.xml" title="Python feed">Programiz</a>
</li>
<li><a href="https://programmingideaswithjake.wordpress.com" title="Python â Programming Ideas With Jake">Programming Ideas With Jake</a>
</li>
<li><a href="" title="">PrzemysÅaw KoÅodziejczyk</a>
</li>
<li><a href="" title="">PyAMF Blog</a>
</li>
<li><a href="http://pybit.es/" title="PyBites">PyBites</a>
</li>
<li><a href="" title="">PyCarolinas</a>
</li>
<li><a href="https://blog.jetbrains.com/pycharm" title="PyCharm Blog">PyCharm</a>
</li>
<li><a href="http://pycon.blogspot.com/" title="The PyCon Blog">PyCon</a>
</li>
<li><a href="" title="">PyCon 2008 on YouTube</a>
</li>
<li><a href="http://2016.pycon-au.org" title="PyCon Australia 2016 News">PyCon Australia</a>
</li>
<li><a href="http://pl.pycon.org/2015/en/rss-aktualnosci" title="PyCon PL 2015">PyCon PL Conference</a>
</li>
<li><a href="" title="">PyCon Podcast</a>
</li>
<li><a href="https://pune.pycon.org/blog/" title="PyCon Pune Blog">PyCon Pune</a>
</li>
<li><a href="" title="">PyLadies</a>
</li>
<li><a href="http://morepypy.blogspot.com/" title="PyPy Status Blog">PyPy Development</a>
</li>
<li><a href="https://pytennessee.tumblr.com/" title="PyTennessee 2017">PyTennessee</a>
</li>
<li><a href="https://www.pytexas.org/2015/blog" title="PyTexas Blog">PyTexas</a>
</li>
<li><a href="" title="">Pylons News Feed</a>
</li>
<li><a href="" title="">Pypix</a>
</li>
<li><a href="https://python4kids.brendanscott.com" title="Python Tutorials for Kids 13+">Python 4 Kids</a>
</li>
<li><a href="" title="">Python 411 Podcast</a>
</li>
<li><a href="http://python-advocacy.blogspot.com/" title="About Python Advocacy">Python Advocacy</a>
</li>
<li><a href="http://blog.pythonanywhere.com/" title="PythonAnywhere News">Python Anywhere</a>
</li>
<li><a href="http://pythonbytes.fm/" title="Python Bytes">Python Bytes</a>
</li>
<li><a href="http://pythondata.com" title="Python Data">Python Data</a>
</li>
<li><a href="http://www.pythondiary.com/" title="Python Diary latest blog entries">Python Diary</a>
</li>
<li><a href="http://www.pythondoeswhat.com/" title="Python Does What?!?">Python Does What?!</a>
</li>
<li><a href="https://blogs.msdn.microsoft.com/pythonengineering" title="Python Engineering at Microsoft">Python Engineering at Microsoft</a>
</li>
<li><a href="http://blog.python.org/" title="Python Insider">Python Insider</a>
</li>
<li><a href="" title="">Python News</a>
</li>
<li><a href="" title="">Python Open Mike</a>
</li>
<li><a href="http://www.pyptug.org/" title="PYthon Piedmont Triad User Group">Python Piedmont Triad User Group</a>
</li>
<li><a href="http://pyfound.blogspot.com/" title="Python Software Foundation News">Python Software Foundation</a>
</li>
<li><a href="" title="">Python Sprints</a>
</li>
<li><a href="http://pythonsweetness.tumblr.com/" title="python sweetness">Python Sweetness</a>
</li>
<li><a href="" title="">Python Testing Cookbook</a>
</li>
<li><a href="http://python-groups.blogspot.com/" title="Happenings in Python Usergroups">Python User Groups</a>
</li>
<li><a href="http://pythonforbiologists.com" title="Python â Python for biologists">Python for biologists</a>
</li>
<li><a href="http://python-karan.blogspot.com/" title="Python on Karan">Python on Karan</a>
</li>
<li><a href="http://developerblog.myo.com/" title="Python - The Lab">Python with Myo</a>
</li>
<li><a href="http://pythonxynews.blogspot.com/" title="Python(x,y)">Python(x,y) News</a>
</li>
<li><a href="http://pythonclub.com.br/" title="PythonClub">PythonClub - A Brazilian collaborative blog about Python</a>
</li>
<li><a href="mailto:hoge@example.com" title="">PythonThreads</a>
</li>
<li><a href="http://pythonology.blogspot.com/" title="Pythonology">Pythonology</a>
</li>
<li><a href="http://ptspts.blogspot.com/search/label/planet-python" title="pts.blog">PÃ©ter SzabÃ³</a>
</li>
<li><a href="http://blog.zsoldosp.eu" title="Do. Reflect. Learn. Repeat!">PÃ©ter Zsoldos</a>
</li>
<li><a href="http://www.bitdance.com/blog" title="Dancing With the Bits">R David Murray</a>
</li>
<li><a href="https://blog.rmotr.com/tagged/python?source=rss----2e274f91448--python" title="Python in rmotr.com on Medium">RMOTR</a>
</li>
<li><a href="http://threebean.org/blog" title="[three]Bean">Ralph Bean</a>
</li>
<li><a href="http://www.ralph-heinkel.com/blog" title="Ralph's Blog">Ralph Heinkel</a>
</li>
<li><a href="http://blog.ram.rachum.com/" title="Ram's blog">Ram Rachum</a>
</li>
<li><a href="" title="">Ramana</a>
</li>
<li><a href="http://blog.randell.ph" title="Python â Randell's Blog">Randell Benavidez</a>
</li>
<li><a href="http://randlet.com/blog/rss/" title="Randle Taylor's Blog Feed">Randle Taylor</a>
</li>
<li><a href="http://randyzwitch.com" title="Python â randyzwitch.com">Randy Zwitch</a>
</li>
<li><a href="https://rhettinger.wordpress.com" title="Deep Thoughts by Raymond Hettinger">Raymond Hettinger</a>
</li>
<li><a href="https://rayli.net/blog" title="Planet Python â rayli.net">Raymond Li</a>
</li>
<li><a href="https://reachtim.com/" title="ReachTim">Reach Tim</a>
</li>
<li><a href="https://realpython.com/" title="Real Python">Real Python</a>
</li>
<li><a href="http://reinout.vanrees.org/weblog/" title="Reinout van Rees' weblog">Reinout van Rees</a>
</li>
<li><a href="http://renesd.blogspot.com/search/label/python" title="making apps, making webs.">Rene Dudfield</a>
</li>
<li><a href="https://blog.lerner.co.il" title="Python â Lerner Consulting Blog">Reuven Lerner</a>
</li>
<li><a href="http://rgomes-info.blogspot.com/search/label/python" title="Notes, Experiences and Opinions by Richard Gomes">Richard Gomes</a>
</li>
<li><a href="http://www.mechanicalcat.net/richard/log/Python" title="Richard Jones' Log: Python">Richard Jones</a>
</li>
<li><a href="http://posted-stuff.blogspot.com/search/label/python" title="Stuff What I Posted">Richard Tew</a>
</li>
<li><a href="http://blog.the-moon.net/search/label/python" title="The Moon Research Blog">Richard Wall</a>
</li>
<li><a href="http://rickardlindberg.me" title="Rickard's personal homepage: latest posts tagged python">Rickard Lindberg</a>
</li>
<li><a href="http://blog.cakebread.info/search/label/python" title="Rob Cakebread">Rob Cakebread</a>
</li>
<li><a href="http://www.robg3d.com" title="python â RobG3d">Rob Galanakis</a>
</li>
<li><a href="" title="">Rob Golding</a>
</li>
<li><a href="" title="">Rob Miller</a>
</li>
<li><a href="http://www.aminus.org/blogs/index.php?blog=2" title="The Hand of FuManChu - Categories: Python, Cation, CherryPy, Dejavu, WHELPS, WSGI">Robert Brewer</a>
</li>
<li><a href="https://rbtcollins.wordpress.com" title="Python â Code happens">Robert Collins</a>
</li>
<li><a href="" title="">Robert Lujo</a>
</li>
<li><a href="" title="">Robert Picard</a>
</li>
<li><a href="http://rz.scale-it.pl/" title="Robert Zaremba Scale it blog - python posts">Robert Zaremba</a>
</li>
<li><a href="https://ralsina.me/" title="Lateral Opinion (Posts about python)">Roberto Alsina</a>
</li>
<li><a href="http://wxPython.org/blog" title="wxForty-Two">Robin Dunn</a>
</li>
<li><a href="http://www.theatreofnoise.com/search/label/dev" title="theatre of noise">Robin Parmar</a>
</li>
<li><a href="http://blog.rtwilson.com" title="Python â Robin's Blog">Robin Wilson</a>
</li>
<li><a href="http://www.upfrontsystems.co.za" title="Where I'm calling from">Roche Compaan</a>
</li>
<li><a href="" title="">Rocky Burt</a>
</li>
<li><a href="https://linil.wordpress.com" title="">Rodrigo AraÃºj</a>
</li>
<li><a href="" title="">Rok Garbas</a>
</li>
<li><a href="http://www.imankulov.name/" title="Roman Imankulov weblog (python)">Roman Imankulov</a>
</li>
<li><a href="https://www.rosehosting.com/blog" title="python â RoseHosting.com Blog">RoseHosting Blog</a>
</li>
<li><a href="https://ruslanspivak.com/" title="Ruslan's Blog">Ruslan Spivak</a>
</li>
<li><a href="http://www.asciiarmor.com/" title="AsciiArmor">Ryan Cox</a>
</li>
<li><a href="" title="">Ryan Tomayko</a>
</li>
<li><a href="http://slott-softwarearchitect.blogspot.com/search/label/python" title="S.Lott-Software Architect">S. Lott</a>
</li>
<li><a href="https://pyhelper.wordpress.com" title="Python Helper">S. R. Krishnan</a>
</li>
<li><a href="http://www.sdjournal.com/archives/categories/languages/python/" title="SDJournal posts in Python category">SDJournal</a>
</li>
<li><a href="http://pythonide.blogspot.com/" title="SPE IDE - Stani's Python Editor">SPE Weblog</a>
</li>
<li><a href="http://blog.stxnext.com/" title="STX Next blog">STX Next</a>
</li>
<li><a href="https://salimfadhley.wordpress.com" title="Salim Fadhley">Salim Fadhley</a>
</li>
<li><a href="http://www.bitshaq.com" title="ååçé¦èãä¼ããããããããæ¥è¨">Salman Haq</a>
</li>
<li><a href="" title="">Samuel Sutch</a>
</li>
<li><a href="https://sandipanweb.wordpress.com" title="Python â sandipanweb">Sandipan Dey</a>
</li>
<li><a href="http://sandrotosi.blogspot.com/search/label/Python" title="Sandro Tosi">Sandro Tosi</a>
</li>
<li><a href="" title="">Sayan Chowdhury</a>
</li>
<li><a href="" title="">Scripting the web with Python</a>
</li>
<li><a href="http://seanmcgrath.blogspot.com/search/label/python" title="Sean McGrath">Sean McGrath</a>
</li>
<li><a href="" title="">Sean Reifschneider</a>
</li>
<li><a href="http://www.chesnok.com/daily" title="python">Selena Deckelmann</a>
</li>
<li><a href="https://semaphoreci.com/community/tutorials" title="Semaphore CI Community Tutorials on Python">Semaphore Community</a>
</li>
<li><a href="http://www.xtoinfinity.com/" title="Senthil Kumaran's thoughts. (Posts about python)">Senthil Kumaran</a>
</li>
<li><a href="https://blog.serverdensity.com" title="Python â Server Density Blog">Server Density</a>
</li>
<li><a href="http://www.jjinux.com/search/label/python" title="JJinuxLand">Shannon -jj Behrens</a>
</li>
<li><a href="http://shiningpanda.com/" title="ShiningPanda">ShiningPanda</a>
</li>
<li><a href="http://tech.shopkick.com/tagged/python/" title="Shopkick Tech - python">Shopkick Tech Blog</a>
</li>
<li><a href="" title="">Shriphani Palakodety</a>
</li>
<li><a href="http://simeonfranklin.com/blog/" title="simeonfranklin.com python feed">Simeon Franklin</a>
</li>
<li><a href="http://simeonvisser.com/" title="Simeon Visser (python)">Simeon Visser</a>
</li>
<li><a href="" title="aboutsimon.com">Simon</a>
</li>
<li><a href="http://www.brunningonline.net/simon/blog/" title="Small Values of Cool">Simon Brunning</a>
</li>
<li><a href="" title="">Simon Willison</a>
</li>
<li><a href="http://entitycrisis.blogspot.com/search/label/Python" title="Entity Crisis">Simon Wittber</a>
</li>
<li><a href="https://simpleisbetterthancomplex.com/" title="Simple is Better Than Complex">Simple is Better Than Complex</a>
</li>
<li><a href="https://www.softformance.com" title="python | SOFTFORMANCE">SoftFormance</a>
</li>
<li><a href="http://spikeekips.tumblr.com/" title="ëëê²ìì´">Spike ekipS</a>
</li>
<li><a href="http://spyder-ide.blogspot.com/" title="spyder">Spyder IDE</a>
</li>
<li><a href="https://www.j5int.com" title="j5 International">St James Software Development</a>
</li>
<li><a href="http://stackabuse.com/" title="python - Stack Abuse">Stack Abuse</a>
</li>
<li><a href="http://stacks.11craft.com/" title="Stacks">Stacks</a>
</li>
<li><a href="https://www.starzel.de/blog/starzel-de-python-blog" title="Starzel.de Python Blog">Starzel.de</a>
</li>
<li><a href="http://blog.behnel.de/" title="Stefans Welt (Posts about Planet Python)">Stefan Behnel</a>
</li>
<li><a href="http://blog.garage-coding.com/" title="Feed tagged PYTHON">Stefan Petrea</a>
</li>
<li><a href="https://stefan.sofa-rockers.org/" title="Stefan Scherfke - python">Stefan Scherfke</a>
</li>
<li><a href="https://jodal.no/" title="Stein Magnus Jodal">Stein Magnus Jodal</a>
</li>
<li><a href="https://pythonconquerstheuniverse.wordpress.com" title="Python Conquers The Universe">Stephen Ferg</a>
</li>
<li><a href="http://stevedower.id.au/blog" title="Python â Steve Dower">Steve Dower</a>
</li>
<li><a href="http://holdenweb.blogspot.com/search/label/python" title="For Some Value of &quot;Magic&quot;">Steve Holden</a>
</li>
<li><a href="http://rh0dium.blogspot.com/search/label/python" title="My Life">Steven Klass</a>
</li>
<li><a href="http://blog.lost-theory.org/" title="lost theorem Â» python">Steven Kryskalla</a>
</li>
<li><a href="" title="">Steven Wilcox</a>
</li>
<li><a href="" title="">Stijn Debrouwere</a>
</li>
<li><a href="https://storiesinmypocket.com/articles/" title="Stories in My Pocket about Python">Stories in My Pocket</a>
</li>
<li><a href="http://www.turingfinance.com" title="Python â Turing Finance">Stuart Gordon Reid</a>
</li>
<li><a href="https://wirtel.be/tags/python/" title="Python on Stephane Wirtel">StÃ©phane Wirtel</a>
</li>
<li><a href="http://sumith1896.github.io//" title="Sumith">Sumith - Blog about SymPy/Python</a>
</li>
<li><a href="https://www.swaroopch.com/" title="Swaroop C H">Swaroop C H</a>
</li>
<li><a href="" title="">SwiftStack</a>
</li>
<li><a href="https://ict.swisscom.ch" title="Swisscom ICT">Swisscom ICT</a>
</li>
<li><a href="http://www.defuze.org" title="python â defuze.org">Sylvain Hellegouarch</a>
</li>
<li><a href="https://talkpython.fm/" title="Talk Python To Me - Python conversations for passionate developers">Talk Python to Me</a>
</li>
<li><a href="https://ziade.org/" title="Fetchez le Python">Tarek Ziade</a>
</li>
<li><a href="http://blog.tedmiston.com/" title="Python - Taylor D. Edmiston">Taylor Edmiston</a>
</li>
<li><a href="" title="">Teach Me Python</a>
</li>
<li><a href="" title="">Techiediaries - Django</a>
</li>
<li><a href="http://www.sauria.com/blog" title="Ted Leung on the Air Â» python">Ted Leung</a>
</li>
<li><a href="" title="">Ted Nyman</a>
</li>
<li><a href="" title="">Teemu Harju</a>
</li>
<li><a href="http://myownhat.blogspot.com/search/label/python" title="My Own Hat">Tennessee Leeuwenburg</a>
</li>
<li><a href="http://terriko.dreamwidth.org/" title="terriko">Terri Oda</a>
</li>
<li><a href="http://blogs.fluidinfo.com/terry" title="python â Terry Jones">Terry Jones</a>
</li>
<li><a href="http://www.swordstyle.com/blog2" title="Can You Defeat My Swordstyle? Â» Python">Terry Peppers</a>
</li>
<li><a href="http://testandcode.com/" title="Test and Code">Test and Code</a>
</li>
<li><a href="http://blog.aicookbook.com" title="Python â The Artificial Intelligence Cookbook">The Artificial Intelligence Cookbook</a>
</li>
<li><a href="https://changelog.com" title="Python â Changelog">The Changelog</a>
</li>
<li><a href="http://www.thedatascientist.de" title="The Data Scientist Â» python">The Data Scientist</a>
</li>
<li><a href="http://blog.thedigitalcatonline.com/" title="The Digital Cat">The Digital Cat</a>
</li>
<li><a href="http://blog.dowski.com/" title="The Occasional Occurence">The Occasional Occurrence</a>
</li>
<li><a href="http://blog.parcon.opengroove.org/" title="The Parcon Blog">The Parcon Blog</a>
</li>
<li><a href="http://pythonpapers.blogspot.com/" title="The Python Papers">The Python Papers</a>
</li>
<li><a href="https://threeofwands.com/" title="python - The Three of Wands">The Three of Wands</a>
</li>
<li><a href="http://avelino.xxx/python-en/" title="Thiago Avelino">Thiago Avelino</a>
</li>
<li><a href="http://www.tibonihoo.net/blog/en" title="python â tlog">Thibauld Nion</a>
</li>
<li><a href="http://wordaligned.org" title="Word Aligned">Thomas Guest</a>
</li>
<li><a href="http://thomas.apestaart.org/log" title="Python â thomas.apestaart.org">Thomas Vander Stichele</a>
</li>
<li><a href="http://www.tech-foo.net/" title="Tech Foo">Thomi Richards</a>
</li>
<li><a href="https://www.tibobeijen.nl/tags/python/" title="Python on TBNL">Tibo Beijen</a>
</li>
<li><a href="https://timgilbert.wordpress.com" title="Python â Tim Gilbert's Blog">Tim Gilbert</a>
</li>
<li><a href="http://ramblings.tjg.org.uk/" title="Moderate Realism (Posts about Python)">Tim Golden</a>
</li>
<li><a href="http://kokorice.org/" title="Fresh from the plantation">Tim Knapp</a>
</li>
<li><a href="http://www.timlesher.com/search/label/python" title="Aftermarket Pipes">Tim Lesher</a>
</li>
<li><a href="" title="">Tim Parkin</a>
</li>
<li><a href="http://shisaa.jp/" title="shisaa.jp (python)">Tim van der Linden</a>
</li>
<li><a href="" title="">Titus Brown</a>
</li>
<li><a href="http://journal.thobe.org/" title="Wardrobe strength">Tobias Ivarsson</a>
</li>
<li><a href="https://thewebhaswon.wordpress.com" title="python â The Rising Tide">Tom Christie</a>
</li>
<li><a href="http://sys-exit.blogspot.com/search/label/python" title="import sys / sys.exit()">Tomasz Ducin</a>
</li>
<li><a href="http://pragmaticpython.com" title="python â Pragmatic Python">Tomasz FrÃ¼boes</a>
</li>
<li><a href="" title="">TomaÅ¾ Muraus</a>
</li>
<li><a href="http://tomerfiliba.com/blog" title="tomerfiliba.com | Python Blog">Tomer Filiba</a>
</li>
<li><a href="https://tonybreyal.wordpress.com" title="Python â Consistently Infrequent">Tony Breyal</a>
</li>
<li><a href="http://better-inter.net/tag/python/" title="Making the internet a better place - python">Torsten Engelbrecht</a>
</li>
<li><a href="https://anonbadger.wordpress.com" title="Python â The Ramblings">Toshio Kuratomi</a>
</li>
<li><a href="http://technicaldiscovery.blogspot.com/search/label/python" title="Technical Discovery">Travis Oliphant</a>
</li>
<li><a href="http://treyhunner.com/" title="Trey Hunner - Python">Trey Hunner</a>
</li>
<li><a href="" title="">Troy Melhase</a>
</li>
<li><a href="http://www.tryton.org/" title="Tryton">Tryton News</a>
</li>
<li><a href="https://www.turnkeylinux.org/taxonomy/term/103/0" title="python">Turnkey Linux</a>
</li>
<li><a href="http://labs.twistedmatrix.com/" title="Twisted Matrix Laboratories">Twisted Matrix Labs</a>
</li>
<li><a href="" title="">Uche Ogbuji</a>
</li>
<li><a href="" title="">United Coders</a>
</li>
<li><a href="http://vsbabu.org/mt/" title="vsbabu.org">V.S. Babu</a>
</li>
<li><a href="https://prayogshala.wordpress.com" title="Python â PrayogShala">Varun Nischal</a>
</li>
<li><a href="http://jugad2.blogspot.com/search/label/python" title="jugad2 - Vasudev Ram on software innovation">Vasudev Ram</a>
</li>
<li><a href="http://pymolurus.blogspot.com/" title="Python molurus (the Indian Python)">Vinay Sajip</a>
</li>
<li><a href="http://plumberjack.blogspot.com/" title="Plumber Jack">Vinay Sajip (Logging)</a>
</li>
<li><a href="http://www.hardcoded.net/articles/" title="Hardcoded Software articles (python)">Virgil Dupras</a>
</li>
<li><a href="" title="">Viva La Chipperfish</a>
</li>
<li><a href="https://nvbn.github.io" title="nvbn blog - python">Vladimir Iakolev</a>
</li>
<li><a href="http://vperic.blogspot.com/search/label/Twisted" title="Vlada's technical blog">Vladimir PeriÄ</a>
</li>
<li><a href="https://www.wallix.com" title="WALLIX">Wallix</a>
</li>
<li><a href="" title="">Washington Times OpenSource</a>
</li>
<li><a href="http://pieceofpy.com" title="Piece Of Py(thon)">Wayne Witzel</a>
</li>
<li><a href="http://www.weeklypython.chat/" title="Weekly Python Chat">Weekly Python Chat</a>
</li>
<li><a href="http://python-weekly.blogspot.com/" title="# python weekly reports">Weekly Python StackOverflow Report</a>
</li>
<li><a href="https://1stvamp.org/tag/python" title="1stvamp.org">Wes Mason</a>
</li>
<li><a href="http://wescpy.blogspot.com/search/label/python" title="Core Python Programming">Wesley Chun</a>
</li>
<li><a href="http://www.wiggy.net" title="Wichert Akkerman">Wichert Akkerman</a>
</li>
<li><a href="http://bluesock.org/~willkg/blog/" title="Will's blog (Posts about python)">Will Kahn-Greene</a>
</li>
<li><a href="https://www.willmcgugan.com/blog/tech/" title="Tech">Will McGugan</a>
</li>
<li><a href="http://willpython.blogspot.com/" title="Will's Python Notebook">Will Pierce</a>
</li>
<li><a href="http://blog.minchin.ca/" title="Minchin.ca - python">William Minchin</a>
</li>
<li><a href="http://foolish-assertions.blogspot.com/search/label/python" title="Foolish Assertions">William Reade</a>
</li>
<li><a href="http://hoardedhomelyhints.dietbuddha.com/search/label/python" title="Hoarded Homely Hints">William Thompson</a>
</li>
<li><a href="http://wingware.com/" title="Wingware">Wingware Blog</a>
</li>
<li><a href="http://wingware.com/" title="Wingware News">Wingware News</a>
</li>
<li><a href="" title="">Wolfram Kriesing</a>
</li>
<li><a href="https://wraithan.net" title="python â wraithan's blog">Wraithan</a>
</li>
<li><a href="https://wyattbaldwin.com" title="planet python â Wyatt Baldwin">Wyatt Baldwin</a>
</li>
<li><a href="" title="">Xavier Spriet</a>
</li>
<li><a href="" title="">Yaco</a>
</li>
<li><a href="https://tech.blog.aknin.name" title="python â NIL: .to write(1) ~ help:about">Yaniv Aknin</a>
</li>
<li><a href="http://www.ylarrivee.com" title="Yann LarrivÃ©e Â» python">Yann LarrivÃ©e</a>
</li>
<li><a href="" title="">Yannick Gingras</a>
</li>
<li><a href="https://pythontips.com" title="Python Tips">Yasoob Khalid</a>
</li>
<li><a href="https://yoongkang.com/" title="Yoong Kang Lim">Yoong Kang Lim</a>
</li>
<li><a href="https://uberpython.wordpress.com" title="python â Ubershmekel's Uberpython Pythonlog">Yuval Greenfield</a>
</li>
<li><a href="" title="">Zachary Voase</a>
</li>
<li><a href="http://za.github.io/" title="Aurora Borealis">Zaki Akhmad</a>
</li>
<li><a href="https://zato.io/blog" title="Zato Blog">Zato Blog</a>
</li>
<li><a href="https://medium.com/@ZeroDB_?source=rss-a0aa5238b2d8------2" title="Stories by ZeroDB on Medium">ZeroDB</a>
</li>
<li><a href="" title="">Zeth</a>
</li>
<li><a href="http://blog.bottlepy.org/" title="bottlepy-dev">bottlepy-dev</a>
</li>
<li><a href="" title="codeboje - brief learning for developers - bullshit-free by Tag python">codeboje</a>
</li>
<li><a href="https://www.egenix.com/company/news" title="eGenix.com News &amp;amp; Events">eGenix.com</a>
</li>
<li><a href="http://hypothesis.works/articles/python/" title="Hypothesis articles tagged &quot;python&quot;">hypothesis.works articles</a>
</li>
<li><a href="http://scummos.blogspot.com/search/label/kdev-python" title="Linux, Games, Programming, and some other random stuff">kdev-python</a>
</li>
<li><a href="http://nl-project.blogspot.com/search/label/python" title="nl-project">nl-project</a>
</li>
<li><a href="http://pgcli.com/" title="pgcli">pgcli</a>
</li>
<li><a href="http://pythonwise.blogspot.com/search/label/python" title="PythonWise">pythonwise</a>
</li>
<li><a href="https://blog.qutebrowser.org/" title="qutebrowser development blog">qutebrowser development blog</a>
</li>
<li><a href="https://medium.com/@tryexceptpass?source=rss-138c0eb26be5------2" title="Stories by Cristian Medina on Medium">tryexceptpass</a>
</li>
<li><a href="" title="">wiredobjects</a>
</li>
<li><a href="http://zombofant.net/blog/tags/python" title="Posts with tag âpythonâ">zombofant.net</a>
</li>
<li><a href="https://wokslog.wordpress.com" title="python â Merwokâs System Log">Ãric Araujo</a>
</li>
<li><a href="http://lukasz.langa.pl/" title="lukasz.langa.pl: Recent entries tagged as python">Åukasz Langa</a>
</li>
<li><a href="http://pyarab.com" title="Ø¨Ø§ÙØ«ÙÙ Ø§ÙØ¹Ø±Ø¨Ù">Ø¨Ø§ÙØ«ÙÙ Ø§ÙØ¹Ø±Ø¨Ù</a>
</li>

<li>
    <i>
    To request addition or removal:<br />
    Open an issue on <a href="https://github.com/python/planet/issues">github</a><br />
    or e-mail planet at python.org<br />
    (note, responses can take up to a few days) 
    </i>
</li>
          </ul></li>
      </ul>
    </div>
  </div>
</body>
</html>
