<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=Edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<meta name="robots" content="index,nofollow">

<title>Python2orPython3 - Python Wiki</title>
<script type="text/javascript" src="/wiki/common/js/common.js"></script>

<script type="text/javascript">
<!--
var search_hint = "Search";
//-->
</script>


<link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/wiki/europython/css/common.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="/wiki/europython/css/screen.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="/wiki/europython/css/print.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="/wiki/europython/css/projection.css">

<!-- css only for MS IE6/IE7 browsers -->
<!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/wiki/europython/css/msie.css">
<![endif]-->


<link rel="alternate" title="Python Wiki: Python2orPython3" href="/moin/Python2orPython3?diffs=1&amp;show_att=1&amp;action=rss_rc&amp;unique=0&amp;page=Python2orPython3&amp;ddiffs=1" type="application/rss+xml">


<link rel="Start" href="/moin/FrontPage">
<link rel="Alternate" title="Wiki Markup" href="/moin/Python2orPython3?action=raw">
<link rel="Alternate" media="print" title="Print View" href="/moin/Python2orPython3?action=print">
<link rel="Search" href="/moin/FindPage">
<link rel="Index" href="/moin/TitleIndex">
<link rel="Glossary" href="/moin/WordIndex">
<link rel="Help" href="/moin/HelpOnFormatting">
</head>

<body  lang="en" dir="ltr">

<div id="header">

<form id="searchform" method="get" action="/moin/Python2orPython3">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="context" value="180">
<label for="searchinput">Search:</label>
<input id="searchinput" type="text" name="value" value="" size="20"
    onfocus="searchFocus(this)" onblur="searchBlur(this)"
    onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search">
<input id="titlesearch" name="titlesearch" type="submit"
    value="Titles" alt="Search Titles">
<input id="fullsearch" name="fullsearch" type="submit"
    value="Text" alt="Search Full Text">
</div>
</form>
<script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script>

<div id="logo"><a href="/moin/FrontPage"></a><a href="http://www.python.org"><img src="/wiki/europython/img/python-logo.gif" alt="Python" ></a><a name="logo"></a></div>
<div id="locationline">


<ul id="pagelocation">
<li><a href="/moin/Python2orPython3">Python2orPython3</a></li>
</ul>

</div>

<ul id="pagetrail">
<li><a href="/moin/Python2orPython3">Python2orPython3</a></li>
</ul>
</div>

<div id="sidebar">
<div id="star">

</div>
<div class="sidepanel">

<ul id="navibar">
<li class="wikilink"><a href="/moin/FrontPage">FrontPage</a></li><li class="wikilink"><a href="/moin/RecentChanges">RecentChanges</a></li><li class="wikilink"><a href="/moin/FindPage">FindPage</a></li><li class="wikilink"><a href="/moin/HelpContents">HelpContents</a></li><li class="current"><a href="/moin/Python2orPython3">Python2orPython3</a></li>
</ul>

</div>
<div class="sidepanel">
<h1>Page</h1>
<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onClick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="/moin/Python2orPython3?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="/moin/Python2orPython3?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/moin/Python2orPython3">
<div>
    <label>More Actions:</label>
    <select name="action"
        onchange="if ((this.selectedIndex != 0) &&
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="RenamePage" disabled class="disabled">Rename Page</option>
<option value="DeletePage" disabled class="disabled">Delete Page</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Remove Spam</option>
<option value="show" disabled class="disabled">Revert to this revision</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SlideShow">SlideShow</option>
    </select>
    <input type="submit" value="Do">
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

</div>
<div class="sidepanel">
<h1>User</h1>
<ul id="username"><li><a href="/moin/Python2orPython3?action=login" id="login" rel="nofollow">Login</a></li></ul>
</div>
</div>

<div id="page" lang="en" dir="ltr">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><p class="line867">
<h1 id="Should_I_use_Python_2_or_Python_3_for_my_development_activity.3F">Should I use Python 2 or Python 3 for my development activity?</h1>
<span class="anchor" id="line-2"></span><p class="line867"><div class="table-of-contents"><p class="table-of-contents-heading">Contents<ol><li>
<a href="#Should_I_use_Python_2_or_Python_3_for_my_development_activity.3F">Should I use Python 2 or Python 3 for my development activity?</a><ol><li>
<a href="#What_are_the_differences.3F">What are the differences?</a></li><li>
<a href="#Which_version_should_I_use.3F">Which version should I use?</a></li><li>
<a href="#But_wouldn.27t_I_want_to_avoid_2.x.3F_It.27s_an_old_language_with_many_mistakes.2C_and_it_took_a_major_version_to_get_them_out.">But wouldn't I want to avoid 2.x? It's an old language with many mistakes, and it took a major version to get them out.</a></li><li>
<a href="#I_want_to_use_Python_3.2C_but_there.27s_this_tiny_library_I_want_to_use_that.27s_Python_2.x_only._Do_I_really_have_to_revert_to_using_Python_2_or_give_up_on_using_that_library.3F">I want to use Python 3, but there's this tiny library I want to use that's Python 2.x only. Do I really have to revert to using Python 2 or give up on using that library?</a></li><li>
<a href="#I_decided_to_write_something_in_3.x_but_now_someone_wants_to_use_it_who_only_has_2.x._What_do_I_do.3F">I decided to write something in 3.x but now someone wants to use it who only has 2.x. What do I do?</a></li><li>
<a href="#Supporting_Python_2_and_Python_3_in_a_common_code_base">Supporting Python 2 and Python 3 in a common code base</a></li><li>
<a href="#Other_resources_that_may_help_make_the_choice_between_Python_2_and_Python_3">Other resources that may help make the choice between Python 2 and Python 3</a></li><li>
<a href="#Footnotes">Footnotes</a></li></ol></li></ol></div> <span class="anchor" id="line-3"></span><span class="anchor" id="line-4"></span><p class="line867">
<h2 id="What_are_the_differences.3F">What are the differences?</h2>
<span class="anchor" id="line-5"></span><p class="line867"><em>Short version: Python 2.x is legacy, Python 3.x is the present and future of the language</em> <span class="anchor" id="line-6"></span><span class="anchor" id="line-7"></span><p class="line874">Python 3.0 was released in 2008. The final 2.x version 2.7 release came out in mid-2010, with a statement of extended support for this end-of-life release. The 2.x branch will see no new major releases after that. 3.x is under active development and has already seen over five years of stable releases, including version 3.3 in 2012, 3.4 in 2014, 3.5 in 2015, and 3.6 in 2016. This means that all recent standard library improvements, for example, are only available by default in Python 3.x. <span class="anchor" id="line-8"></span><span class="anchor" id="line-9"></span><p class="line874">Guido van Rossum (the original creator of the Python language) decided to clean up Python 2.x properly, with less regard for backwards compatibility than is the case for new releases in the 2.x range. The most drastic improvement is the better Unicode support (with all text strings being Unicode by default) as well as saner bytes/Unicode separation. <span class="anchor" id="line-10"></span><span class="anchor" id="line-11"></span><p class="line874">Besides, several aspects of the core language (such as print and exec being statements, integers using floor division) have been adjusted to be easier for newcomers to learn and to be more consistent with the rest of the language, and old cruft has been removed (for example, all classes are now new-style, &quot;range()&quot; returns a memory efficient iterable, not a list as in 2.x). <span class="anchor" id="line-12"></span><span class="anchor" id="line-13"></span><p class="line862">The <a class="http" href="http://docs.python.org/py3k/whatsnew/3.0.html">What's New in Python 3.0</a> document provides a good overview of the major language changes and likely sources of incompatibility with existing Python 2.x code. Nick Coghlan (one of the CPython core developers) has also created a <a class="http" href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html">relatively extensive FAQ</a> regarding the transition. <span class="anchor" id="line-14"></span><span class="anchor" id="line-15"></span><p class="line874">However, the broader Python ecosystem has amassed a significant amount of quality software over the years. The downside of breaking backwards compatibility in 3.x is that some of that software (especially in-house software in companies) still doesn't work on 3.x yet. <span class="anchor" id="line-16"></span><span class="anchor" id="line-17"></span><p class="line867">
<h2 id="Which_version_should_I_use.3F">Which version should I use?</h2>
<span class="anchor" id="line-18"></span><p class="line874">Which version you ought to use is mostly dependent on what you want to get done. <span class="anchor" id="line-19"></span><span class="anchor" id="line-20"></span><p class="line862">If you can do exactly what you want with Python 3.x, great! There are a few minor downsides, such as very slightly worse library support<sup><a href="#fnref-4fcb00922956f144dafd52e4f75d82631e225d1b" id="fndef-4fcb00922956f144dafd52e4f75d82631e225d1b-0">1</a></sup> and the fact that some current Linux distributions and Macs still use 2.x as default, but as a language Python 3.x is definitely mature and ready for use. As long as Python 3.x is installed on your user's computers (which ought to be easy, since many people reading this may only be developing something for themselves or an environment they control) and you are writing things where you know none of the Python 2.x modules are needed, it is an excellent choice. Also, most Linux distributions have Python 3.x already installed, and nearly all have it available for end-users. One somewhat painful exception is Red Hat Enterprise Linux through version 7: Python 3 does exist in the EPEL repository, but some users may not be allowed by company policy to install anything from such add-on locations - see note on &quot;control&quot; below. Some distributions are phasing out Python 2 as preinstalled default.<sup><a href="#fnref-729f005f65eb8709309aad20cf8a9911eb532aa9" id="fndef-729f005f65eb8709309aad20cf8a9911eb532aa9-1">2</a></sup> <span class="anchor" id="line-21"></span><span class="anchor" id="line-22"></span><p class="line862">In particular, instructors introducing Python to new programmers should consider teaching Python 3 first and then introducing the differences in Python 2 afterwards (if necessary), since Python 3 <a class="http" href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html#why-is-python-3-considered-a-better-language-to-teach-beginning-programmers">eliminates many quirks</a> that can unnecessarily trip up beginning programmers trying to learn Python 2. <span class="anchor" id="line-23"></span><span class="anchor" id="line-24"></span><p class="line874">However, there are some key issues that may require you to use Python 2 rather than Python 3. <span class="anchor" id="line-25"></span><span class="anchor" id="line-26"></span><ul><li>Firstly, if you are deploying to an environment you don't control, that may require use of a specific version, rather than allowing you a free selection from the available versions. <span class="anchor" id="line-27"></span></li><li>Secondly, if you want to use a specific third party package or utility that doesn't yet have a released version that is compatible with Python 3, and porting that package is a non-trivial task, you may choose to use Python 2 in order to retain access to that package. <span class="anchor" id="line-28"></span><span class="anchor" id="line-29"></span></li></ul><p class="line862">Python 3 already broadly supports creating GUI applications, with Tkinter in the standard library. Python 3 has been supported by <a href="/moin/PyQt4">PyQt</a> almost from the day Python 3 was released; <a href="/moin/PySide">PySide</a> added Python 3 support in 2011. GTK+ GUIs can be created with <a class="https" href="https://live.gnome.org/PyGObject">PyGObject</a> which supports Python 3 and is the successor to <a href="/moin/PyGtk">PyGtk</a>. <span class="anchor" id="line-30"></span><span class="anchor" id="line-31"></span><p class="line874">Many other major packages have been ported to Python 3 including: <span class="anchor" id="line-32"></span><span class="anchor" id="line-33"></span><ul><li><p class="line891"><a class="https" href="https://www.numpy.org">NumPy</a> and <a class="https" href="https://www.scipy.org">SciPy</a> (for number crunching and scientific computing) <span class="anchor" id="line-34"></span></li><li><p class="line891"><a class="https" href="https://www.djangoproject.com/">Django</a>, <a class="http" href="http://flask.pocoo.org/">Flask</a>, <a href="/moin/CherryPy">CherryPy</a> and <a class="https" href="https://pyramid.readthedocs.org/en/latest">Pyramid</a> (for Web sites) <span class="anchor" id="line-35"></span></li><li><p class="line862">PIL (an image processing module) was superseded by its fork <a class="https" href="https://python-pillow.org/">Pillow</a>, which supports Python 3. <span class="anchor" id="line-36"></span></li><li><p class="line891"><a class="http" href="http://cx-freeze.sourceforge.net/">cx_Freeze</a> (for packaging applications with their dependencies) <span class="anchor" id="line-37"></span></li><li><p class="line891"><a class="http" href="http://www.py2exe.org/index.cgi/Tutorial#Step52">py2exe</a> (for packaging your application for Windows users) <span class="anchor" id="line-38"></span></li><li><p class="line891"><a class="http" href="http://opencv.org">OpenCV 3</a>, (an open source computer vision and machine learning library) now supports Python 3 in versions 3.0 and later. <span class="anchor" id="line-39"></span></li><li><p class="line891"><a class="http" href="http://python-requests.org">Requests</a>, (an HTTP library for humans) <span class="anchor" id="line-40"></span></li><li><p class="line891"><a class="http" href="http://lxml.de">lxml</a>, (a powerful and Pythonic XML processing library combining libxml2/libxslt with the <a href="/moin/ElementTree">ElementTree</a> API) <span class="anchor" id="line-41"></span></li><li><p class="line891"><a class="http" href="http://www.crummy.com/software/BeautifulSoup/bs4/">BeautifulSoup4</a>, (a screen-scraping library for parsing HTML and XML) <span class="anchor" id="line-42"></span></li><li><p class="line862">The <a class="http" href="http://ipython.org">IPython</a>/<a class="http" href="http://jupyter.org">Jupyter</a> project for interactive computing fully supports Python 3. <span class="anchor" id="line-43"></span></li><li>And many, many more! <span class="anchor" id="line-44"></span><span class="anchor" id="line-45"></span></li></ul><p class="line862">If you want to use Python 3.x, but you are afraid to because of a dependency, it's probably worthwhile doing some research first. This is a work in progress and this wiki page might be outdated (please update if you find newer information). Furthermore, with the large common subset supported by both Python 2.6+ and Python 3.3+, much modern Python code should run largely unmodified on Python 3, especially code written to interoperate with web and GUI frameworks that force applications to correctly distinguish binary data and text (some assistance from the <a class="https" href="https://pypi.python.org/pypi/six">six compatibility module</a> may be needed to handle name changes. <span class="anchor" id="line-46"></span><span class="anchor" id="line-47"></span><p class="line862">Even though the <a class="http" href="http://docs.python.org">official python documentation</a> and the <a class="http" href="http://docs.python.org/3/tutorial/">tutorial</a> have been completely updated for Python 3, there is still a lot of documentation (including examples) on the Web and in reference books that use Python 2, although more are being updated all the time. This can require some adjustment to make things work with Python 3 instead. <span class="anchor" id="line-48"></span><span class="anchor" id="line-49"></span><p class="line862">Some people just don't want to use Python 3.x, which is their prerogative.  However, they are <a href="/moin/2.x-vs-3.x-survey">in the minority</a>. <span class="anchor" id="line-50"></span><span class="anchor" id="line-51"></span><p class="line862">It is worth noting that if you wish to use an alternative implementation of Python such as <a href="/moin/IronPython">IronPython</a>, <a href="/moin/Jython">Jython</a> or <a class="http" href="http://pyston.org">Pyston</a> (or one of the longer list of Python platform or compiler <a href="/moin/PythonImplementations">implementations</a>), Python 3 support is still relatively rare. This may affect you if you are interested in choosing such an implementation for reasons of integration with other systems or for performance. <span class="anchor" id="line-52"></span><span class="anchor" id="line-53"></span><p class="line867">
<h2 id="But_wouldn.27t_I_want_to_avoid_2.x.3F_It.27s_an_old_language_with_many_mistakes.2C_and_it_took_a_major_version_to_get_them_out.">But wouldn't I want to avoid 2.x? It's an old language with many mistakes, and it took a major version to get them out.</h2>
<span class="anchor" id="line-54"></span><p class="line862">Well, not entirely. Some of the less disruptive improvements in 3.0 and 3.1 have been backported to 2.6 and 2.7, respectively. For more details on the backported features, see <a class="https" href="https://docs.python.org/2.6/whatsnew/2.6.html">What's New in Python 2.6</a> and <a class="https" href="https://docs.python.org/2.7/whatsnew/2.7.html">What's New in Python 2.7</a>. <span class="anchor" id="line-55"></span><span class="anchor" id="line-56"></span><p class="line874">A non-exhaustive list of features which are only available in 3.x releases and won't be backported to the 2.x series: <span class="anchor" id="line-57"></span><span class="anchor" id="line-58"></span><ul><li>strings are Unicode by default <span class="anchor" id="line-59"></span></li><li>clean Unicode/bytes separation <span class="anchor" id="line-60"></span></li><li>exception chaining <span class="anchor" id="line-61"></span></li><li>function annotations <span class="anchor" id="line-62"></span></li><li>syntax for keyword-only arguments <span class="anchor" id="line-63"></span></li><li>extended tuple unpacking <span class="anchor" id="line-64"></span></li><li>non-local variable declarations <span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span></li></ul><p class="line862">Also, language evolution is not limited to core syntactic or semantic changes. It also regards the standard library, where many improvements are done in 3.x that will not be backported directly to Python 2. See <a class="http" href="http://docs.python.org/3/whatsnew">What's New in Python 3</a>, for example. However, a number of the standard library improvements are also available through PyPI. <span class="anchor" id="line-67"></span><span class="anchor" id="line-68"></span><p class="line874">That said, well-written 2.x code can be a lot like 3.x code. That can mean many things, including using new-style classes, not using ancient deprecated arcane incantations of print, using lazy iterators where available, etc. A practical example: good 2.x code will typically use xrange instead of range; xrange was the starting point for the Python 3.x range implementation (although range is even better in Python 3, since it can handle values larger than sys.maxint). It should be noted that xrange() is not included in Python 3. <span class="anchor" id="line-69"></span><span class="anchor" id="line-70"></span><p class="line862">Above all, it is recommended that you focus on writing <em>good</em> code so that 2.x vs 3.x becomes less of an issue. That includes writing full unit test suites, and getting Unicode right. (Python 3.x is significantly less forgiving than 2.x about Unicode versus bytes issues: This is considered to be a good thing, though it makes porting some software packages fairly annoying.) <span class="anchor" id="line-71"></span><span class="anchor" id="line-72"></span><p class="line867">
<h2 id="I_want_to_use_Python_3.2C_but_there.27s_this_tiny_library_I_want_to_use_that.27s_Python_2.x_only._Do_I_really_have_to_revert_to_using_Python_2_or_give_up_on_using_that_library.3F">I want to use Python 3, but there's this tiny library I want to use that's Python 2.x only. Do I really have to revert to using Python 2 or give up on using that library?</h2>
<span class="anchor" id="line-73"></span><p class="line874">Assuming you can't find an alternative package that already supports Python 3, you still have a few options to consider: <span class="anchor" id="line-74"></span><span class="anchor" id="line-75"></span><ul><li>Port the library to 3.x. (&quot;Porting&quot; means that you make the library work on 3.x.) <span class="anchor" id="line-76"></span></li><li>If that turns out to be really hard, and all your other dependencies do exist in 2.x, consider starting off in 2.x. As has already been explained in other places, good 2.x code will typically make switching painless as soon as every dependency has been successfully ported. <span class="anchor" id="line-77"></span></li><li>Decide if the feature is really that important. Maybe you could drop it? <span class="anchor" id="line-78"></span><span class="anchor" id="line-79"></span></li></ul><p class="line874">The ideal situation is that you try to port the library to 3.x. Often you'll find someone is already working on this. Even when that's not the case, existing project members will usually appreciate the help, especially as porting often finds bugs in the original software, improving the quality of both the original and the 3.x port. Porting isn't always easy, but it's usually easier than writing your own thing from scratch. <span class="anchor" id="line-80"></span><span class="anchor" id="line-81"></span><p class="line862">How you're supposed to do porting is explained in this <a class="http" href="http://docs.python.org/3/howto/pyporting.html">Python 2 porting guide</a>. The basic idea is to take the 2.x version of the library and check that all the unit tests still pass without warning when using the -3 command line switch in Python 2. If tests fail or emit warnings, modify the sources and try again (this may require dropping compatibility with older Python versions). Once the code runs without warnings when using the -3 switch, then try running it with Python 3. The best possible case is when this &quot;just works&quot; - code written using modern Python 2 idioms is source compatible with Python 3, so it's possible that the &quot;port&quot; may be complete at this point. <span class="anchor" id="line-82"></span><span class="anchor" id="line-83"></span><p class="line862">If the tests still fail under Python 3, then the standard library's 2to3 utility can often automatically create a version that will run under Python 3. Alternatively, Armin Ronacher's <a class="https" href="https://pypi.python.org/pypi/modernize">python-modernize</a> utility instead targets the common subset of Python 2.6+ and either 3.2+ or 3.3+ (depending on the command line options used). (If using the latter, it's important to check the tests still pass under Python 2 as well!) <span class="anchor" id="line-84"></span><span class="anchor" id="line-85"></span><p class="line874">Either approach makes it feasible to support 2.x and 3.x in parallel from a single 2.x code base. This is much easier than trying to maintain separate 2.x and 3.x branches in parallel (just ask the core Python developers about that one - they've been stuck with doing that for quite a few years now!). <span class="anchor" id="line-86"></span><span class="anchor" id="line-87"></span><p class="line874">If the tests still fail after automated conversion or modernization, the code may be affected by a semantic change between Python 2 and 3 that the converters can't handle automatically and that isn't detected by the -3 switch. Such issues should be rare, but may still exist - if one is encountered, it's worth filing a bug against CPython requesting a new -3 warning. <span class="anchor" id="line-88"></span><span class="anchor" id="line-89"></span><p class="line862">The porting situation is potentially more complicated if there are C extension modules involved and the project isn't using a wrapper generator like Cython, cffi or SWIG that automatically handles the differences between Python 2 and 3, but even then it is still likely to be easier than inventing your own equivalent package. The <a class="http" href="http://docs.python.org/3/howto/cporting.html">extension porting guide</a> covers some of the key differences. <span class="anchor" id="line-90"></span><span class="anchor" id="line-91"></span><p class="line862">There are also some more in depth guides right here on the wiki: <a href="/moin/PortingPythonToPy3k">PortingPythonToPy3k</a>, <a href="/moin/PortingExtensionModulesToPy3k">PortingExtensionModulesToPy3k</a> <span class="anchor" id="line-92"></span><span class="anchor" id="line-93"></span><p class="line867">
<h2 id="I_decided_to_write_something_in_3.x_but_now_someone_wants_to_use_it_who_only_has_2.x._What_do_I_do.3F">I decided to write something in 3.x but now someone wants to use it who only has 2.x. What do I do?</h2>
<span class="anchor" id="line-94"></span><p class="line862">In addition to the 2to3 tool that allows 3.x code to be generated from 2.x source code, there's also the <a href="/moin/3to2">3to2</a> tool, which aims to convert 3.x code back to 2.x code. In theory, this should work even better than going the other direction, since 3.x doesn't have as many nasty corner cases for the converter to handle (getting rid of as many of those as possible was one of the main reasons for breaking backward compatibility after all!). However, code which makes heavy use of 3.x only features (such as function annotations or extended tuple unpacking) is unlikely to be converted successfully. <span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span><p class="line874">It's probably also fair to say that 3to2 is the road less traveled compared to 2to3 at this stage, so you might come across a few rough edges here and there. However, if you want to write 3.x code, it's definitely an idea worth exploring. <span class="anchor" id="line-97"></span><span class="anchor" id="line-98"></span><p class="line867">
<h2 id="Supporting_Python_2_and_Python_3_in_a_common_code_base">Supporting Python 2 and Python 3 in a common code base</h2>
<span class="anchor" id="line-99"></span><p class="line874">The common subset of Python 2.6+ and Python 3.3+ is quite large - the restoration of u prefix support for unicode literals in Python 3.3 means that semantically correct Python 2.6+ code can be made source compatible with Python 3.3+ while still remaining largely idiomatic Python. The main difference is that some things will need to be imported from different places in order to handle the fact they have different names in Python 2 and Python 3. <span class="anchor" id="line-100"></span><span class="anchor" id="line-101"></span><p class="line862">Accordingly, the <a class="http" href="http://packages.python.org/six/">six compatibility package</a> is a key utility for supporting Python 2 and Python 3 in a single code base. <span class="anchor" id="line-102"></span><span class="anchor" id="line-103"></span><p class="line862">The <a class="http" href="http://python-future.org/index.html">future compatibility package</a> is still in beta and doesn't support as many versions of Python as six (it only goes back as far as Python 2.6, while six supports Python 2.4), but allows Python 2 compatible code to be written in a style that is closer to idiomatic Python 3 (for example, it includes an actual Python 2 compatible implementation of the Python 3 bytes type, rather than relying on the Python 2.x 8-bit string type that exposes a slightly different API). <span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><p class="line874">Another key thing to identify for standard library modules is if there is a more up to date backport on PyPI that can be used in preference to the 2.x standard library version. The following modules are either PyPI backports, or else the original modules that served as the source of (or inspiration for) standard library additions in Python 2.7 or 3.x: <span class="anchor" id="line-106"></span><span class="anchor" id="line-107"></span><ul><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/unittest2">unittest2</a> (Michael Foord, stdlib unittest maintainer, needed mostly for 2.6 support) <span class="anchor" id="line-108"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/mock">mock</a> (Michael Foord, stdlib unittest.mock maintainer) <span class="anchor" id="line-109"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/contextlib2">contextlib2</a> (Nick Coghlan, stdlib contextlib maintainer) <span class="anchor" id="line-110"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/configparser">configparser</a> (Łukasz Langa, stdlib configparser maintainer) <span class="anchor" id="line-111"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/futures">futures</a> (Alex Grönholm and Brian Quinlan, stdlib concurrent.futures maintainer) <span class="anchor" id="line-112"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/argparse">argparse</a> (Steven Bethard, stdlib argparse maintainer, needed mostly for 2.6 support) <span class="anchor" id="line-113"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/faulthandler">faulthandler</a> (Victor Stinner, stdlib faulthandler maintainer) <span class="anchor" id="line-114"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/cdecimal/2.3">cdecimal</a> (Stefan Krah, stdlib decimal maintainer) <span class="anchor" id="line-115"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/ipaddr">ipaddr</a> (Peter Moody, stdlib ipaddress maintainer, Google's IP address manipulation module that inspired the design of the stdlib ipaddress module) <span class="anchor" id="line-116"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/stats">stats</a> (Steven D'Aprano, stdlib statistics maintainer) <span class="anchor" id="line-117"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/enum34">enum34</a> (Ethan Furman, stdlib enum maintainer) <span class="anchor" id="line-118"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/funcsigs">funcsigs</a> (Aaron Iles, backport of function signature objects) <span class="anchor" id="line-119"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/backports">shared namespace module for backports</a> (Brandon Craig Rhodes) <span class="anchor" id="line-120"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/backports.inspect">backports.inspect</a> (Tripp Lilley, backport of additional inspect module changes, based on funcsigs) <span class="anchor" id="line-121"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/backports.datetime_timestamp">backports.datetime_timestamp</a> (Jason R. Coombs, backport of datetime.timestamp method as a module level function accepting a datetime object) <span class="anchor" id="line-122"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/backports.pbkdf2">backports.pbkdf2</a> (Christian Heimes, stdlib hashlib maintainer, backport of hashlib.pbkdf2_hmac) <span class="anchor" id="line-123"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/backports.ssl_match_hostname">backports.ssl_match_hostname</a> (Brandom Craig Rhodes and Toshio Kuratomi, backport of ssl.match_hostname) <span class="anchor" id="line-124"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/backports.lzma">backports.lzma</a> (Peter Cock, backport of the lzma wrapper module) <span class="anchor" id="line-125"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/lzmaffi">lzmaffi</a> (Tomer Chachamu, alternate lzma backport that uses cffi for better <a href="/moin/PyPy">PyPy</a> JIT compatibility) <span class="anchor" id="line-126"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/tracemalloc">tracemalloc</a> (Victor Stinner, stdlib tracemalloc maintainer) <span class="anchor" id="line-127"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/pathlib">pathlib</a> (Antoine Pitrou, stdlib pathlib maintainer) <span class="anchor" id="line-128"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/selectors34">selectors34</a> (Berker Peksag, backport of the stdlib selectors module) <span class="anchor" id="line-129"></span><span class="anchor" id="line-130"></span></li></ul><p class="line874">The advantage of using the backports namespace module is that it clearly indicates when something is a cross-version backport of a standard library feature, and also allows the original module name to be used when appropriate without conflicting with the standard library name. <span class="anchor" id="line-131"></span><span class="anchor" id="line-132"></span><p class="line862">Some smaller Python 3 additions are available as recipes in the <a href="/moin/ActiveState">ActiveState</a> Python Cookbook. <span class="anchor" id="line-133"></span><span class="anchor" id="line-134"></span><p class="line862">* <a class="http" href="http://code.activestate.com/recipes/578078-py26-and-py30-backport-of-python-33s-lru-cache/">functools.lru_cache</a> (Raymond Hettinger) <span class="anchor" id="line-135"></span><span class="anchor" id="line-136"></span><p class="line874">The following modules aren't backports, but are cross-version compatible alternatives to key standard library APIs: <span class="anchor" id="line-137"></span><span class="anchor" id="line-138"></span><ul><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/requests">requests</a> (higher level HTTP and HTTPS APIs. requests itself is unlikely to be added to the stdlib for assorted technical reasons, but an equivalent client API based on asyncio is a plausible future addition) <span class="anchor" id="line-139"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/regex">regex</a> (an alternative regular expression engine with in principle approval for eventual stdlib inclusion, but requires a PEP to work out the details of the incorporation) <span class="anchor" id="line-140"></span></li><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/lxml/">lxml.etree</a> (alternative implementation of the <a href="/moin/ElementTree">ElementTree</a> XML API) <span class="anchor" id="line-141"></span><span class="anchor" id="line-142"></span></li></ul><p class="line874">In addition to the above modules that also support Python 2, the asyncio module added to the standard library in Python 3.4 was originally developed as a PyPI module for Python 3.3: <span class="anchor" id="line-143"></span><span class="anchor" id="line-144"></span><ul><li><p class="line891"><a class="https" href="https://pypi.python.org/pypi/asyncio">asyncio</a> (Guido van Rossum, BDFL and stdlib asyncio maintainer, requires &quot;yield from&quot; syntax added in Python 3.3) <span class="anchor" id="line-145"></span><span class="anchor" id="line-146"></span></li></ul><p class="line867">
<h2 id="Other_resources_that_may_help_make_the_choice_between_Python_2_and_Python_3">Other resources that may help make the choice between Python 2 and Python 3</h2>
<span class="anchor" id="line-147"></span><ul><li><p class="line891"><a class="http" href="http://getpython3.com/">Community Web site to promote Python 3</a> <span class="anchor" id="line-148"></span></li><li><p class="line862">Nick Efford has some specific comments in relation to teaching programming with Python 3: <a class="http" href="http://www.comp.leeds.ac.uk/nde/papers/teachpy3.html">http://www.comp.leeds.ac.uk/nde/papers/teachpy3.html</a> <span class="anchor" id="line-149"></span></li><li><p class="line862">Mark Pilgrim has written a Python 3 focused version of &quot;Dive Into Python&quot;: <a class="http" href="http://getpython3.com/diveintopython3/">http://getpython3.com/diveintopython3/</a> <span class="anchor" id="line-150"></span></li><li><p class="line862">Swaroop C H has updated &quot;A Byte of Python&quot; to use Python 3, while keeping the last Python 2 based version available: <a class="http" href="http://www.swaroopch.com/notes/Python">http://www.swaroopch.com/notes/Python</a> <span class="anchor" id="line-151"></span></li><li><p class="line862">&quot;What an <a href="/moin/IronPython">IronPython</a> user should know about Python 3&quot;: <a class="http" href="http://www.itworld.com/development/104506/python-3-and-ironpython">http://www.itworld.com/development/104506/python-3-and-ironpython</a> <span class="anchor" id="line-152"></span></li><li><p class="line891"><a href="/moin/PyCon">PyCon</a> Ireland 2010 included a talk by Paul Barry entitled &quot;Head First into Python 3&quot; and is available here: <a class="http" href="http://vimeo.com/groups/pyconireland/videos/14354395">http://vimeo.com/groups/pyconireland/videos/14354395</a> - Paul has a follow-up talk from <a href="/moin/PyCon">PyCon</a> Ireland 2011 entitled &quot;What's the scoop with Python 3?&quot; where he talks more about the (lack of) Python 3 adoption within the community, available here: <a class="http" href="http://vimeo.com/groups/pyconireland/videos/31071871">http://vimeo.com/groups/pyconireland/videos/31071871</a> <span class="anchor" id="line-153"></span></li><li><p class="line862">Mark Summerfield has written a 4 page PDF summarizing the differences between Python 2 and 3: <a class="http" href="http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/promotions/python/python2python3.pdf">Moving from Python 2 to Python 3</a> <span class="anchor" id="line-154"></span></li><li><p class="line862">Wesley Chun has written a couple of Python 3 articles: <a class="http" href="http://www.informit.com/articles/article.aspx?p=1328795">Python 3: the Evolution of a Programming Language (Mar 2009)</a> and <a class="http" href="http://www.informit.com/articles/article.aspx?p=1439189">Python's &quot;New&quot; Division: Python 2 Versus Python 3 (Jan 2010)</a> <span class="anchor" id="line-155"></span></li><li><p class="line862">Wesley Chun's <a class="http" href="http://us.pycon.org/2010/conference/schedule/event/29">Python 3: the Next Generation</a> talk &amp; slides (<a href="/moin/PyCon">PyCon</a>, Feb 2010) <span class="anchor" id="line-156"></span></li><li><p class="line862">James Bennett wrote an interesting article discussing <a class="http" href="http://www.b-list.org/weblog/2008/dec/05/python-3000/">why Python 3.0 exists at all</a> <span class="anchor" id="line-157"></span></li><li><p class="line891"><a class="http" href="http://washort.twistedmatrix.com/2010/11/unicode-in-python-and-how-to-prevent-it.html">how to get Unicode versus bytes semantics in 2.x similar to the ones in 3.x</a> (preventing implicit encoding and decoding, while keeping useful features, such as str.split/bytes.split <span class="anchor" id="line-158"></span></li><li><p class="line862">Nick Coghlan has <a class="http" href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html">an FAQ</a> cover many details of the rationale behind creating Python 3, the intended migration plan, and the current status of the transition <span class="anchor" id="line-159"></span><span class="anchor" id="line-160"></span></li></ul><p class="line867">
<h2 id="Footnotes">Footnotes</h2>
<span class="anchor" id="line-161"></span><div class="footnotes"><ol><li><p><a id="fnref-4fcb00922956f144dafd52e4f75d82631e225d1b"></a><span class="anchor" id="line-1-1"></span>Amongst still-maintained packages: <a class="https" href="https://python3wos.appspot.com">https://python3wos.appspot.com</a>  (<a href="#fndef-4fcb00922956f144dafd52e4f75d82631e225d1b-0">1</a>)</li><li><p><a id="fnref-729f005f65eb8709309aad20cf8a9911eb532aa9"></a><span class="anchor" id="line-1-2"></span>Arch Linux links python to python3, and Ubuntu and Fedora switch defaults: <a class="https" href="https://wiki.ubuntu.com/Python/3">https://wiki.ubuntu.com/Python/3</a> <a class="https" href="https://fedoraproject.org/wiki/Changes/Python_3_as_Default">https://fedoraproject.org/wiki/Changes/Python_3_as_Default</a>  (<a href="#fndef-729f005f65eb8709309aad20cf8a9911eb532aa9-1">2</a>)</li></ol></div><span class="anchor" id="bottom"></span></div><p id="pageinfo" class="info" lang="en" dir="ltr">Python2orPython3  (last edited 2017-09-10 19:33:35 by <span title="MatsWichmann @ 209-188-119-117.taosnet.com[209.188.119.117]"><a class="nonexistent" href="/moin/MatsWichmann" title="MatsWichmann @ 209-188-119-117.taosnet.com[209.188.119.117]">MatsWichmann</a></span>)</p>

<div id="pagebottom"></div>
</div>


<div id="footer">
<ul id="credits">
<li><a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a></li><li><a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a></li><li><a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a></li><li><a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a></li>
</ul>


</div>
<p style="text-align: center; font-size: 85%"><a href="/moin/FrontPage#use">Unable to edit the page? See the FrontPage for instructions.</a></p></body>
</html>

